
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c0 2a 00 20 49 1d 00 00 77 5c 00 00 01 1d 00 00     .*. I...w\......
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
  10:	01 1d 00 00 01 1d 00 00 01 1d 00 00 00 00 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	b1 18 00 00 01 1d 00 00 00 00 00 00 59 18 00 00     ............Y...
	unsigned int s_ro_cnt = 0; /* number of ro strings */
  3c:	01 1d 00 00                                         ....

00000040 <_irq_vector_table>:
	unsigned int s_rw_cnt = 0; /* number of rw strings */
  40:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  50:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
  60:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
  70:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
  80:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  90:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................
					str_ptr_arg[s_idx] = arg_idx;
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
  a0:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
  b0:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  c0:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................
				parsing = false;
  d0:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................
					arg_idx++;
  e0:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................
			switch (*fmt) {
  f0:	89 19 00 00 89 19 00 00 89 19 00 00 89 19 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
				parsing = false;
     118:	f1ad 0c08 	sub.w	ip, sp, #8
			switch (*fmt) {
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     120:	f000 f808 	bl	134 <__udivmoddi4>
				parsing = false;
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
			switch (*fmt) {
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				parsing = false;
     12c:	b004      	add	sp, #16
			switch (*fmt) {
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			if (*++fmt == '\0') {
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
			if (!parsing) {
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
			switch (*fmt) {
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <__data_size+0x14c>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <__data_size+0x5c>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <__data_size+0x54>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295
     18c:	d204      	bcs.n	198 <__data_size+0x14>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <__data_size+0x14>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <__data_size+0x58>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295
     1b8:	d204      	bcs.n	1c4 <__data_size+0x40>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <__data_size+0x40>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <__data_size+0x50>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <__data_size+0x14>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <__data_size+0x40>
     1e0:	bb92      	cbnz	r2, 248 <__data_size+0xc4>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <__data_size+0x144>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295
     208:	d204      	bcs.n	214 <__data_size+0x90>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <__data_size+0x90>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
				parsing = false;
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
				align = VA_STACK_ALIGN(size_t);
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
				continue;
     222:	fb0c f707 	mul.w	r7, ip, r7
				align = VA_STACK_ALIGN(ptrdiff_t);
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
				continue;
     22a:	42a7      	cmp	r7, r4
				if (fmt[-1] == 'l') {
     22c:	d94e      	bls.n	2cc <__data_size+0x148>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295
		buf = (void *) ROUND_UP(buf, align);
     234:	d204      	bcs.n	240 <__data_size+0xbc>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <__data_size+0xbc>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <__data_size+0x46>
     248:	f1c2 0320 	rsb	r3, r2, #32
		if (is_str_arg) {
     24c:	fa20 f103 	lsr.w	r1, r0, r3
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
			long long v = va_arg(ap, long long);
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16

			if (buf0 != NULL) {
     272:	4588      	cmp	r8, r1
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     274:	fa04 f402 	lsl.w	r4, r4, r2
				}
			}
			buf += sizeof(long long);
     278:	d922      	bls.n	2c0 <__data_size+0x13c>
     27a:	1869      	adds	r1, r5, r1
					if (fmt[-2] == 'l') {
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295
     280:	d204      	bcs.n	28c <__data_size+0x108>
     282:	4588      	cmp	r8, r1
				parsing = false;
     284:	d902      	bls.n	28c <__data_size+0x108>
						align = VA_STACK_ALIGN(long);
     286:	f1ac 0002 	sub.w	r0, ip, #2
						size = sizeof(long);
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
						align = VA_STACK_ALIGN(long long);
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
						size = sizeof(long long);
     296:	fb0e 111c 	mls	r1, lr, ip, r1
				if (fmt[-1] == 'L') {
     29a:	fb0c f707 	mul.w	r7, ip, r7
					v.d = va_arg(ap, double);
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <__data_size+0x140>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295
     2ac:	d204      	bcs.n	2b8 <__data_size+0x134>
     2ae:	429f      	cmp	r7, r3
				buf = (void *) ROUND_UP(buf, align);
     2b0:	d902      	bls.n	2b8 <__data_size+0x134>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
				if (buf0 != NULL) {
     2b6:	442b      	add	r3, r5
					if (BUF_OFFSET + size > len) {
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <__data_size+0x62>
					} else if (fmt[-1] == 'L') {
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <__data_size+0x108>
     2c4:	4661      	mov	r1, ip
						*(double *)buf = v.d;
     2c6:	e7f7      	b.n	2b8 <__data_size+0x134>
     2c8:	4660      	mov	r0, ip
				buf += size;
     2ca:	e7a3      	b.n	214 <__data_size+0x90>
				parsing = false;
     2cc:	4663      	mov	r3, ip
				continue;
     2ce:	e7b7      	b.n	240 <__data_size+0xbc>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <__data_size+0x15e>
     2d4:	b916      	cbnz	r6, 2dc <__data_size+0x158>
					v.ld = va_arg(ap, long double);
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <__data_size+0x50>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <__data_size+0x152>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <__data_size+0x188>
					size = sizeof(long double);
     2e8:	4283      	cmp	r3, r0
						return -ENOSPC;
     2ea:	d301      	bcc.n	2f0 <__data_size+0x16c>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <__data_size+0x17e>
						*(long double *)buf = v.ld;
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
				align = VA_STACK_ALIGN(void *);
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
				size = sizeof(void *);
     2fc:	b91e      	cbnz	r6, 306 <__data_size+0x182>
     2fe:	2100      	movs	r1, #0
				is_str_arg = true;
     300:	e768      	b.n	1d4 <__data_size+0x50>
				parsing = false;
     302:	4638      	mov	r0, r7
				align = VA_STACK_ALIGN(void *);
     304:	e7fa      	b.n	2fc <__data_size+0x178>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
				size = sizeof(void *);
     30a:	e7f8      	b.n	2fe <__data_size+0x17a>
			s = va_arg(ap, char *);
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     318:	fa2e f10c 	lsr.w	r1, lr, ip
			if (*++fmt == '\0') {
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     334:	fb09 3018 	mls	r0, r9, r8, r3
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
						s_rw_cnt++;
     348:	d940      	bls.n	3cc <__data_size+0x248>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295
					len += 1;
     350:	d204      	bcs.n	35c <__data_size+0x1d8>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <__data_size+0x1d8>
				} else if (rws_pos_en) {
     356:	f1a8 0002 	sub.w	r0, r8, #2
					len += 2;
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
					len += strlen(s) + 1 + 1;
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
			int v = va_arg(ap, int);
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
			if (buf0 != NULL) {
     374:	d92c      	bls.n	3d0 <__data_size+0x24c>
				*(int *)buf = v;
     376:	1861      	adds	r1, r4, r1
			buf += sizeof(int);
     378:	f108 33ff 	add.w	r3, r8, #4294967295
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     37c:	d204      	bcs.n	388 <__data_size+0x204>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <__data_size+0x204>
     382:	f1a8 0302 	sub.w	r3, r8, #2

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     386:	4421      	add	r1, r4
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     38c:	fba0 9802 	umull	r9, r8, r0, r2

	if (rws_pos_en) {
     390:	eba1 010e 	sub.w	r1, r1, lr
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <__data_size+0x21e>
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     39c:	d106      	bne.n	3ac <__data_size+0x228>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <__data_size+0x228>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     3ae:	d0a6      	beq.n	2fe <__data_size+0x17a>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
		for (i = 0; i < s_idx; i++) {
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <__data_size+0x17a>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <__data_size+0x1d8>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <__data_size+0x204>

000003d4 <send_uart>:
    }
}
#endif

static void send_uart(char *buf)
{
     3d4:	b570      	push	{r4, r5, r6, lr}
     3d6:	4606      	mov	r6, r0
    int msg_len = strlen(buf);
     3d8:	f005 fd5e 	bl	5e98 <strlen>
     3dc:	4605      	mov	r5, r0
    printk("Sending %d bytes: %s", msg_len, buf);
     3de:	4632      	mov	r2, r6
     3e0:	4601      	mov	r1, r0
     3e2:	4807      	ldr	r0, [pc, #28]	; (400 <CONFIG_FLASH_SIZE>)
     3e4:	f004 ffb5 	bl	5352 <printk>

#if USE_INTERRUPTS
    for (int i = 0; i < msg_len; i++) {
     3e8:	2400      	movs	r4, #0
     3ea:	e005      	b.n	3f8 <send_uart+0x24>
        uart_poll_out(uart_dev, buf[i]);
     3ec:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
     3ee:	4805      	ldr	r0, [pc, #20]	; (404 <CONFIG_FLASH_SIZE+0x4>)
     3f0:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
     3f2:	69db      	ldr	r3, [r3, #28]
     3f4:	4798      	blx	r3
    for (int i = 0; i < msg_len; i++) {
     3f6:	3401      	adds	r4, #1
     3f8:	42ac      	cmp	r4, r5
     3fa:	dbf7      	blt.n	3ec <send_uart+0x18>
    int ret = uart_tx(uart_dev, buf, msg_len, 1000);
    if (ret < 0) {
        printk("Failed to send UART data: %d\n", ret);
    }
#endif
}
     3fc:	bd70      	pop	{r4, r5, r6, pc}
     3fe:	bf00      	nop
     400:	000075a8 	.word	0x000075a8
     404:	0000731c 	.word	0x0000731c

00000408 <parse_wifi_info>:
{
     408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    char *ptr = strstr(line, "+QWSCAN:");
     40c:	493d      	ldr	r1, [pc, #244]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     40e:	f005 fcf2 	bl	5df6 <strstr>
    if (!ptr) return;
     412:	2800      	cmp	r0, #0
     414:	d045      	beq.n	4a2 <parse_wifi_info+0x9a>
     416:	4605      	mov	r5, r0
    ptr += 8;  // Skip "+QWSCAN:"
     418:	f100 0608 	add.w	r6, r0, #8
    struct wifi_network *net = &networks[network_count];
     41c:	4b3a      	ldr	r3, [pc, #232]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     41e:	681c      	ldr	r4, [r3, #0]
     420:	2264      	movs	r2, #100	; 0x64
    memset(net, 0, sizeof(struct wifi_network));
     422:	2100      	movs	r1, #0
     424:	4839      	ldr	r0, [pc, #228]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     426:	fb02 0004 	mla	r0, r2, r4, r0
     42a:	f005 fd95 	bl	5f58 <memset>
    if (*ptr == '"') {
     42e:	7a2b      	ldrb	r3, [r5, #8]
     430:	2b22      	cmp	r3, #34	; 0x22
     432:	d038      	beq.n	4a6 <parse_wifi_info+0x9e>
    ptr = strchr(ptr, ',');
     434:	212c      	movs	r1, #44	; 0x2c
     436:	4630      	mov	r0, r6
     438:	f005 fd21 	bl	5e7e <strchr>
    if (ptr) {
     43c:	4605      	mov	r5, r0
     43e:	b198      	cbz	r0, 468 <parse_wifi_info+0x60>
        ptr++;  // Skip comma
     440:	3501      	adds	r5, #1
        char *end = strchr(ptr, ',');
     442:	212c      	movs	r1, #44	; 0x2c
     444:	4628      	mov	r0, r5
     446:	f005 fd1a 	bl	5e7e <strchr>
        if (end) {
     44a:	4607      	mov	r7, r0
     44c:	b120      	cbz	r0, 458 <parse_wifi_info+0x50>
            int len = end - ptr;
     44e:	1b46      	subs	r6, r0, r5
            if (len > 0 && len < sizeof(net->security)) {
     450:	1e73      	subs	r3, r6, #1
     452:	2b1e      	cmp	r3, #30
     454:	d942      	bls.n	4dc <parse_wifi_info+0xd4>
    if (ptr) {
     456:	b13d      	cbz	r5, 468 <parse_wifi_info+0x60>
        net->rssi = atoi(ptr);
     458:	4628      	mov	r0, r5
     45a:	f005 fca5 	bl	5da8 <atoi>
     45e:	4b2b      	ldr	r3, [pc, #172]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     460:	2264      	movs	r2, #100	; 0x64
     462:	fb02 3304 	mla	r3, r2, r4, r3
     466:	6618      	str	r0, [r3, #96]	; 0x60
    if (net->ssid[network_count] && net->security[network_count]) {
     468:	4b27      	ldr	r3, [pc, #156]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     46a:	681a      	ldr	r2, [r3, #0]
     46c:	4b27      	ldr	r3, [pc, #156]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     46e:	2164      	movs	r1, #100	; 0x64
     470:	fb01 3304 	mla	r3, r1, r4, r3
     474:	5c9b      	ldrb	r3, [r3, r2]
     476:	b1a3      	cbz	r3, 4a2 <parse_wifi_info+0x9a>
     478:	4b24      	ldr	r3, [pc, #144]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     47a:	fb01 3304 	mla	r3, r1, r4, r3
     47e:	4413      	add	r3, r2
     480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
     484:	b16b      	cbz	r3, 4a2 <parse_wifi_info+0x9a>
        network_count = (network_count + 1) % MAX_WIFI_NETWORKS;
     486:	3201      	adds	r2, #1
     488:	4921      	ldr	r1, [pc, #132]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     48a:	fb81 3102 	smull	r3, r1, r1, r2
     48e:	4411      	add	r1, r2
     490:	17d3      	asrs	r3, r2, #31
     492:	ebc3 1321 	rsb	r3, r3, r1, asr #4
     496:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
     49a:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
     49e:	4a1a      	ldr	r2, [pc, #104]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     4a0:	6013      	str	r3, [r2, #0]
}
     4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ptr++;  // Skip first quote
     4a6:	f105 0609 	add.w	r6, r5, #9
        char *end = strchr(ptr, '"');
     4aa:	2122      	movs	r1, #34	; 0x22
     4ac:	4630      	mov	r0, r6
     4ae:	f005 fce6 	bl	5e7e <strchr>
        if (end) {
     4b2:	4605      	mov	r5, r0
     4b4:	2800      	cmp	r0, #0
     4b6:	d0bd      	beq.n	434 <parse_wifi_info+0x2c>
            int len = end - ptr;
     4b8:	1b87      	subs	r7, r0, r6
            if (len > 0 && len < MAX_SSID_LENGTH) {
     4ba:	1e7b      	subs	r3, r7, #1
     4bc:	2b3e      	cmp	r3, #62	; 0x3e
     4be:	d8b9      	bhi.n	434 <parse_wifi_info+0x2c>
                strncpy(net->ssid, ptr, len);
     4c0:	2264      	movs	r2, #100	; 0x64
     4c2:	4b12      	ldr	r3, [pc, #72]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     4c4:	fb02 3804 	mla	r8, r2, r4, r3
     4c8:	463a      	mov	r2, r7
     4ca:	4631      	mov	r1, r6
     4cc:	4640      	mov	r0, r8
     4ce:	f005 fcbc 	bl	5e4a <strncpy>
                net->ssid[len] = '\0';
     4d2:	2300      	movs	r3, #0
     4d4:	f808 3007 	strb.w	r3, [r8, r7]
                ptr = end + 1;  // Skip closing quote
     4d8:	1c6e      	adds	r6, r5, #1
     4da:	e7ab      	b.n	434 <parse_wifi_info+0x2c>
                strncpy(net->security, ptr, len);
     4dc:	f04f 0964 	mov.w	r9, #100	; 0x64
     4e0:	fb09 f904 	mul.w	r9, r9, r4
     4e4:	f109 0040 	add.w	r0, r9, #64	; 0x40
     4e8:	f8df 8020 	ldr.w	r8, [pc, #32]	; 50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     4ec:	4632      	mov	r2, r6
     4ee:	4629      	mov	r1, r5
     4f0:	4440      	add	r0, r8
     4f2:	f005 fcaa 	bl	5e4a <strncpy>
                net->security[len] = '\0';
     4f6:	44c8      	add	r8, r9
     4f8:	44b0      	add	r8, r6
     4fa:	2300      	movs	r3, #0
     4fc:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
                ptr = end + 1;  // Skip comma
     500:	1c7d      	adds	r5, r7, #1
    if (ptr) {
     502:	e7a9      	b.n	458 <parse_wifi_info+0x50>
     504:	000075c0 	.word	0x000075c0
     508:	20000430 	.word	0x20000430
     50c:	20000434 	.word	0x20000434
     510:	88888889 	.word	0x88888889

00000514 <uart_read_cb>:
{
     514:	b510      	push	{r4, lr}
     516:	b082      	sub	sp, #8
    if (!uart_irq_update(uart_dev)) {
     518:	481f      	ldr	r0, [pc, #124]	; (598 <uart_read_cb+0x84>)
     51a:	f004 ff0f 	bl	533c <uart_irq_update>
     51e:	2800      	cmp	r0, #0
     520:	d037      	beq.n	592 <uart_read_cb+0x7e>
 * @retval -ENOTSUP If API is not enabled.
 */
static inline int uart_irq_rx_ready(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     522:	4b1d      	ldr	r3, [pc, #116]	; (598 <uart_read_cb+0x84>)
     524:	689b      	ldr	r3, [r3, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_ready == NULL) {
     526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     528:	b11b      	cbz	r3, 532 <uart_read_cb+0x1e>
		return -ENOSYS;
	}
	return api->irq_rx_ready(dev);
     52a:	481b      	ldr	r0, [pc, #108]	; (598 <uart_read_cb+0x84>)
     52c:	4798      	blx	r3
    if (!uart_irq_rx_ready(uart_dev)) {
     52e:	2800      	cmp	r0, #0
     530:	d02f      	beq.n	592 <uart_read_cb+0x7e>
    uart_irq_rx_disable(uart_dev);
     532:	4819      	ldr	r0, [pc, #100]	; (598 <uart_read_cb+0x84>)
     534:	f004 fefc 	bl	5330 <uart_irq_rx_disable>
	while (uart_fifo_read(uart_dev, &c, 1) == 1) {
     538:	e00f      	b.n	55a <uart_read_cb+0x46>
		if ((c == '\n') && rx_buf_pos > 0) {
     53a:	4b18      	ldr	r3, [pc, #96]	; (59c <uart_read_cb+0x88>)
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	2b00      	cmp	r3, #0
     540:	dd1a      	ble.n	578 <uart_read_cb+0x64>
			rx_buf[rx_buf_pos -1] = '\0';
     542:	1e5a      	subs	r2, r3, #1
     544:	4916      	ldr	r1, [pc, #88]	; (5a0 <uart_read_cb+0x8c>)
     546:	2400      	movs	r4, #0
     548:	548c      	strb	r4, [r1, r2]
            rx_buf[rx_buf_pos] = '\0';
     54a:	54cc      	strb	r4, [r1, r3]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
     54c:	2200      	movs	r2, #0
     54e:	2300      	movs	r3, #0
     550:	4814      	ldr	r0, [pc, #80]	; (5a4 <uart_read_cb+0x90>)
     552:	f003 fdf1 	bl	4138 <z_impl_k_msgq_put>
			rx_buf_pos = 0;
     556:	4b11      	ldr	r3, [pc, #68]	; (59c <uart_read_cb+0x88>)
     558:	601c      	str	r4, [r3, #0]
	const struct uart_driver_api *api =
     55a:	4b0f      	ldr	r3, [pc, #60]	; (598 <uart_read_cb+0x84>)
     55c:	689b      	ldr	r3, [r3, #8]
	if (api->fifo_read == NULL) {
     55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     560:	b1a3      	cbz	r3, 58c <uart_read_cb+0x78>
	return api->fifo_read(dev, rx_data, size);
     562:	2201      	movs	r2, #1
     564:	f10d 0107 	add.w	r1, sp, #7
     568:	480b      	ldr	r0, [pc, #44]	; (598 <uart_read_cb+0x84>)
     56a:	4798      	blx	r3
	while (uart_fifo_read(uart_dev, &c, 1) == 1) {
     56c:	2801      	cmp	r0, #1
     56e:	d10d      	bne.n	58c <uart_read_cb+0x78>
		if ((c == '\n') && rx_buf_pos > 0) {
     570:	f89d 2007 	ldrb.w	r2, [sp, #7]
     574:	2a0a      	cmp	r2, #10
     576:	d0e0      	beq.n	53a <uart_read_cb+0x26>
		} else if (rx_buf_pos < (sizeof(rx_buf) - 1)) {
     578:	4b08      	ldr	r3, [pc, #32]	; (59c <uart_read_cb+0x88>)
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	2b7e      	cmp	r3, #126	; 0x7e
     57e:	d8ec      	bhi.n	55a <uart_read_cb+0x46>
			rx_buf[rx_buf_pos++] = c;
     580:	1c58      	adds	r0, r3, #1
     582:	4906      	ldr	r1, [pc, #24]	; (59c <uart_read_cb+0x88>)
     584:	6008      	str	r0, [r1, #0]
     586:	4906      	ldr	r1, [pc, #24]	; (5a0 <uart_read_cb+0x8c>)
     588:	54ca      	strb	r2, [r1, r3]
     58a:	e7e6      	b.n	55a <uart_read_cb+0x46>
    uart_irq_rx_enable(uart_dev);
     58c:	4802      	ldr	r0, [pc, #8]	; (598 <uart_read_cb+0x84>)
     58e:	f004 fec9 	bl	5324 <uart_irq_rx_enable>
}
     592:	b002      	add	sp, #8
     594:	bd10      	pop	{r4, pc}
     596:	bf00      	nop
     598:	0000731c 	.word	0x0000731c
     59c:	200003ac 	.word	0x200003ac
     5a0:	200003b0 	.word	0x200003b0
     5a4:	200001e0 	.word	0x200001e0

000005a8 <set_send_cmd>:
    send_cmd = cmd;
     5a8:	4b01      	ldr	r3, [pc, #4]	; (5b0 <set_send_cmd+0x8>)
     5aa:	6018      	str	r0, [r3, #0]
}
     5ac:	4770      	bx	lr
     5ae:	bf00      	nop
     5b0:	200003a8 	.word	0x200003a8

000005b4 <get_send_cmd>:
}
     5b4:	4b01      	ldr	r3, [pc, #4]	; (5bc <get_send_cmd+0x8>)
     5b6:	6818      	ldr	r0, [r3, #0]
     5b8:	4770      	bx	lr
     5ba:	bf00      	nop
     5bc:	200003a8 	.word	0x200003a8

000005c0 <send_next_init_command>:
{
     5c0:	b510      	push	{r4, lr}
    printk("init_step: %d\n", init_step);
     5c2:	4c0f      	ldr	r4, [pc, #60]	; (600 <send_next_init_command+0x40>)
     5c4:	6821      	ldr	r1, [r4, #0]
     5c6:	480f      	ldr	r0, [pc, #60]	; (604 <send_next_init_command+0x44>)
     5c8:	f004 fec3 	bl	5352 <printk>
    switch (init_step) {
     5cc:	6823      	ldr	r3, [r4, #0]
     5ce:	2b06      	cmp	r3, #6
     5d0:	d00e      	beq.n	5f0 <send_next_init_command+0x30>
     5d2:	2b07      	cmp	r3, #7
     5d4:	d010      	beq.n	5f8 <send_next_init_command+0x38>
     5d6:	2b05      	cmp	r3, #5
     5d8:	d109      	bne.n	5ee <send_next_init_command+0x2e>
            send_uart(AT_HTTP_CFG "=\"response/output\",1\r\n");
     5da:	480b      	ldr	r0, [pc, #44]	; (608 <send_next_init_command+0x48>)
     5dc:	f7ff fefa 	bl	3d4 <send_uart>
    set_send_cmd(init_step);
     5e0:	4c07      	ldr	r4, [pc, #28]	; (600 <send_next_init_command+0x40>)
     5e2:	6820      	ldr	r0, [r4, #0]
     5e4:	f7ff ffe0 	bl	5a8 <set_send_cmd>
    init_step++;
     5e8:	6823      	ldr	r3, [r4, #0]
     5ea:	3301      	adds	r3, #1
     5ec:	6023      	str	r3, [r4, #0]
}
     5ee:	bd10      	pop	{r4, pc}
            send_uart(AT_HTTP_CFG "=\"" SUB_HEADER "\",\"" SUB_TYPE "\",\"application/json\"\r\n");
     5f0:	4806      	ldr	r0, [pc, #24]	; (60c <send_next_init_command+0x4c>)
     5f2:	f7ff feef 	bl	3d4 <send_uart>
            break;
     5f6:	e7f3      	b.n	5e0 <send_next_init_command+0x20>
            send_uart(AT_HTTP_CFG "=\"" SUB_HEADER "\",\"" SUB_AGENT "\",\"WIFI_TEST\"\r\n");
     5f8:	4805      	ldr	r0, [pc, #20]	; (610 <send_next_init_command+0x50>)
     5fa:	f7ff feeb 	bl	3d4 <send_uart>
            break;
     5fe:	e7ef      	b.n	5e0 <send_next_init_command+0x20>
     600:	20000004 	.word	0x20000004
     604:	000075cc 	.word	0x000075cc
     608:	000075dc 	.word	0x000075dc
     60c:	00007600 	.word	0x00007600
     610:	0000763c 	.word	0x0000763c

00000614 <send_next_post_command>:
{
     614:	b510      	push	{r4, lr}
    printk("post_step: %d\n", post_step);
     616:	4c0c      	ldr	r4, [pc, #48]	; (648 <send_next_post_command+0x34>)
     618:	6821      	ldr	r1, [r4, #0]
     61a:	480c      	ldr	r0, [pc, #48]	; (64c <send_next_post_command+0x38>)
     61c:	f004 fe99 	bl	5352 <printk>
    switch (post_step) {
     620:	6823      	ldr	r3, [r4, #0]
     622:	2b08      	cmp	r3, #8
     624:	d005      	beq.n	632 <send_next_post_command+0x1e>
     626:	2b09      	cmp	r3, #9
     628:	d10d      	bne.n	646 <send_next_post_command+0x32>
            send_uart(AT_HTTP_POST "=31,60,60\r\n");
     62a:	4809      	ldr	r0, [pc, #36]	; (650 <send_next_post_command+0x3c>)
     62c:	f7ff fed2 	bl	3d4 <send_uart>
            break;
     630:	e002      	b.n	638 <send_next_post_command+0x24>
            send_uart(AT_HTTP_CFG "=\"" SUB_URL "\",\"" DEFAULT_URL ROUTE_EXAMPLE ROUTE_TEST "\"\r\n");
     632:	4808      	ldr	r0, [pc, #32]	; (654 <send_next_post_command+0x40>)
     634:	f7ff fece 	bl	3d4 <send_uart>
    set_send_cmd(post_step);
     638:	4c03      	ldr	r4, [pc, #12]	; (648 <send_next_post_command+0x34>)
     63a:	6820      	ldr	r0, [r4, #0]
     63c:	f7ff ffb4 	bl	5a8 <set_send_cmd>
    post_step++;
     640:	6823      	ldr	r3, [r4, #0]
     642:	3301      	adds	r3, #1
     644:	6023      	str	r3, [r4, #0]
}
     646:	bd10      	pop	{r4, pc}
     648:	20000000 	.word	0x20000000
     64c:	0000766c 	.word	0x0000766c
     650:	000076e0 	.word	0x000076e0
     654:	0000767c 	.word	0x0000767c

00000658 <parse_msg>:
{
     658:	b530      	push	{r4, r5, lr}
     65a:	b0c5      	sub	sp, #276	; 0x114
     65c:	4604      	mov	r4, r0
    printk("Received[%d]: %s\n", get_send_cmd(), msg);
     65e:	f7ff ffa9 	bl	5b4 <get_send_cmd>
     662:	4601      	mov	r1, r0
     664:	4622      	mov	r2, r4
     666:	4885      	ldr	r0, [pc, #532]	; (87c <__z_interrupt_stack_SIZEOF+0x3c>)
     668:	f004 fe73 	bl	5352 <printk>
    if(strcmp(msg, AT_READY) == 0){
     66c:	4984      	ldr	r1, [pc, #528]	; (880 <__z_interrupt_stack_SIZEOF+0x40>)
     66e:	4620      	mov	r0, r4
     670:	f005 fc25 	bl	5ebe <strcmp>
     674:	b1d0      	cbz	r0, 6ac <parse_msg+0x54>
    if(strcmp(msg, AT_ERROR) == 0){
     676:	4983      	ldr	r1, [pc, #524]	; (884 <__z_interrupt_stack_SIZEOF+0x44>)
     678:	4620      	mov	r0, r4
     67a:	f005 fc20 	bl	5ebe <strcmp>
     67e:	b330      	cbz	r0, 6ce <parse_msg+0x76>
    if (strstr(msg, "+QWSCAN:")) {
     680:	4981      	ldr	r1, [pc, #516]	; (888 <__z_interrupt_stack_SIZEOF+0x48>)
     682:	4620      	mov	r0, r4
     684:	f005 fbb7 	bl	5df6 <strstr>
     688:	bb28      	cbnz	r0, 6d6 <parse_msg+0x7e>
    switch (get_send_cmd()) {
     68a:	f7ff ff93 	bl	5b4 <get_send_cmd>
     68e:	3801      	subs	r0, #1
     690:	2808      	cmp	r0, #8
     692:	f200 809c 	bhi.w	7ce <parse_msg+0x176>
     696:	e8df f010 	tbh	[pc, r0, lsl #1]
     69a:	002f      	.short	0x002f
     69c:	00880042 	.word	0x00880042
     6a0:	009e0097 	.word	0x009e0097
     6a4:	00ab009e 	.word	0x00ab009e
     6a8:	00d800b8 	.word	0x00d800b8
        printk("WiFi modem ready\n");
     6ac:	4877      	ldr	r0, [pc, #476]	; (88c <__z_interrupt_stack_SIZEOF+0x4c>)
     6ae:	f004 fe50 	bl	5352 <printk>
        init_step = CMD_HTTP_OUT_IDX;
     6b2:	4b77      	ldr	r3, [pc, #476]	; (890 <__z_interrupt_stack_SIZEOF+0x50>)
     6b4:	2205      	movs	r2, #5
     6b6:	601a      	str	r2, [r3, #0]
        post_step = CMD_HTTP_URL_IDX;
     6b8:	4b76      	ldr	r3, [pc, #472]	; (894 <__z_interrupt_stack_SIZEOF+0x54>)
     6ba:	2208      	movs	r2, #8
     6bc:	601a      	str	r2, [r3, #0]
        send_uart("AT\r\n");
     6be:	4876      	ldr	r0, [pc, #472]	; (898 <__z_interrupt_stack_SIZEOF+0x58>)
     6c0:	f7ff fe88 	bl	3d4 <send_uart>
        set_send_cmd(CMD_AT_IDX);
     6c4:	2001      	movs	r0, #1
     6c6:	f7ff ff6f 	bl	5a8 <set_send_cmd>
}
     6ca:	b045      	add	sp, #276	; 0x114
     6cc:	bd30      	pop	{r4, r5, pc}
        send_uart("AT+QRST\r\n");
     6ce:	4873      	ldr	r0, [pc, #460]	; (89c <__z_interrupt_stack_SIZEOF+0x5c>)
     6d0:	f7ff fe80 	bl	3d4 <send_uart>
        return;
     6d4:	e7f9      	b.n	6ca <parse_msg+0x72>
        printk("Parsing WiFi info\n");
     6d6:	4872      	ldr	r0, [pc, #456]	; (8a0 <__z_interrupt_stack_SIZEOF+0x60>)
     6d8:	f004 fe3b 	bl	5352 <printk>
        memset(msg_copy, 0, sizeof(msg_copy));
     6dc:	2280      	movs	r2, #128	; 0x80
     6de:	2100      	movs	r1, #0
     6e0:	a804      	add	r0, sp, #16
     6e2:	f005 fc39 	bl	5f58 <memset>
        strncpy(msg_copy, msg, sizeof(msg_copy) - 1);
     6e6:	227f      	movs	r2, #127	; 0x7f
     6e8:	4621      	mov	r1, r4
     6ea:	a804      	add	r0, sp, #16
     6ec:	f005 fbad 	bl	5e4a <strncpy>
        parse_wifi_info(msg_copy);
     6f0:	a804      	add	r0, sp, #16
     6f2:	f7ff fe89 	bl	408 <parse_wifi_info>
        return;
     6f6:	e7e8      	b.n	6ca <parse_msg+0x72>
            if(strcmp(msg, AT_OK) != 0){
     6f8:	496a      	ldr	r1, [pc, #424]	; (8a4 <__z_interrupt_stack_SIZEOF+0x64>)
     6fa:	4620      	mov	r0, r4
     6fc:	f005 fbdf 	bl	5ebe <strcmp>
     700:	b930      	cbnz	r0, 710 <parse_msg+0xb8>
            send_uart(AT_STASCAN "\r\n");
     702:	4869      	ldr	r0, [pc, #420]	; (8a8 <__z_interrupt_stack_SIZEOF+0x68>)
     704:	f7ff fe66 	bl	3d4 <send_uart>
            set_send_cmd(CMD_STASCAN_IDX);
     708:	2002      	movs	r0, #2
     70a:	f7ff ff4d 	bl	5a8 <set_send_cmd>
            return;
     70e:	e7dc      	b.n	6ca <parse_msg+0x72>
                printk("Failed to initialize\n");
     710:	4866      	ldr	r0, [pc, #408]	; (8ac <__z_interrupt_stack_SIZEOF+0x6c>)
     712:	f004 fe1e 	bl	5352 <printk>
                send_uart("AT+QRST\r\n");
     716:	4861      	ldr	r0, [pc, #388]	; (89c <__z_interrupt_stack_SIZEOF+0x5c>)
     718:	f7ff fe5c 	bl	3d4 <send_uart>
                return;
     71c:	e7d5      	b.n	6ca <parse_msg+0x72>
            printk("\nFound %d networks:\n", network_count);
     71e:	4b64      	ldr	r3, [pc, #400]	; (8b0 <__z_interrupt_stack_SIZEOF+0x70>)
     720:	6819      	ldr	r1, [r3, #0]
     722:	4864      	ldr	r0, [pc, #400]	; (8b4 <__z_interrupt_stack_SIZEOF+0x74>)
     724:	f004 fe15 	bl	5352 <printk>
            for (int i = 0; i < network_count; i++) {
     728:	2500      	movs	r5, #0
     72a:	4b61      	ldr	r3, [pc, #388]	; (8b0 <__z_interrupt_stack_SIZEOF+0x70>)
     72c:	681b      	ldr	r3, [r3, #0]
     72e:	42ab      	cmp	r3, r5
     730:	dd4d      	ble.n	7ce <parse_msg+0x176>
                printk("chk ssid: %s\n", networks[i].ssid);
     732:	2364      	movs	r3, #100	; 0x64
     734:	4c60      	ldr	r4, [pc, #384]	; (8b8 <__z_interrupt_stack_SIZEOF+0x78>)
     736:	fb03 4405 	mla	r4, r3, r5, r4
     73a:	4621      	mov	r1, r4
     73c:	485f      	ldr	r0, [pc, #380]	; (8bc <__z_interrupt_stack_SIZEOF+0x7c>)
     73e:	f004 fe08 	bl	5352 <printk>
                if(strcmp(networks[i].ssid, DEFAULT_WIFI_SSID) == 0){
     742:	495f      	ldr	r1, [pc, #380]	; (8c0 <__z_interrupt_stack_SIZEOF+0x80>)
     744:	4620      	mov	r0, r4
     746:	f005 fbba 	bl	5ebe <strcmp>
     74a:	b108      	cbz	r0, 750 <parse_msg+0xf8>
            for (int i = 0; i < network_count; i++) {
     74c:	3501      	adds	r5, #1
     74e:	e7ec      	b.n	72a <parse_msg+0xd2>
                    printk("Network %d:\n", i + 1);
     750:	1c69      	adds	r1, r5, #1
     752:	485c      	ldr	r0, [pc, #368]	; (8c4 <__z_interrupt_stack_SIZEOF+0x84>)
     754:	f004 fdfd 	bl	5352 <printk>
                    printk("  SSID: %s\n", networks[i].ssid);
     758:	4621      	mov	r1, r4
     75a:	485b      	ldr	r0, [pc, #364]	; (8c8 <__z_interrupt_stack_SIZEOF+0x88>)
     75c:	f004 fdf9 	bl	5352 <printk>
                    printk("  Security: %s\n", networks[i].security);
     760:	2364      	movs	r3, #100	; 0x64
     762:	fb03 f505 	mul.w	r5, r3, r5
     766:	f105 0140 	add.w	r1, r5, #64	; 0x40
     76a:	4c53      	ldr	r4, [pc, #332]	; (8b8 <__z_interrupt_stack_SIZEOF+0x78>)
     76c:	4421      	add	r1, r4
     76e:	4857      	ldr	r0, [pc, #348]	; (8cc <__z_interrupt_stack_SIZEOF+0x8c>)
     770:	f004 fdef 	bl	5352 <printk>
                    printk("  RSSI: %d\n", networks[i].rssi);
     774:	442c      	add	r4, r5
     776:	6e21      	ldr	r1, [r4, #96]	; 0x60
     778:	4855      	ldr	r0, [pc, #340]	; (8d0 <__z_interrupt_stack_SIZEOF+0x90>)
     77a:	f004 fdea 	bl	5352 <printk>
                    memset(send_buf, 0, sizeof(send_buf));
     77e:	2280      	movs	r2, #128	; 0x80
     780:	2100      	movs	r1, #0
     782:	a824      	add	r0, sp, #144	; 0x90
     784:	f005 fbe8 	bl	5f58 <memset>
                    snprintf(send_buf, sizeof(send_buf), "%s=%s,%s\r\n",
     788:	4b52      	ldr	r3, [pc, #328]	; (8d4 <__z_interrupt_stack_SIZEOF+0x94>)
     78a:	9301      	str	r3, [sp, #4]
     78c:	4b4c      	ldr	r3, [pc, #304]	; (8c0 <__z_interrupt_stack_SIZEOF+0x80>)
     78e:	9300      	str	r3, [sp, #0]
     790:	4b51      	ldr	r3, [pc, #324]	; (8d8 <__z_interrupt_stack_SIZEOF+0x98>)
     792:	4a52      	ldr	r2, [pc, #328]	; (8dc <__z_interrupt_stack_SIZEOF+0x9c>)
     794:	2180      	movs	r1, #128	; 0x80
     796:	a824      	add	r0, sp, #144	; 0x90
     798:	f001 fbf4 	bl	1f84 <snprintf>
                    send_uart(send_buf);
     79c:	a824      	add	r0, sp, #144	; 0x90
     79e:	f7ff fe19 	bl	3d4 <send_uart>
                    set_send_cmd(CMD_STACONN_IDX);
     7a2:	2003      	movs	r0, #3
     7a4:	f7ff ff00 	bl	5a8 <set_send_cmd>
                    return;
     7a8:	e78f      	b.n	6ca <parse_msg+0x72>
            if(strstr(msg, "GOT_IP") == NULL){
     7aa:	494d      	ldr	r1, [pc, #308]	; (8e0 <__z_interrupt_stack_SIZEOF+0xa0>)
     7ac:	4620      	mov	r0, r4
     7ae:	f005 fb22 	bl	5df6 <strstr>
     7b2:	b128      	cbz	r0, 7c0 <parse_msg+0x168>
            printk("WiFi connection successful\n");
     7b4:	484b      	ldr	r0, [pc, #300]	; (8e4 <__z_interrupt_stack_SIZEOF+0xa4>)
     7b6:	f004 fdcc 	bl	5352 <printk>
            send_next_init_command();  // HTTP 설정 초기화 시작
     7ba:	f7ff ff01 	bl	5c0 <send_next_init_command>
            return;
     7be:	e784      	b.n	6ca <parse_msg+0x72>
                printk("wait for IP address\n");
     7c0:	4849      	ldr	r0, [pc, #292]	; (8e8 <__z_interrupt_stack_SIZEOF+0xa8>)
     7c2:	f004 fdc6 	bl	5352 <printk>
                return;
     7c6:	e780      	b.n	6ca <parse_msg+0x72>
            printk("QSTAST command successful\n");
     7c8:	4848      	ldr	r0, [pc, #288]	; (8ec <__z_interrupt_stack_SIZEOF+0xac>)
     7ca:	f004 fdc2 	bl	5352 <printk>
    set_send_cmd(CMD_NULL);
     7ce:	2000      	movs	r0, #0
     7d0:	f7ff feea 	bl	5a8 <set_send_cmd>
     7d4:	e779      	b.n	6ca <parse_msg+0x72>
            if(strcmp(msg, AT_OK) == 0) {
     7d6:	4933      	ldr	r1, [pc, #204]	; (8a4 <__z_interrupt_stack_SIZEOF+0x64>)
     7d8:	4620      	mov	r0, r4
     7da:	f005 fb70 	bl	5ebe <strcmp>
     7de:	2800      	cmp	r0, #0
     7e0:	f47f af73 	bne.w	6ca <parse_msg+0x72>
                printk("Command successful\n");
     7e4:	4842      	ldr	r0, [pc, #264]	; (8f0 <__z_interrupt_stack_SIZEOF+0xb0>)
     7e6:	f004 fdb4 	bl	5352 <printk>
                send_next_init_command();  // 다음 HTTP 설정
     7ea:	f7ff fee9 	bl	5c0 <send_next_init_command>
     7ee:	e76c      	b.n	6ca <parse_msg+0x72>
            if(strcmp(msg, AT_OK) == 0) {
     7f0:	492c      	ldr	r1, [pc, #176]	; (8a4 <__z_interrupt_stack_SIZEOF+0x64>)
     7f2:	4620      	mov	r0, r4
     7f4:	f005 fb63 	bl	5ebe <strcmp>
     7f8:	2800      	cmp	r0, #0
     7fa:	f47f af66 	bne.w	6ca <parse_msg+0x72>
                printk("HTTP configuration complete\n");
     7fe:	483d      	ldr	r0, [pc, #244]	; (8f4 <__z_interrupt_stack_SIZEOF+0xb4>)
     800:	f004 fda7 	bl	5352 <printk>
                send_next_post_command();  // POST 명령어 시작
     804:	f7ff ff06 	bl	614 <send_next_post_command>
     808:	e75f      	b.n	6ca <parse_msg+0x72>
            if(strcmp(msg, AT_OK) == 0) {
     80a:	4926      	ldr	r1, [pc, #152]	; (8a4 <__z_interrupt_stack_SIZEOF+0x64>)
     80c:	4620      	mov	r0, r4
     80e:	f005 fb56 	bl	5ebe <strcmp>
     812:	2800      	cmp	r0, #0
     814:	f47f af59 	bne.w	6ca <parse_msg+0x72>
                memset(send_buf, 0, sizeof(send_buf));
     818:	2280      	movs	r2, #128	; 0x80
     81a:	2100      	movs	r1, #0
     81c:	a824      	add	r0, sp, #144	; 0x90
     81e:	f005 fb9b 	bl	5f58 <memset>
                snprintf(send_buf, sizeof(send_buf), "%s=%d,%d,%d\r\n",
     822:	4835      	ldr	r0, [pc, #212]	; (8f8 <__z_interrupt_stack_SIZEOF+0xb8>)
     824:	f005 fb38 	bl	5e98 <strlen>
     828:	233c      	movs	r3, #60	; 0x3c
     82a:	9302      	str	r3, [sp, #8]
     82c:	9301      	str	r3, [sp, #4]
     82e:	9000      	str	r0, [sp, #0]
     830:	4b32      	ldr	r3, [pc, #200]	; (8fc <__z_interrupt_stack_SIZEOF+0xbc>)
     832:	4a33      	ldr	r2, [pc, #204]	; (900 <__z_interrupt_stack_SIZEOF+0xc0>)
     834:	2180      	movs	r1, #128	; 0x80
     836:	a824      	add	r0, sp, #144	; 0x90
     838:	f001 fba4 	bl	1f84 <snprintf>
                send_uart(send_buf);
     83c:	a824      	add	r0, sp, #144	; 0x90
     83e:	f7ff fdc9 	bl	3d4 <send_uart>
                set_send_cmd(CMD_HTTP_POST_IDX);
     842:	2009      	movs	r0, #9
     844:	f7ff feb0 	bl	5a8 <set_send_cmd>
     848:	e73f      	b.n	6ca <parse_msg+0x72>
            if(strcmp(msg, "CONNECT") == 0){
     84a:	492e      	ldr	r1, [pc, #184]	; (904 <__z_interrupt_stack_SIZEOF+0xc4>)
     84c:	4620      	mov	r0, r4
     84e:	f005 fb36 	bl	5ebe <strcmp>
     852:	2800      	cmp	r0, #0
     854:	d1bb      	bne.n	7ce <parse_msg+0x176>
                printk("HTTP POST command successful\n");
     856:	482c      	ldr	r0, [pc, #176]	; (908 <__z_interrupt_stack_SIZEOF+0xc8>)
     858:	f004 fd7b 	bl	5352 <printk>
                memset(send_buf, 0, sizeof(send_buf));
     85c:	2280      	movs	r2, #128	; 0x80
     85e:	2100      	movs	r1, #0
     860:	a824      	add	r0, sp, #144	; 0x90
     862:	f005 fb79 	bl	5f58 <memset>
                snprintf(send_buf, sizeof(send_buf), "%s\r\n", TEST_STRING);
     866:	4b24      	ldr	r3, [pc, #144]	; (8f8 <__z_interrupt_stack_SIZEOF+0xb8>)
     868:	4a28      	ldr	r2, [pc, #160]	; (90c <__z_interrupt_stack_SIZEOF+0xcc>)
     86a:	2180      	movs	r1, #128	; 0x80
     86c:	a824      	add	r0, sp, #144	; 0x90
     86e:	f001 fb89 	bl	1f84 <snprintf>
                send_uart(send_buf);
     872:	a824      	add	r0, sp, #144	; 0x90
     874:	f7ff fdae 	bl	3d4 <send_uart>
                return;
     878:	e727      	b.n	6ca <parse_msg+0x72>
     87a:	bf00      	nop
     87c:	000076f8 	.word	0x000076f8
     880:	0000770c 	.word	0x0000770c
     884:	00007730 	.word	0x00007730
     888:	000075c0 	.word	0x000075c0
     88c:	00007714 	.word	0x00007714
     890:	20000004 	.word	0x20000004
     894:	20000000 	.word	0x20000000
     898:	00007728 	.word	0x00007728
     89c:	00007738 	.word	0x00007738
     8a0:	00007744 	.word	0x00007744
     8a4:	00007758 	.word	0x00007758
     8a8:	00007774 	.word	0x00007774
     8ac:	0000775c 	.word	0x0000775c
     8b0:	20000430 	.word	0x20000430
     8b4:	00007780 	.word	0x00007780
     8b8:	20000434 	.word	0x20000434
     8bc:	00007798 	.word	0x00007798
     8c0:	000077a8 	.word	0x000077a8
     8c4:	000077b4 	.word	0x000077b4
     8c8:	000077c4 	.word	0x000077c4
     8cc:	000077d0 	.word	0x000077d0
     8d0:	000077e0 	.word	0x000077e0
     8d4:	00007808 	.word	0x00007808
     8d8:	000077ec 	.word	0x000077ec
     8dc:	000077fc 	.word	0x000077fc
     8e0:	00007814 	.word	0x00007814
     8e4:	00007834 	.word	0x00007834
     8e8:	0000781c 	.word	0x0000781c
     8ec:	00007850 	.word	0x00007850
     8f0:	0000786c 	.word	0x0000786c
     8f4:	00007880 	.word	0x00007880
     8f8:	000078a0 	.word	0x000078a0
     8fc:	000078b8 	.word	0x000078b8
     900:	000078c8 	.word	0x000078c8
     904:	000078d8 	.word	0x000078d8
     908:	000078e0 	.word	0x000078e0
     90c:	00007900 	.word	0x00007900

00000910 <main>:

int main(void)
{
     910:	b510      	push	{r4, lr}
     912:	b0a2      	sub	sp, #136	; 0x88
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     914:	4840      	ldr	r0, [pc, #256]	; (a18 <main+0x108>)
     916:	f006 fa54 	bl	6dc2 <z_device_is_ready>
    char recv_buf[MSG_SIZE];

    if (!device_is_ready(uart_dev)) {
     91a:	2800      	cmp	r0, #0
     91c:	d057      	beq.n	9ce <main+0xbe>
        return 0;
    }

    // UART 설정을 명시적으로 구성
    struct uart_config cfg;
    cfg.baudrate = 115200;
     91e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
     922:	9300      	str	r3, [sp, #0]
    cfg.parity = UART_CFG_PARITY_NONE;
     924:	2300      	movs	r3, #0
     926:	f88d 3004 	strb.w	r3, [sp, #4]
    cfg.stop_bits = UART_CFG_STOP_BITS_1;
     92a:	2201      	movs	r2, #1
     92c:	f88d 2005 	strb.w	r2, [sp, #5]
    cfg.data_bits = UART_CFG_DATA_BITS_8;
     930:	2203      	movs	r2, #3
     932:	f88d 2006 	strb.w	r2, [sp, #6]
    cfg.flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
     936:	f88d 3007 	strb.w	r3, [sp, #7]

    if (uart_configure(uart_dev, &cfg) < 0) {
     93a:	4669      	mov	r1, sp
     93c:	4836      	ldr	r0, [pc, #216]	; (a18 <main+0x108>)
     93e:	f004 fcdf 	bl	5300 <uart_configure>
     942:	2800      	cmp	r0, #0
     944:	db48      	blt.n	9d8 <main+0xc8>
 * @retval -ENOTSUP If API is not enabled.
 */
static inline int uart_irq_callback_set(const struct device *dev,
					 uart_irq_callback_user_data_t cb)
{
	return uart_irq_callback_user_data_set(dev, cb, NULL);
     946:	2200      	movs	r2, #0
     948:	4934      	ldr	r1, [pc, #208]	; (a1c <main+0x10c>)
     94a:	4833      	ldr	r0, [pc, #204]	; (a18 <main+0x108>)
     94c:	f004 fcca 	bl	52e4 <uart_irq_callback_user_data_set>
#if USE_INTERRUPTS
    int ret = uart_irq_callback_set(uart_dev, uart_read_cb);
#else
    int ret = uart_callback_set(uart_dev, uart_read_cb, NULL);
#endif
    if (ret < 0) {
     950:	1e01      	subs	r1, r0, #0
     952:	db47      	blt.n	9e4 <main+0xd4>
		}
		return 0;
	}

#if USE_INTERRUPTS
    uart_irq_rx_enable(uart_dev);
     954:	4c30      	ldr	r4, [pc, #192]	; (a18 <main+0x108>)
     956:	4620      	mov	r0, r4
     958:	f004 fce4 	bl	5324 <uart_irq_rx_enable>
#else
    uart_rx_enable(uart_dev, rx_buf, MSG_SIZE, 1000);
#endif

    // 현재 UART 설정 확인
    int err = uart_config_get(uart_dev, &cfg);
     95c:	4669      	mov	r1, sp
     95e:	4620      	mov	r0, r4
     960:	f004 fcd7 	bl	5312 <uart_config_get>
    if (err == 0) {
     964:	4601      	mov	r1, r0
     966:	2800      	cmp	r0, #0
     968:	d14f      	bne.n	a0a <main+0xfa>
        printk("UART Configuration:\n");
     96a:	482d      	ldr	r0, [pc, #180]	; (a20 <main+0x110>)
     96c:	f004 fcf1 	bl	5352 <printk>
        printk("  Baudrate: %d\n", cfg.baudrate);
     970:	9900      	ldr	r1, [sp, #0]
     972:	482c      	ldr	r0, [pc, #176]	; (a24 <main+0x114>)
     974:	f004 fced 	bl	5352 <printk>
        printk("  Parity: %d\n", cfg.parity);
     978:	f89d 1004 	ldrb.w	r1, [sp, #4]
     97c:	482a      	ldr	r0, [pc, #168]	; (a28 <main+0x118>)
     97e:	f004 fce8 	bl	5352 <printk>
        printk("  Stop bits: %d\n", cfg.stop_bits);
     982:	f89d 1005 	ldrb.w	r1, [sp, #5]
     986:	4829      	ldr	r0, [pc, #164]	; (a2c <main+0x11c>)
     988:	f004 fce3 	bl	5352 <printk>
        printk("  Data bits: %d\n", cfg.data_bits);
     98c:	f89d 1006 	ldrb.w	r1, [sp, #6]
     990:	4827      	ldr	r0, [pc, #156]	; (a30 <main+0x120>)
     992:	f004 fcde 	bl	5352 <printk>
        printk("  Flow control: %d\n", cfg.flow_ctrl);
     996:	f89d 1007 	ldrb.w	r1, [sp, #7]
     99a:	4826      	ldr	r0, [pc, #152]	; (a34 <main+0x124>)
     99c:	f004 fcd9 	bl	5352 <printk>
    }

    // Start initialization sequence
    // send_next_init_command();

    send_uart(AT_DEFAULT "\r\n");
     9a0:	4825      	ldr	r0, [pc, #148]	; (a38 <main+0x128>)
     9a2:	f7ff fd17 	bl	3d4 <send_uart>
    set_send_cmd(CMD_AT_IDX);
     9a6:	2001      	movs	r0, #1
     9a8:	f7ff fdfe 	bl	5a8 <set_send_cmd>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
     9ac:	f04f 32ff 	mov.w	r2, #4294967295
     9b0:	f04f 33ff 	mov.w	r3, #4294967295
     9b4:	a902      	add	r1, sp, #8
     9b6:	4821      	ldr	r0, [pc, #132]	; (a3c <main+0x12c>)
     9b8:	f003 fc16 	bl	41e8 <z_impl_k_msgq_get>

#if USE_INTERRUPTS
    while(k_msgq_get(&uart_msgq, &recv_buf, K_FOREVER) == 0){
     9bc:	bb48      	cbnz	r0, a12 <main+0x102>
        // printk("Received: %s\n", recv_buf);
        if(recv_buf[0] == '\0'){
     9be:	f89d 3008 	ldrb.w	r3, [sp, #8]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d0f2      	beq.n	9ac <main+0x9c>
            continue;
        }
        parse_msg(recv_buf);
     9c6:	a802      	add	r0, sp, #8
     9c8:	f7ff fe46 	bl	658 <parse_msg>
     9cc:	e7ee      	b.n	9ac <main+0x9c>
        printk("UART device not found!");
     9ce:	481c      	ldr	r0, [pc, #112]	; (a40 <main+0x130>)
     9d0:	f004 fcbf 	bl	5352 <printk>
        return 0;
     9d4:	2000      	movs	r0, #0
     9d6:	e01d      	b.n	a14 <main+0x104>
        printk("Failed to configure UART\n");
     9d8:	481a      	ldr	r0, [pc, #104]	; (a44 <main+0x134>)
     9da:	f004 fcba 	bl	5352 <printk>
        return -1;
     9de:	f04f 30ff 	mov.w	r0, #4294967295
     9e2:	e017      	b.n	a14 <main+0x104>
		if (ret == -ENOTSUP) {
     9e4:	f111 0f86 	cmn.w	r1, #134	; 0x86
     9e8:	d007      	beq.n	9fa <main+0xea>
		} else if (ret == -ENOSYS) {
     9ea:	f111 0f58 	cmn.w	r1, #88	; 0x58
     9ee:	d008      	beq.n	a02 <main+0xf2>
			printk("Error setting UART callback: %d\n", ret);
     9f0:	4815      	ldr	r0, [pc, #84]	; (a48 <main+0x138>)
     9f2:	f004 fcae 	bl	5352 <printk>
		return 0;
     9f6:	2000      	movs	r0, #0
     9f8:	e00c      	b.n	a14 <main+0x104>
			printk("Interrupt-driven UART API support not enabled\n");
     9fa:	4814      	ldr	r0, [pc, #80]	; (a4c <main+0x13c>)
     9fc:	f004 fca9 	bl	5352 <printk>
     a00:	e7f9      	b.n	9f6 <main+0xe6>
			printk("UART device does not support interrupt-driven API\n");
     a02:	4813      	ldr	r0, [pc, #76]	; (a50 <main+0x140>)
     a04:	f004 fca5 	bl	5352 <printk>
     a08:	e7f5      	b.n	9f6 <main+0xe6>
        printk("Failed to get UART config: %d\n", err);
     a0a:	4812      	ldr	r0, [pc, #72]	; (a54 <main+0x144>)
     a0c:	f004 fca1 	bl	5352 <printk>
     a10:	e7c6      	b.n	9a0 <main+0x90>
        process_rx_data();
        k_sleep(K_MSEC(10));
    }
#endif

	return 0;
     a12:	2000      	movs	r0, #0
}
     a14:	b022      	add	sp, #136	; 0x88
     a16:	bd10      	pop	{r4, pc}
     a18:	0000731c 	.word	0x0000731c
     a1c:	00000515 	.word	0x00000515
     a20:	000079c4 	.word	0x000079c4
     a24:	000079dc 	.word	0x000079dc
     a28:	000079ec 	.word	0x000079ec
     a2c:	000079fc 	.word	0x000079fc
     a30:	00007a10 	.word	0x00007a10
     a34:	00007a24 	.word	0x00007a24
     a38:	00007728 	.word	0x00007728
     a3c:	200001e0 	.word	0x200001e0
     a40:	00007908 	.word	0x00007908
     a44:	00007920 	.word	0x00007920
     a48:	000079a0 	.word	0x000079a0
     a4c:	0000793c 	.word	0x0000793c
     a50:	0000796c 	.word	0x0000796c
     a54:	00007a38 	.word	0x00007a38

00000a58 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     a58:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     a5a:	4b02      	ldr	r3, [pc, #8]	; (a64 <char_out+0xc>)
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	4798      	blx	r3
}
     a60:	bd08      	pop	{r3, pc}
     a62:	bf00      	nop
     a64:	20000008 	.word	0x20000008

00000a68 <__printk_hook_install>:
	_char_out = fn;
     a68:	4b01      	ldr	r3, [pc, #4]	; (a70 <__printk_hook_install+0x8>)
     a6a:	6018      	str	r0, [r3, #0]
}
     a6c:	4770      	bx	lr
     a6e:	bf00      	nop
     a70:	20000008 	.word	0x20000008

00000a74 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     a74:	b500      	push	{lr}
     a76:	b083      	sub	sp, #12
     a78:	4602      	mov	r2, r0
     a7a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     a7c:	2100      	movs	r1, #0
     a7e:	9100      	str	r1, [sp, #0]
     a80:	4802      	ldr	r0, [pc, #8]	; (a8c <vprintk+0x18>)
     a82:	f000 f91d 	bl	cc0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     a86:	b003      	add	sp, #12
     a88:	f85d fb04 	ldr.w	pc, [sp], #4
     a8c:	00000a59 	.word	0x00000a59

00000a90 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     a94:	b083      	sub	sp, #12
     a96:	4604      	mov	r4, r0
     a98:	4608      	mov	r0, r1
     a9a:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     a9c:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     a9e:	f013 0f08 	tst.w	r3, #8
     aa2:	d105      	bne.n	ab0 <process_event+0x20>
     aa4:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     aa8:	2300      	movs	r3, #0
     aaa:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     aac:	9301      	str	r3, [sp, #4]
}
     aae:	e055      	b.n	b5c <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
     ab0:	2901      	cmp	r1, #1
     ab2:	d009      	beq.n	ac8 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     ab4:	f043 0320 	orr.w	r3, r3, #32
     ab8:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     aba:	f385 8811 	msr	BASEPRI, r5
     abe:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     ac2:	b003      	add	sp, #12
     ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     ac8:	f043 0310 	orr.w	r3, r3, #16
     acc:	8323      	strh	r3, [r4, #24]
     ace:	e7f4      	b.n	aba <process_event+0x2a>
			evt = process_recheck(mgr);
     ad0:	4620      	mov	r0, r4
     ad2:	f004 fcf5 	bl	54c0 <process_recheck>
     ad6:	e043      	b.n	b60 <process_event+0xd0>
			res = mgr->last_res;
     ad8:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     adc:	464a      	mov	r2, r9
     ade:	4669      	mov	r1, sp
     ae0:	4620      	mov	r0, r4
     ae2:	f004 fd06 	bl	54f2 <process_complete>
		onoff_transition_fn transit = NULL;
     ae6:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     aea:	8b23      	ldrh	r3, [r4, #24]
     aec:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     af0:	42b7      	cmp	r7, r6
     af2:	d069      	beq.n	bc8 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     af4:	68a2      	ldr	r2, [r4, #8]
     af6:	2a00      	cmp	r2, #0
     af8:	d066      	beq.n	bc8 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     afa:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     afc:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     b00:	8323      	strh	r3, [r4, #24]
     b02:	f385 8811 	msr	BASEPRI, r5
     b06:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     b0a:	2a00      	cmp	r2, #0
     b0c:	d164      	bne.n	bd8 <process_event+0x148>
     b0e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     b10:	b12b      	cbz	r3, b1e <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
     b12:	464b      	mov	r3, r9
     b14:	463a      	mov	r2, r7
     b16:	4669      	mov	r1, sp
     b18:	4620      	mov	r0, r4
     b1a:	f004 fd63 	bl	55e4 <notify_all>
			if (transit != NULL) {
     b1e:	f1b8 0f00 	cmp.w	r8, #0
     b22:	d002      	beq.n	b2a <process_event+0x9a>
				transit(mgr, transition_complete);
     b24:	4934      	ldr	r1, [pc, #208]	; (bf8 <process_event+0x168>)
     b26:	4620      	mov	r0, r4
     b28:	47c0      	blx	r8
	__asm__ volatile(
     b2a:	f04f 0320 	mov.w	r3, #32
     b2e:	f3ef 8511 	mrs	r5, BASEPRI
     b32:	f383 8812 	msr	BASEPRI_MAX, r3
     b36:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     b3a:	8b23      	ldrh	r3, [r4, #24]
     b3c:	f023 0308 	bic.w	r3, r3, #8
     b40:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     b42:	8b23      	ldrh	r3, [r4, #24]
     b44:	f013 0f10 	tst.w	r3, #16
     b48:	d04c      	beq.n	be4 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     b4a:	f023 0310 	bic.w	r3, r3, #16
     b4e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     b50:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     b52:	8b26      	ldrh	r6, [r4, #24]
     b54:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     b58:	2800      	cmp	r0, #0
     b5a:	d0ae      	beq.n	aba <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     b5c:	2802      	cmp	r0, #2
     b5e:	d0b7      	beq.n	ad0 <process_event+0x40>
		if (evt == EVT_NOP) {
     b60:	2800      	cmp	r0, #0
     b62:	d0aa      	beq.n	aba <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     b64:	3801      	subs	r0, #1
     b66:	2804      	cmp	r0, #4
     b68:	d82a      	bhi.n	bc0 <process_event+0x130>
     b6a:	a301      	add	r3, pc, #4	; (adr r3, b70 <process_event+0xe0>)
     b6c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     b70:	00000ad9 	.word	0x00000ad9
     b74:	00000bc1 	.word	0x00000bc1
     b78:	00000b85 	.word	0x00000b85
     b7c:	00000b99 	.word	0x00000b99
     b80:	00000bad 	.word	0x00000bad
			transit = mgr->transitions->start;
     b84:	6923      	ldr	r3, [r4, #16]
     b86:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     b8a:	2106      	movs	r1, #6
     b8c:	4620      	mov	r0, r4
     b8e:	f004 fc6d 	bl	546c <set_state>
		res = 0;
     b92:	f04f 0900 	mov.w	r9, #0
     b96:	e7a8      	b.n	aea <process_event+0x5a>
			transit = mgr->transitions->stop;
     b98:	6923      	ldr	r3, [r4, #16]
     b9a:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     b9e:	2104      	movs	r1, #4
     ba0:	4620      	mov	r0, r4
     ba2:	f004 fc63 	bl	546c <set_state>
		res = 0;
     ba6:	f04f 0900 	mov.w	r9, #0
     baa:	e79e      	b.n	aea <process_event+0x5a>
			transit = mgr->transitions->reset;
     bac:	6923      	ldr	r3, [r4, #16]
     bae:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     bb2:	2105      	movs	r1, #5
     bb4:	4620      	mov	r0, r4
     bb6:	f004 fc59 	bl	546c <set_state>
		res = 0;
     bba:	f04f 0900 	mov.w	r9, #0
     bbe:	e794      	b.n	aea <process_event+0x5a>
		if (evt == EVT_NOP) {
     bc0:	f04f 0800 	mov.w	r8, #0
     bc4:	46c1      	mov	r9, r8
     bc6:	e790      	b.n	aea <process_event+0x5a>
     bc8:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     bca:	b10a      	cbz	r2, bd0 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     bcc:	2200      	movs	r2, #0
     bce:	e795      	b.n	afc <process_event+0x6c>
		    || (transit != NULL)) {
     bd0:	f1b8 0f00 	cmp.w	r8, #0
     bd4:	d192      	bne.n	afc <process_event+0x6c>
     bd6:	e7b4      	b.n	b42 <process_event+0xb2>
				notify_monitors(mgr, state, res);
     bd8:	464a      	mov	r2, r9
     bda:	4639      	mov	r1, r7
     bdc:	4620      	mov	r0, r4
     bde:	f004 fc4d 	bl	547c <notify_monitors>
     be2:	e794      	b.n	b0e <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     be4:	f013 0f20 	tst.w	r3, #32
     be8:	d004      	beq.n	bf4 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     bea:	f023 0320 	bic.w	r3, r3, #32
     bee:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     bf0:	2002      	movs	r0, #2
     bf2:	e7ae      	b.n	b52 <process_event+0xc2>
		evt = EVT_NOP;
     bf4:	2000      	movs	r0, #0
     bf6:	e7ac      	b.n	b52 <process_event+0xc2>
     bf8:	00005613 	.word	0x00005613

00000bfc <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     bfc:	4684      	mov	ip, r0
     bfe:	4608      	mov	r0, r1
	bool loop = true;
     c00:	2201      	movs	r2, #1
     c02:	e026      	b.n	c52 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     c04:	f89c 3000 	ldrb.w	r3, [ip]
     c08:	f043 0304 	orr.w	r3, r3, #4
     c0c:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     c10:	b1f2      	cbz	r2, c50 <extract_flags+0x54>
			++sp;
     c12:	3001      	adds	r0, #1
     c14:	e01c      	b.n	c50 <extract_flags+0x54>
			conv->flag_plus = true;
     c16:	f89c 3000 	ldrb.w	r3, [ip]
     c1a:	f043 0308 	orr.w	r3, r3, #8
     c1e:	f88c 3000 	strb.w	r3, [ip]
			break;
     c22:	e7f5      	b.n	c10 <extract_flags+0x14>
			conv->flag_space = true;
     c24:	f89c 3000 	ldrb.w	r3, [ip]
     c28:	f043 0310 	orr.w	r3, r3, #16
     c2c:	f88c 3000 	strb.w	r3, [ip]
			break;
     c30:	e7ee      	b.n	c10 <extract_flags+0x14>
			conv->flag_hash = true;
     c32:	f89c 3000 	ldrb.w	r3, [ip]
     c36:	f043 0320 	orr.w	r3, r3, #32
     c3a:	f88c 3000 	strb.w	r3, [ip]
			break;
     c3e:	e7e7      	b.n	c10 <extract_flags+0x14>
			conv->flag_zero = true;
     c40:	f89c 3000 	ldrb.w	r3, [ip]
     c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c48:	f88c 3000 	strb.w	r3, [ip]
			break;
     c4c:	e7e0      	b.n	c10 <extract_flags+0x14>
		switch (*sp) {
     c4e:	2200      	movs	r2, #0
		}
	} while (loop);
     c50:	b342      	cbz	r2, ca4 <extract_flags+0xa8>
		switch (*sp) {
     c52:	7803      	ldrb	r3, [r0, #0]
     c54:	3b20      	subs	r3, #32
     c56:	2b10      	cmp	r3, #16
     c58:	d8f9      	bhi.n	c4e <extract_flags+0x52>
     c5a:	a101      	add	r1, pc, #4	; (adr r1, c60 <extract_flags+0x64>)
     c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     c60:	00000c25 	.word	0x00000c25
     c64:	00000c4f 	.word	0x00000c4f
     c68:	00000c4f 	.word	0x00000c4f
     c6c:	00000c33 	.word	0x00000c33
     c70:	00000c4f 	.word	0x00000c4f
     c74:	00000c4f 	.word	0x00000c4f
     c78:	00000c4f 	.word	0x00000c4f
     c7c:	00000c4f 	.word	0x00000c4f
     c80:	00000c4f 	.word	0x00000c4f
     c84:	00000c4f 	.word	0x00000c4f
     c88:	00000c4f 	.word	0x00000c4f
     c8c:	00000c17 	.word	0x00000c17
     c90:	00000c4f 	.word	0x00000c4f
     c94:	00000c05 	.word	0x00000c05
     c98:	00000c4f 	.word	0x00000c4f
     c9c:	00000c4f 	.word	0x00000c4f
     ca0:	00000c41 	.word	0x00000c41

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     ca4:	f89c 3000 	ldrb.w	r3, [ip]
     ca8:	f003 0344 	and.w	r3, r3, #68	; 0x44
     cac:	2b44      	cmp	r3, #68	; 0x44
     cae:	d000      	beq.n	cb2 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     cb0:	4770      	bx	lr
		conv->flag_zero = false;
     cb2:	f89c 3000 	ldrb.w	r3, [ip]
     cb6:	f36f 1386 	bfc	r3, #6, #1
     cba:	f88c 3000 	strb.w	r3, [ip]
     cbe:	e7f7      	b.n	cb0 <extract_flags+0xb4>

00000cc0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cc4:	b091      	sub	sp, #68	; 0x44
     cc6:	4606      	mov	r6, r0
     cc8:	460d      	mov	r5, r1
     cca:	4691      	mov	r9, r2
     ccc:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     cce:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     cd0:	f899 0000 	ldrb.w	r0, [r9]
     cd4:	2800      	cmp	r0, #0
     cd6:	f000 82b9 	beq.w	124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>
		if (*fp != '%') {
     cda:	2825      	cmp	r0, #37	; 0x25
     cdc:	d008      	beq.n	cf0 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     cde:	f109 0901 	add.w	r9, r9, #1
     ce2:	4629      	mov	r1, r5
     ce4:	47b0      	blx	r6
     ce6:	2800      	cmp	r0, #0
     ce8:	f2c0 82b1 	blt.w	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
     cec:	3401      	adds	r4, #1
			continue;
     cee:	e7ef      	b.n	cd0 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     cf0:	2300      	movs	r3, #0
     cf2:	9304      	str	r3, [sp, #16]
     cf4:	9305      	str	r3, [sp, #20]
     cf6:	9306      	str	r3, [sp, #24]
     cf8:	9307      	str	r3, [sp, #28]
     cfa:	9308      	str	r3, [sp, #32]
     cfc:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     cfe:	4649      	mov	r1, r9
     d00:	a806      	add	r0, sp, #24
     d02:	f004 fea2 	bl	5a4a <extract_conversion>
     d06:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     d08:	f89d 3019 	ldrb.w	r3, [sp, #25]
     d0c:	f013 0f01 	tst.w	r3, #1
     d10:	f000 8097 	beq.w	e42 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
     d14:	9b03      	ldr	r3, [sp, #12]
     d16:	1d1a      	adds	r2, r3, #4
     d18:	9203      	str	r2, [sp, #12]
     d1a:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     d1c:	2f00      	cmp	r7, #0
     d1e:	f2c0 8088 	blt.w	e32 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     d22:	f89d 3019 	ldrb.w	r3, [sp, #25]
     d26:	f013 0f04 	tst.w	r3, #4
     d2a:	f000 809c 	beq.w	e66 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
     d2e:	9b03      	ldr	r3, [sp, #12]
     d30:	1d1a      	adds	r2, r3, #4
     d32:	9203      	str	r2, [sp, #12]
     d34:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     d38:	f1ba 0f00 	cmp.w	sl, #0
     d3c:	f2c0 808a 	blt.w	e54 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     d40:	2300      	movs	r3, #0
     d42:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     d44:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     d46:	f89d 301a 	ldrb.w	r3, [sp, #26]
     d4a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     d4e:	f89d 1019 	ldrb.w	r1, [sp, #25]
     d52:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     d56:	2b01      	cmp	r3, #1
     d58:	f000 808e 	beq.w	e78 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     d5c:	2b02      	cmp	r3, #2
     d5e:	f000 80d3 	beq.w	f08 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     d62:	2b04      	cmp	r3, #4
     d64:	f000 8124 	beq.w	fb0 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     d68:	2b03      	cmp	r3, #3
     d6a:	f000 813b 	beq.w	fe4 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     d6e:	f89d 8018 	ldrb.w	r8, [sp, #24]
     d72:	f018 0b03 	ands.w	fp, r8, #3
     d76:	f040 813b 	bne.w	ff0 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     d7a:	f89d 301b 	ldrb.w	r3, [sp, #27]
     d7e:	3b25      	subs	r3, #37	; 0x25
     d80:	2b53      	cmp	r3, #83	; 0x53
     d82:	f200 81ca 	bhi.w	111a <CONFIG_FPROTECT_BLOCK_SIZE+0x11a>
     d86:	e8df f013 	tbh	[pc, r3, lsl #1]
     d8a:	0140      	.short	0x0140
     d8c:	01c801c8 	.word	0x01c801c8
     d90:	01c801c8 	.word	0x01c801c8
     d94:	01c801c8 	.word	0x01c801c8
     d98:	01c801c8 	.word	0x01c801c8
     d9c:	01c801c8 	.word	0x01c801c8
     da0:	01c801c8 	.word	0x01c801c8
     da4:	01c801c8 	.word	0x01c801c8
     da8:	01c801c8 	.word	0x01c801c8
     dac:	01c801c8 	.word	0x01c801c8
     db0:	01c801c8 	.word	0x01c801c8
     db4:	01c801c8 	.word	0x01c801c8
     db8:	01c801c8 	.word	0x01c801c8
     dbc:	01c801c8 	.word	0x01c801c8
     dc0:	01c801c8 	.word	0x01c801c8
     dc4:	01c801c8 	.word	0x01c801c8
     dc8:	01c801c8 	.word	0x01c801c8
     dcc:	01c801c8 	.word	0x01c801c8
     dd0:	01c801c8 	.word	0x01c801c8
     dd4:	01c801c8 	.word	0x01c801c8
     dd8:	01c801c8 	.word	0x01c801c8
     ddc:	01c801c8 	.word	0x01c801c8
     de0:	01c801c8 	.word	0x01c801c8
     de4:	01c801c8 	.word	0x01c801c8
     de8:	01c801c8 	.word	0x01c801c8
     dec:	01c801c8 	.word	0x01c801c8
     df0:	01c80181 	.word	0x01c80181
     df4:	01c801c8 	.word	0x01c801c8
     df8:	01c801c8 	.word	0x01c801c8
     dfc:	01c801c8 	.word	0x01c801c8
     e00:	01c801c8 	.word	0x01c801c8
     e04:	015e01c8 	.word	0x015e01c8
     e08:	01c80167 	.word	0x01c80167
     e0c:	01c801c8 	.word	0x01c801c8
     e10:	016701c8 	.word	0x016701c8
     e14:	01c801c8 	.word	0x01c801c8
     e18:	01c801c8 	.word	0x01c801c8
     e1c:	018101bd 	.word	0x018101bd
     e20:	01c801a1 	.word	0x01c801a1
     e24:	014d01c8 	.word	0x014d01c8
     e28:	018101c8 	.word	0x018101c8
     e2c:	01c801c8 	.word	0x01c801c8
     e30:	0181      	.short	0x0181
				conv->flag_dash = true;
     e32:	f89d 3018 	ldrb.w	r3, [sp, #24]
     e36:	f043 0304 	orr.w	r3, r3, #4
     e3a:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     e3e:	427f      	negs	r7, r7
     e40:	e76f      	b.n	d22 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
     e42:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     e46:	2b00      	cmp	r3, #0
     e48:	db02      	blt.n	e50 <z_cbvprintf_impl+0x190>
		int width = -1;
     e4a:	f04f 37ff 	mov.w	r7, #4294967295
     e4e:	e768      	b.n	d22 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
     e50:	9f07      	ldr	r7, [sp, #28]
     e52:	e766      	b.n	d22 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
     e54:	f89d 3019 	ldrb.w	r3, [sp, #25]
     e58:	f36f 0341 	bfc	r3, #1, #1
     e5c:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     e60:	f04f 3aff 	mov.w	sl, #4294967295
     e64:	e76c      	b.n	d40 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
     e66:	f013 0f02 	tst.w	r3, #2
     e6a:	d002      	beq.n	e72 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
     e6c:	f8dd a020 	ldr.w	sl, [sp, #32]
     e70:	e766      	b.n	d40 <z_cbvprintf_impl+0x80>
		int precision = -1;
     e72:	f04f 3aff 	mov.w	sl, #4294967295
     e76:	e763      	b.n	d40 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
     e78:	1ecb      	subs	r3, r1, #3
     e7a:	2b04      	cmp	r3, #4
     e7c:	d804      	bhi.n	e88 <z_cbvprintf_impl+0x1c8>
     e7e:	e8df f003 	tbb	[pc, r3]
     e82:	1d0b      	.short	0x1d0b
     e84:	3529      	.short	0x3529
     e86:	35          	.byte	0x35
     e87:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     e88:	9b03      	ldr	r3, [sp, #12]
     e8a:	1d1a      	adds	r2, r3, #4
     e8c:	9203      	str	r2, [sp, #12]
     e8e:	681b      	ldr	r3, [r3, #0]
     e90:	17da      	asrs	r2, r3, #31
     e92:	9304      	str	r3, [sp, #16]
     e94:	9205      	str	r2, [sp, #20]
				break;
     e96:	e006      	b.n	ea6 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
     e98:	9b03      	ldr	r3, [sp, #12]
     e9a:	1d1a      	adds	r2, r3, #4
     e9c:	9203      	str	r2, [sp, #12]
     e9e:	681b      	ldr	r3, [r3, #0]
     ea0:	17da      	asrs	r2, r3, #31
     ea2:	9304      	str	r3, [sp, #16]
     ea4:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     ea6:	2901      	cmp	r1, #1
     ea8:	d028      	beq.n	efc <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
     eaa:	2902      	cmp	r1, #2
     eac:	f47f af5f 	bne.w	d6e <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
     eb0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     eb4:	17da      	asrs	r2, r3, #31
     eb6:	9304      	str	r3, [sp, #16]
     eb8:	9205      	str	r2, [sp, #20]
     eba:	e758      	b.n	d6e <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
     ebc:	9b03      	ldr	r3, [sp, #12]
     ebe:	3307      	adds	r3, #7
     ec0:	f023 0307 	bic.w	r3, r3, #7
     ec4:	f103 0208 	add.w	r2, r3, #8
     ec8:	9203      	str	r2, [sp, #12]
     eca:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     ece:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     ed2:	e7e8      	b.n	ea6 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
     ed4:	9b03      	ldr	r3, [sp, #12]
     ed6:	3307      	adds	r3, #7
     ed8:	f023 0307 	bic.w	r3, r3, #7
     edc:	f103 0208 	add.w	r2, r3, #8
     ee0:	9203      	str	r2, [sp, #12]
     ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     ee6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     eea:	e7dc      	b.n	ea6 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     eec:	9b03      	ldr	r3, [sp, #12]
     eee:	1d1a      	adds	r2, r3, #4
     ef0:	9203      	str	r2, [sp, #12]
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	17da      	asrs	r2, r3, #31
				value->sint =
     ef6:	9304      	str	r3, [sp, #16]
     ef8:	9205      	str	r2, [sp, #20]
				break;
     efa:	e7d4      	b.n	ea6 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
     efc:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     f00:	17da      	asrs	r2, r3, #31
     f02:	9304      	str	r3, [sp, #16]
     f04:	9205      	str	r2, [sp, #20]
     f06:	e732      	b.n	d6e <z_cbvprintf_impl+0xae>
			switch (length_mod) {
     f08:	1ecb      	subs	r3, r1, #3
     f0a:	2b04      	cmp	r3, #4
     f0c:	d804      	bhi.n	f18 <z_cbvprintf_impl+0x258>
     f0e:	e8df f003 	tbb	[pc, r3]
     f12:	1f0b      	.short	0x1f0b
     f14:	4135      	.short	0x4135
     f16:	41          	.byte	0x41
     f17:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     f18:	9b03      	ldr	r3, [sp, #12]
     f1a:	1d1a      	adds	r2, r3, #4
     f1c:	9203      	str	r2, [sp, #12]
     f1e:	681b      	ldr	r3, [r3, #0]
     f20:	9304      	str	r3, [sp, #16]
     f22:	2300      	movs	r3, #0
     f24:	9305      	str	r3, [sp, #20]
				break;
     f26:	e01e      	b.n	f66 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
     f28:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     f2c:	2b63      	cmp	r3, #99	; 0x63
     f2e:	d007      	beq.n	f40 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
     f30:	9b03      	ldr	r3, [sp, #12]
     f32:	1d1a      	adds	r2, r3, #4
     f34:	9203      	str	r2, [sp, #12]
     f36:	681b      	ldr	r3, [r3, #0]
     f38:	9304      	str	r3, [sp, #16]
     f3a:	2300      	movs	r3, #0
     f3c:	9305      	str	r3, [sp, #20]
     f3e:	e012      	b.n	f66 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
     f40:	9b03      	ldr	r3, [sp, #12]
     f42:	1d1a      	adds	r2, r3, #4
     f44:	9203      	str	r2, [sp, #12]
     f46:	681b      	ldr	r3, [r3, #0]
     f48:	9304      	str	r3, [sp, #16]
     f4a:	2300      	movs	r3, #0
     f4c:	9305      	str	r3, [sp, #20]
     f4e:	e00a      	b.n	f66 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
     f50:	9b03      	ldr	r3, [sp, #12]
     f52:	3307      	adds	r3, #7
     f54:	f023 0307 	bic.w	r3, r3, #7
     f58:	f103 0208 	add.w	r2, r3, #8
     f5c:	9203      	str	r2, [sp, #12]
     f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     f62:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     f66:	2901      	cmp	r1, #1
     f68:	d01c      	beq.n	fa4 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
     f6a:	2902      	cmp	r1, #2
     f6c:	f47f aeff 	bne.w	d6e <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
     f70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     f74:	9304      	str	r3, [sp, #16]
     f76:	2300      	movs	r3, #0
     f78:	9305      	str	r3, [sp, #20]
     f7a:	e6f8      	b.n	d6e <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
     f7c:	9b03      	ldr	r3, [sp, #12]
     f7e:	3307      	adds	r3, #7
     f80:	f023 0307 	bic.w	r3, r3, #7
     f84:	f103 0208 	add.w	r2, r3, #8
     f88:	9203      	str	r2, [sp, #12]
     f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     f8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     f92:	e7e8      	b.n	f66 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
     f94:	9b03      	ldr	r3, [sp, #12]
     f96:	1d1a      	adds	r2, r3, #4
     f98:	9203      	str	r2, [sp, #12]
     f9a:	681b      	ldr	r3, [r3, #0]
				value->uint =
     f9c:	9304      	str	r3, [sp, #16]
     f9e:	2300      	movs	r3, #0
     fa0:	9305      	str	r3, [sp, #20]
				break;
     fa2:	e7e0      	b.n	f66 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
     fa4:	f89d 3010 	ldrb.w	r3, [sp, #16]
     fa8:	9304      	str	r3, [sp, #16]
     faa:	2300      	movs	r3, #0
     fac:	9305      	str	r3, [sp, #20]
     fae:	e6de      	b.n	d6e <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     fb0:	2908      	cmp	r1, #8
     fb2:	d00b      	beq.n	fcc <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
     fb4:	9b03      	ldr	r3, [sp, #12]
     fb6:	3307      	adds	r3, #7
     fb8:	f023 0307 	bic.w	r3, r3, #7
     fbc:	f103 0208 	add.w	r2, r3, #8
     fc0:	9203      	str	r2, [sp, #12]
     fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
     fc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
     fca:	e6d0      	b.n	d6e <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
     fcc:	9b03      	ldr	r3, [sp, #12]
     fce:	3307      	adds	r3, #7
     fd0:	f023 0307 	bic.w	r3, r3, #7
     fd4:	f103 0208 	add.w	r2, r3, #8
     fd8:	9203      	str	r2, [sp, #12]
     fda:	e9d3 2300 	ldrd	r2, r3, [r3]
     fde:	e9cd 2304 	strd	r2, r3, [sp, #16]
     fe2:	e6c4      	b.n	d6e <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
     fe4:	9b03      	ldr	r3, [sp, #12]
     fe6:	1d1a      	adds	r2, r3, #4
     fe8:	9203      	str	r2, [sp, #12]
     fea:	681b      	ldr	r3, [r3, #0]
     fec:	9304      	str	r3, [sp, #16]
     fee:	e6be      	b.n	d6e <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
     ff0:	9f02      	ldr	r7, [sp, #8]
     ff2:	463b      	mov	r3, r7
     ff4:	464a      	mov	r2, r9
     ff6:	4629      	mov	r1, r5
     ff8:	4630      	mov	r0, r6
     ffa:	f004 fdcc 	bl	5b96 <outs>
     ffe:	2800      	cmp	r0, #0
    1000:	f2c0 8125 	blt.w	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    1004:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1006:	46b9      	mov	r9, r7
			continue;
    1008:	e662      	b.n	cd0 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    100a:	4629      	mov	r1, r5
    100c:	2025      	movs	r0, #37	; 0x25
    100e:	47b0      	blx	r6
    1010:	2800      	cmp	r0, #0
    1012:	f2c0 811c 	blt.w	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    1016:	3401      	adds	r4, #1
		char sign = 0;
    1018:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    101a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    101e:	f04f 0900 	mov.w	r9, #0
			break;
    1022:	e07f      	b.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
		case 's': {
			bps = (const char *)value->ptr;
    1024:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    1028:	f1ba 0f00 	cmp.w	sl, #0
    102c:	db07      	blt.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
				len = strnlen(bps, precision);
    102e:	4651      	mov	r1, sl
    1030:	4648      	mov	r0, r9
    1032:	f004 ff3a 	bl	5eaa <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    1036:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    103a:	46d8      	mov	r8, fp
			precision = -1;

			break;
    103c:	e072      	b.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
				len = strlen(bps);
    103e:	4648      	mov	r0, r9
    1040:	f004 ff2a 	bl	5e98 <strlen>
    1044:	e7f7      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1046:	9b04      	ldr	r3, [sp, #16]
    1048:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    104c:	46d8      	mov	r8, fp
			bpe = buf + 1;
    104e:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    1052:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    1056:	e065      	b.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1058:	f018 0f08 	tst.w	r8, #8
    105c:	d105      	bne.n	106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
				sign = '+';
			} else if (conv->flag_space) {
    105e:	f018 0810 	ands.w	r8, r8, #16
    1062:	d004      	beq.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
				sign = ' ';
    1064:	f04f 0820 	mov.w	r8, #32
    1068:	e001      	b.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
				sign = '+';
    106a:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    106e:	9a04      	ldr	r2, [sp, #16]
    1070:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    1072:	2b00      	cmp	r3, #0
    1074:	db02      	blt.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    1076:	9204      	str	r2, [sp, #16]
    1078:	9305      	str	r3, [sp, #20]
    107a:	e008      	b.n	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
				value->uint = (uint_value_type)-sint;
    107c:	4252      	negs	r2, r2
    107e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1082:	9204      	str	r2, [sp, #16]
    1084:	9305      	str	r3, [sp, #20]
				sign = '-';
    1086:	f04f 082d 	mov.w	r8, #45	; 0x2d
    108a:	e000      	b.n	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
		switch (conv->specifier) {
    108c:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    108e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1092:	9300      	str	r3, [sp, #0]
    1094:	ab0a      	add	r3, sp, #40	; 0x28
    1096:	aa06      	add	r2, sp, #24
    1098:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    109c:	f004 fd0c 	bl	5ab8 <encode_uint>
    10a0:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    10a2:	f1ba 0f00 	cmp.w	sl, #0
    10a6:	db6c      	blt.n	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
				size_t len = bpe - bps;
    10a8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    10ac:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    10b0:	f89d 2018 	ldrb.w	r2, [sp, #24]
    10b4:	f36f 1286 	bfc	r2, #6, #1
    10b8:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    10bc:	459a      	cmp	sl, r3
    10be:	d963      	bls.n	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
					conv->pad0_value = precision - (int)len;
    10c0:	ebaa 0303 	sub.w	r3, sl, r3
    10c4:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    10c6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    10ca:	e02b      	b.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    10cc:	9804      	ldr	r0, [sp, #16]
    10ce:	b928      	cbnz	r0, 10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>
		char sign = 0;
    10d0:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    10d2:	f8df a180 	ldr.w	sl, [pc, #384]	; 1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
			bps = "(nil)";
    10d6:	f1aa 0905 	sub.w	r9, sl, #5
    10da:	e023      	b.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10dc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    10e0:	9300      	str	r3, [sp, #0]
    10e2:	ab0a      	add	r3, sp, #40	; 0x28
    10e4:	aa06      	add	r2, sp, #24
    10e6:	2100      	movs	r1, #0
    10e8:	f004 fce6 	bl	5ab8 <encode_uint>
    10ec:	4681      	mov	r9, r0
				conv->altform_0c = true;
    10ee:	f89d 301a 	ldrb.w	r3, [sp, #26]
    10f2:	f043 0310 	orr.w	r3, r3, #16
    10f6:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    10fa:	2378      	movs	r3, #120	; 0x78
    10fc:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    1100:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    1102:	e7ce      	b.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1104:	4622      	mov	r2, r4
    1106:	9904      	ldr	r1, [sp, #16]
    1108:	a806      	add	r0, sp, #24
    110a:	f004 fd25 	bl	5b58 <store_count>
		char sign = 0;
    110e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1110:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1114:	f04f 0900 	mov.w	r9, #0
			}

			break;
    1118:	e004      	b.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
		switch (conv->specifier) {
    111a:	46d8      	mov	r8, fp
    111c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1120:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1124:	f1b9 0f00 	cmp.w	r9, #0
    1128:	f000 808d 	beq.w	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    112c:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    1130:	f1b8 0f00 	cmp.w	r8, #0
    1134:	d000      	beq.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
			nj_len += 1U;
    1136:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    1138:	f89d 201a 	ldrb.w	r2, [sp, #26]
    113c:	f012 0f10 	tst.w	r2, #16
    1140:	d025      	beq.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
			nj_len += 2U;
    1142:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1144:	9907      	ldr	r1, [sp, #28]
    1146:	440b      	add	r3, r1
		if (conv->pad_fp) {
    1148:	f012 0f40 	tst.w	r2, #64	; 0x40
    114c:	d001      	beq.n	1152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
			nj_len += conv->pad0_pre_exp;
    114e:	9a08      	ldr	r2, [sp, #32]
    1150:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1152:	2f00      	cmp	r7, #0
    1154:	dd31      	ble.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
			width -= (int)nj_len;
    1156:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    1158:	f89d 3018 	ldrb.w	r3, [sp, #24]
    115c:	f013 0f04 	tst.w	r3, #4
    1160:	d12b      	bne.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1162:	f013 0f40 	tst.w	r3, #64	; 0x40
    1166:	d017      	beq.n	1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>
					if (sign != 0) {
    1168:	f1b8 0f00 	cmp.w	r8, #0
    116c:	d017      	beq.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
						OUTC(sign);
    116e:	4629      	mov	r1, r5
    1170:	4640      	mov	r0, r8
    1172:	47b0      	blx	r6
    1174:	2800      	cmp	r0, #0
    1176:	db6a      	blt.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    1178:	3401      	adds	r4, #1
						sign = 0;
    117a:	46d8      	mov	r8, fp
					}
					pad = '0';
    117c:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1180:	e00f      	b.n	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
		const char *bpe = buf + sizeof(buf);
    1182:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1186:	e7cd      	b.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    1188:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    118c:	e7ca      	b.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
		} else if (conv->altform_0) {
    118e:	f012 0f08 	tst.w	r2, #8
    1192:	d0d7      	beq.n	1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
			nj_len += 1U;
    1194:	3301      	adds	r3, #1
    1196:	e7d5      	b.n	1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
				char pad = ' ';
    1198:	f04f 0b20 	mov.w	fp, #32
    119c:	e001      	b.n	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
					pad = '0';
    119e:	f04f 0b30 	mov.w	fp, #48	; 0x30
    11a2:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    11a4:	1e5f      	subs	r7, r3, #1
    11a6:	2b00      	cmp	r3, #0
    11a8:	dd07      	ble.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
					OUTC(pad);
    11aa:	4629      	mov	r1, r5
    11ac:	4658      	mov	r0, fp
    11ae:	47b0      	blx	r6
    11b0:	2800      	cmp	r0, #0
    11b2:	db4c      	blt.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    11b4:	3401      	adds	r4, #1
				while (width-- > 0) {
    11b6:	463b      	mov	r3, r7
    11b8:	e7f4      	b.n	11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    11ba:	f1b8 0f00 	cmp.w	r8, #0
    11be:	d005      	beq.n	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
			OUTC(sign);
    11c0:	4629      	mov	r1, r5
    11c2:	4640      	mov	r0, r8
    11c4:	47b0      	blx	r6
    11c6:	2800      	cmp	r0, #0
    11c8:	db41      	blt.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    11ca:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    11cc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    11d0:	f3c3 1200 	ubfx	r2, r3, #4, #1
    11d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    11d8:	431a      	orrs	r2, r3
    11da:	d005      	beq.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
				OUTC('0');
    11dc:	4629      	mov	r1, r5
    11de:	2030      	movs	r0, #48	; 0x30
    11e0:	47b0      	blx	r6
    11e2:	2800      	cmp	r0, #0
    11e4:	db33      	blt.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    11e6:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    11e8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    11ec:	f013 0f10 	tst.w	r3, #16
    11f0:	d006      	beq.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
				OUTC(conv->specifier);
    11f2:	4629      	mov	r1, r5
    11f4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    11f8:	47b0      	blx	r6
    11fa:	2800      	cmp	r0, #0
    11fc:	db27      	blt.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    11fe:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1200:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    1202:	f103 38ff 	add.w	r8, r3, #4294967295
    1206:	2b00      	cmp	r3, #0
    1208:	dd07      	ble.n	121a <CONFIG_FPROTECT_BLOCK_SIZE+0x21a>
				OUTC('0');
    120a:	4629      	mov	r1, r5
    120c:	2030      	movs	r0, #48	; 0x30
    120e:	47b0      	blx	r6
    1210:	2800      	cmp	r0, #0
    1212:	db1c      	blt.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    1214:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1216:	4643      	mov	r3, r8
    1218:	e7f3      	b.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
			}

			OUTS(bps, bpe);
    121a:	4653      	mov	r3, sl
    121c:	464a      	mov	r2, r9
    121e:	4629      	mov	r1, r5
    1220:	4630      	mov	r0, r6
    1222:	f004 fcb8 	bl	5b96 <outs>
    1226:	2800      	cmp	r0, #0
    1228:	db11      	blt.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    122a:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    122c:	2f00      	cmp	r7, #0
    122e:	dd07      	ble.n	1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>
			OUTC(' ');
    1230:	4629      	mov	r1, r5
    1232:	2020      	movs	r0, #32
    1234:	47b0      	blx	r6
    1236:	2800      	cmp	r0, #0
    1238:	db09      	blt.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    123a:	3401      	adds	r4, #1
			--width;
    123c:	3f01      	subs	r7, #1
    123e:	e7f5      	b.n	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
		fp = extract_conversion(conv, sp);
    1240:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1244:	e544      	b.n	cd0 <z_cbvprintf_impl+0x10>
    1246:	f8dd 9008 	ldr.w	r9, [sp, #8]
    124a:	e541      	b.n	cd0 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    124c:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    124e:	b011      	add	sp, #68	; 0x44
    1250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1254:	00007a71 	.word	0x00007a71

00001258 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1258:	b508      	push	{r3, lr}
    125a:	4604      	mov	r4, r0
    125c:	f04f 0220 	mov.w	r2, #32
    1260:	f3ef 8311 	mrs	r3, BASEPRI
    1264:	f382 8812 	msr	BASEPRI_MAX, r2
    1268:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    126c:	f001 fe82 	bl	2f74 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    1270:	4620      	mov	r0, r4
    1272:	f004 feaf 	bl	5fd4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1276:	4803      	ldr	r0, [pc, #12]	; (1284 <sys_reboot+0x2c>)
    1278:	f004 f86b 	bl	5352 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    127c:	f000 fa54 	bl	1728 <arch_cpu_idle>
    1280:	e7fc      	b.n	127c <sys_reboot+0x24>
    1282:	bf00      	nop
    1284:	00007a74 	.word	0x00007a74

00001288 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1288:	f001 beac 	b.w	2fe4 <SystemInit>

0000128c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    128c:	b570      	push	{r4, r5, r6, lr}
    128e:	4605      	mov	r5, r0
    1290:	f04f 0320 	mov.w	r3, #32
    1294:	f3ef 8611 	mrs	r6, BASEPRI
    1298:	f383 8812 	msr	BASEPRI_MAX, r3
    129c:	f3bf 8f6f 	isb	sy
    12a0:	4b0e      	ldr	r3, [pc, #56]	; (12dc <pm_state_notify+0x50>)
    12a2:	681c      	ldr	r4, [r3, #0]
    12a4:	e00d      	b.n	12c2 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    12a6:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    12a8:	b13a      	cbz	r2, 12ba <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    12aa:	4b0d      	ldr	r3, [pc, #52]	; (12e0 <pm_state_notify+0x54>)
    12ac:	7c1b      	ldrb	r3, [r3, #16]
    12ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    12b2:	490c      	ldr	r1, [pc, #48]	; (12e4 <pm_state_notify+0x58>)
    12b4:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    12b8:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    12ba:	4623      	mov	r3, r4
	return node->next;
    12bc:	6824      	ldr	r4, [r4, #0]
    12be:	b104      	cbz	r4, 12c2 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    12c0:	b123      	cbz	r3, 12cc <pm_state_notify+0x40>
    12c2:	b12c      	cbz	r4, 12d0 <pm_state_notify+0x44>
		if (entering_state) {
    12c4:	2d00      	cmp	r5, #0
    12c6:	d0ee      	beq.n	12a6 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    12c8:	6862      	ldr	r2, [r4, #4]
    12ca:	e7ed      	b.n	12a8 <pm_state_notify+0x1c>
    12cc:	461c      	mov	r4, r3
    12ce:	e7f8      	b.n	12c2 <pm_state_notify+0x36>
	__asm__ volatile(
    12d0:	f386 8811 	msr	BASEPRI, r6
    12d4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    12d8:	bd70      	pop	{r4, r5, r6, pc}
    12da:	bf00      	nop
    12dc:	20001004 	.word	0x20001004
    12e0:	20001ac4 	.word	0x20001ac4
    12e4:	20000ff8 	.word	0x20000ff8

000012e8 <pm_exit_pos_ops>:
{
    12e8:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    12ea:	4b06      	ldr	r3, [pc, #24]	; (1304 <pm_exit_pos_ops+0x1c>)
    12ec:	b123      	cbz	r3, 12f8 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    12ee:	7841      	ldrb	r1, [r0, #1]
    12f0:	7800      	ldrb	r0, [r0, #0]
    12f2:	f004 fe86 	bl	6002 <pm_state_exit_post_ops>
}
    12f6:	bd08      	pop	{r3, pc}
    12f8:	2300      	movs	r3, #0
    12fa:	f383 8811 	msr	BASEPRI, r3
    12fe:	f3bf 8f6f 	isb	sy
    1302:	e7f8      	b.n	12f6 <pm_exit_pos_ops+0xe>
    1304:	00006003 	.word	0x00006003

00001308 <pm_system_resume>:

void pm_system_resume(void)
{
    1308:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    130a:	4b0e      	ldr	r3, [pc, #56]	; (1344 <pm_system_resume+0x3c>)
    130c:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    130e:	4621      	mov	r1, r4
    1310:	480d      	ldr	r0, [pc, #52]	; (1348 <pm_system_resume+0x40>)
    1312:	f004 fc5b 	bl	5bcc <atomic_test_and_clear_bit>
    1316:	b900      	cbnz	r0, 131a <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    1318:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    131a:	0065      	lsls	r5, r4, #1
    131c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    1320:	4e0a      	ldr	r6, [pc, #40]	; (134c <pm_system_resume+0x44>)
    1322:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1326:	f7ff ffdf 	bl	12e8 <pm_exit_pos_ops>
		pm_state_notify(false);
    132a:	2000      	movs	r0, #0
    132c:	f7ff ffae 	bl	128c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1330:	192b      	adds	r3, r5, r4
    1332:	0099      	lsls	r1, r3, #2
    1334:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    1338:	2200      	movs	r2, #0
    133a:	5072      	str	r2, [r6, r1]
    133c:	605a      	str	r2, [r3, #4]
    133e:	609a      	str	r2, [r3, #8]
}
    1340:	e7ea      	b.n	1318 <pm_system_resume+0x10>
    1342:	bf00      	nop
    1344:	20001ac4 	.word	0x20001ac4
    1348:	2000100c 	.word	0x2000100c
    134c:	20000ff8 	.word	0x20000ff8

00001350 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    1350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1352:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    1354:	4b38      	ldr	r3, [pc, #224]	; (1438 <pm_system_suspend+0xe8>)
    1356:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
    1358:	f04f 0320 	mov.w	r3, #32
    135c:	f3ef 8611 	mrs	r6, BASEPRI
    1360:	f383 8812 	msr	BASEPRI_MAX, r3
    1364:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    1368:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    136c:	4b33      	ldr	r3, [pc, #204]	; (143c <pm_system_suspend+0xec>)
    136e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    1372:	2b00      	cmp	r3, #0
    1374:	d039      	beq.n	13ea <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    1376:	4b32      	ldr	r3, [pc, #200]	; (1440 <pm_system_suspend+0xf0>)
    1378:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    137c:	4f2f      	ldr	r7, [pc, #188]	; (143c <pm_system_suspend+0xec>)
    137e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    1382:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    1386:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    138a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    138e:	2300      	movs	r3, #0
    1390:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    1394:	f386 8811 	msr	BASEPRI, r6
    1398:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    139c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    13a0:	4a27      	ldr	r2, [pc, #156]	; (1440 <pm_system_suspend+0xf0>)
    13a2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d044      	beq.n	1434 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    13aa:	f1b5 3fff 	cmp.w	r5, #4294967295
    13ae:	d12b      	bne.n	1408 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    13b0:	f003 f90e 	bl	45d0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    13b4:	2001      	movs	r0, #1
    13b6:	f7ff ff69 	bl	128c <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    13ba:	4621      	mov	r1, r4
    13bc:	4821      	ldr	r0, [pc, #132]	; (1444 <pm_system_suspend+0xf4>)
    13be:	f004 fc21 	bl	5c04 <atomic_set_bit>
	if (pm_state_set != NULL) {
    13c2:	4b21      	ldr	r3, [pc, #132]	; (1448 <pm_system_suspend+0xf8>)
    13c4:	b15b      	cbz	r3, 13de <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    13c6:	4a1e      	ldr	r2, [pc, #120]	; (1440 <pm_system_suspend+0xf0>)
    13c8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    13cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    13d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    13d4:	7859      	ldrb	r1, [r3, #1]
    13d6:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    13da:	f004 fe0a 	bl	5ff2 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    13de:	f7ff ff93 	bl	1308 <pm_system_resume>
	k_sched_unlock();
    13e2:	f003 fae1 	bl	49a8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    13e6:	2001      	movs	r0, #1
}
    13e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    13ea:	4601      	mov	r1, r0
    13ec:	4620      	mov	r0, r4
    13ee:	f000 f831 	bl	1454 <pm_policy_next_state>
		if (info != NULL) {
    13f2:	2800      	cmp	r0, #0
    13f4:	d0ce      	beq.n	1394 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    13f6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    13fa:	4b11      	ldr	r3, [pc, #68]	; (1440 <pm_system_suspend+0xf0>)
    13fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1400:	c807      	ldmia	r0, {r0, r1, r2}
    1402:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    1406:	e7c5      	b.n	1394 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    1408:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    140c:	4b0c      	ldr	r3, [pc, #48]	; (1440 <pm_system_suspend+0xf0>)
    140e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1412:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1414:	0c41      	lsrs	r1, r0, #17
    1416:	03c0      	lsls	r0, r0, #15
    1418:	4b0c      	ldr	r3, [pc, #48]	; (144c <pm_system_suspend+0xfc>)
    141a:	18c0      	adds	r0, r0, r3
    141c:	4a0c      	ldr	r2, [pc, #48]	; (1450 <pm_system_suspend+0x100>)
    141e:	f04f 0300 	mov.w	r3, #0
    1422:	f141 0100 	adc.w	r1, r1, #0
    1426:	f7fe fe6b 	bl	100 <__aeabi_uldivmod>
		sys_clock_set_timeout(ticks -
    142a:	2101      	movs	r1, #1
    142c:	1a28      	subs	r0, r5, r0
    142e:	f001 fd5b 	bl	2ee8 <sys_clock_set_timeout>
    1432:	e7bd      	b.n	13b0 <pm_system_suspend+0x60>
		return false;
    1434:	2000      	movs	r0, #0
    1436:	e7d7      	b.n	13e8 <pm_system_suspend+0x98>
    1438:	20001ac4 	.word	0x20001ac4
    143c:	20000fec 	.word	0x20000fec
    1440:	20000ff8 	.word	0x20000ff8
    1444:	2000100c 	.word	0x2000100c
    1448:	00005ff3 	.word	0x00005ff3
    144c:	000f423f 	.word	0x000f423f
    1450:	000f4240 	.word	0x000f4240

00001454 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1458:	b082      	sub	sp, #8
    145a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    145c:	a901      	add	r1, sp, #4
    145e:	f000 f845 	bl	14ec <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1462:	1e44      	subs	r4, r0, #1
    1464:	b224      	sxth	r4, r4
    1466:	e007      	b.n	1478 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    1468:	f1b6 3fff 	cmp.w	r6, #4294967295
    146c:	d033      	beq.n	14d6 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    146e:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    1470:	45b0      	cmp	r8, r6
    1472:	d930      	bls.n	14d6 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1474:	3c01      	subs	r4, #1
    1476:	b224      	sxth	r4, r4
    1478:	2c00      	cmp	r4, #0
    147a:	db2b      	blt.n	14d4 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    147c:	9b01      	ldr	r3, [sp, #4]
    147e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1482:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    1486:	7869      	ldrb	r1, [r5, #1]
    1488:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    148c:	f004 fbcd 	bl	5c2a <pm_policy_state_lock_is_active>
    1490:	2800      	cmp	r0, #0
    1492:	d1ef      	bne.n	1474 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    1494:	6868      	ldr	r0, [r5, #4]
    1496:	0c41      	lsrs	r1, r0, #17
    1498:	03c0      	lsls	r0, r0, #15
    149a:	4f11      	ldr	r7, [pc, #68]	; (14e0 <pm_policy_next_state+0x8c>)
    149c:	19c0      	adds	r0, r0, r7
    149e:	4a11      	ldr	r2, [pc, #68]	; (14e4 <pm_policy_next_state+0x90>)
    14a0:	f04f 0300 	mov.w	r3, #0
    14a4:	f141 0100 	adc.w	r1, r1, #0
    14a8:	f7fe fe2a 	bl	100 <__aeabi_uldivmod>
    14ac:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    14ae:	68ab      	ldr	r3, [r5, #8]
    14b0:	0c59      	lsrs	r1, r3, #17
    14b2:	03db      	lsls	r3, r3, #15
    14b4:	19d8      	adds	r0, r3, r7
    14b6:	4a0b      	ldr	r2, [pc, #44]	; (14e4 <pm_policy_next_state+0x90>)
    14b8:	f04f 0300 	mov.w	r3, #0
    14bc:	f141 0100 	adc.w	r1, r1, #0
    14c0:	f7fe fe1e 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    14c4:	4b08      	ldr	r3, [pc, #32]	; (14e8 <pm_policy_next_state+0x94>)
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	f1b3 3fff 	cmp.w	r3, #4294967295
    14cc:	d0cc      	beq.n	1468 <pm_policy_next_state+0x14>
    14ce:	4283      	cmp	r3, r0
    14d0:	d8ca      	bhi.n	1468 <pm_policy_next_state+0x14>
    14d2:	e7cf      	b.n	1474 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    14d4:	2500      	movs	r5, #0
}
    14d6:	4628      	mov	r0, r5
    14d8:	b002      	add	sp, #8
    14da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14de:	bf00      	nop
    14e0:	000f423f 	.word	0x000f423f
    14e4:	000f4240 	.word	0x000f4240
    14e8:	2000000c 	.word	0x2000000c

000014ec <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    14ec:	b908      	cbnz	r0, 14f2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    14ee:	4b02      	ldr	r3, [pc, #8]	; (14f8 <pm_state_cpu_get_all+0xc>)
    14f0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    14f2:	2000      	movs	r0, #0
    14f4:	4770      	bx	lr
    14f6:	bf00      	nop
    14f8:	00007aa4 	.word	0x00007aa4

000014fc <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    14fc:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    14fe:	4802      	ldr	r0, [pc, #8]	; (1508 <nrf_cc3xx_platform_abort_init+0xc>)
    1500:	f003 fd48 	bl	4f94 <nrf_cc3xx_platform_set_abort>
}
    1504:	bd08      	pop	{r3, pc}
    1506:	bf00      	nop
    1508:	00007aa4 	.word	0x00007aa4

0000150c <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
    150c:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    1510:	d017      	beq.n	1542 <mutex_flags_unknown+0x36>
    1512:	d80c      	bhi.n	152e <mutex_flags_unknown+0x22>
    1514:	f640 63ba 	movw	r3, #3770	; 0xeba
    1518:	4298      	cmp	r0, r3
    151a:	d014      	beq.n	1546 <mutex_flags_unknown+0x3a>
    151c:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    1520:	d013      	beq.n	154a <mutex_flags_unknown+0x3e>
    1522:	283a      	cmp	r0, #58	; 0x3a
    1524:	d001      	beq.n	152a <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
    1526:	2001      	movs	r0, #1
    1528:	4770      	bx	lr
    switch(flags){
    152a:	2000      	movs	r0, #0
    152c:	4770      	bx	lr
    152e:	4b09      	ldr	r3, [pc, #36]	; (1554 <mutex_flags_unknown+0x48>)
    1530:	4298      	cmp	r0, r3
    1532:	d00c      	beq.n	154e <mutex_flags_unknown+0x42>
    1534:	4b08      	ldr	r3, [pc, #32]	; (1558 <mutex_flags_unknown+0x4c>)
    1536:	4298      	cmp	r0, r3
    1538:	d001      	beq.n	153e <mutex_flags_unknown+0x32>
            return true;
    153a:	2001      	movs	r0, #1
    }
}
    153c:	4770      	bx	lr
    switch(flags){
    153e:	2000      	movs	r0, #0
    1540:	4770      	bx	lr
    1542:	2000      	movs	r0, #0
    1544:	4770      	bx	lr
    1546:	2000      	movs	r0, #0
    1548:	4770      	bx	lr
    154a:	2000      	movs	r0, #0
    154c:	4770      	bx	lr
    154e:	2000      	movs	r0, #0
    1550:	4770      	bx	lr
    1552:	bf00      	nop
    1554:	3a00003a 	.word	0x3a00003a
    1558:	a95c5f2c 	.word	0xa95c5f2c

0000155c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    155c:	b1e8      	cbz	r0, 159a <mutex_unlock_platform+0x3e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    155e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1560:	6842      	ldr	r2, [r0, #4]
    1562:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
    1566:	d007      	beq.n	1578 <mutex_unlock_platform+0x1c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1568:	490f      	ldr	r1, [pc, #60]	; (15a8 <mutex_unlock_platform+0x4c>)
    156a:	428a      	cmp	r2, r1
    156c:	d01a      	beq.n	15a4 <mutex_unlock_platform+0x48>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    156e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1570:	f002 ff20 	bl	43b4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1574:	2000      	movs	r0, #0
    }
}
    1576:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    1578:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    157a:	2200      	movs	r2, #0
    157c:	f3bf 8f5b 	dmb	ish
    1580:	e853 1f00 	ldrex	r1, [r3]
    1584:	2901      	cmp	r1, #1
    1586:	d103      	bne.n	1590 <mutex_unlock_platform+0x34>
    1588:	e843 2000 	strex	r0, r2, [r3]
    158c:	2800      	cmp	r0, #0
    158e:	d1f7      	bne.n	1580 <mutex_unlock_platform+0x24>
    1590:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1594:	d104      	bne.n	15a0 <mutex_unlock_platform+0x44>
    1596:	4610      	mov	r0, r2
    1598:	e7ed      	b.n	1576 <mutex_unlock_platform+0x1a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    159a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    159e:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    15a0:	4802      	ldr	r0, [pc, #8]	; (15ac <mutex_unlock_platform+0x50>)
    15a2:	e7e8      	b.n	1576 <mutex_unlock_platform+0x1a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    15a4:	4802      	ldr	r0, [pc, #8]	; (15b0 <mutex_unlock_platform+0x54>)
    15a6:	e7e6      	b.n	1576 <mutex_unlock_platform+0x1a>
    15a8:	a95c5f2c 	.word	0xa95c5f2c
    15ac:	ffff8fe9 	.word	0xffff8fe9
    15b0:	ffff8fea 	.word	0xffff8fea

000015b4 <mutex_lock_platform>:
    if(mutex == NULL) {
    15b4:	b330      	cbz	r0, 1604 <mutex_lock_platform+0x50>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    15b6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    15b8:	6842      	ldr	r2, [r0, #4]
    15ba:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
    15be:	d00c      	beq.n	15da <mutex_lock_platform+0x26>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    15c0:	4912      	ldr	r1, [pc, #72]	; (160c <mutex_lock_platform+0x58>)
    15c2:	428a      	cmp	r2, r1
    15c4:	d01c      	beq.n	1600 <mutex_lock_platform+0x4c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    15c6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    15c8:	f04f 32ff 	mov.w	r2, #4294967295
    15cc:	f04f 33ff 	mov.w	r3, #4294967295
    15d0:	f002 fe6c 	bl	42ac <z_impl_k_mutex_lock>
        if (ret == 0) {
    15d4:	b188      	cbz	r0, 15fa <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    15d6:	480e      	ldr	r0, [pc, #56]	; (1610 <mutex_lock_platform+0x5c>)
    15d8:	e00f      	b.n	15fa <mutex_lock_platform+0x46>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    15da:	6803      	ldr	r3, [r0, #0]
    15dc:	2201      	movs	r2, #1
    15de:	f3bf 8f5b 	dmb	ish
    15e2:	e853 1f00 	ldrex	r1, [r3]
    15e6:	2900      	cmp	r1, #0
    15e8:	d103      	bne.n	15f2 <mutex_lock_platform+0x3e>
    15ea:	e843 2000 	strex	r0, r2, [r3]
    15ee:	2800      	cmp	r0, #0
    15f0:	d1f7      	bne.n	15e2 <mutex_lock_platform+0x2e>
    15f2:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    15f6:	d101      	bne.n	15fc <mutex_lock_platform+0x48>
    15f8:	2000      	movs	r0, #0
}
    15fa:	bd08      	pop	{r3, pc}
                       NRF_CC3XX_PLATFORM_SUCCESS :
    15fc:	4804      	ldr	r0, [pc, #16]	; (1610 <mutex_lock_platform+0x5c>)
    15fe:	e7fc      	b.n	15fa <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1600:	4804      	ldr	r0, [pc, #16]	; (1614 <mutex_lock_platform+0x60>)
    1602:	e7fa      	b.n	15fa <mutex_lock_platform+0x46>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1604:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1608:	4770      	bx	lr
    160a:	bf00      	nop
    160c:	a95c5f2c 	.word	0xa95c5f2c
    1610:	ffff8fe9 	.word	0xffff8fe9
    1614:	ffff8fea 	.word	0xffff8fea

00001618 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1618:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    161a:	4604      	mov	r4, r0
    161c:	b1a8      	cbz	r0, 164a <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    161e:	6863      	ldr	r3, [r4, #4]
    1620:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1624:	d010      	beq.n	1648 <mutex_free_platform+0x30>
    1626:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    162a:	d00d      	beq.n	1648 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    162c:	4a0c      	ldr	r2, [pc, #48]	; (1660 <mutex_free_platform+0x48>)
    162e:	4293      	cmp	r3, r2
    1630:	d00a      	beq.n	1648 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1632:	f413 6f68 	tst.w	r3, #3712	; 0xe80
    1636:	d00d      	beq.n	1654 <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1638:	4621      	mov	r1, r4
    163a:	480a      	ldr	r0, [pc, #40]	; (1664 <mutex_free_platform+0x4c>)
    163c:	f005 fc18 	bl	6e70 <k_mem_slab_free>
        mutex->mutex = NULL;
    1640:	2300      	movs	r3, #0
    1642:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1644:	4b06      	ldr	r3, [pc, #24]	; (1660 <mutex_free_platform+0x48>)
    1646:	6063      	str	r3, [r4, #4]
}
    1648:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    164a:	4b07      	ldr	r3, [pc, #28]	; (1668 <mutex_free_platform+0x50>)
    164c:	685b      	ldr	r3, [r3, #4]
    164e:	4807      	ldr	r0, [pc, #28]	; (166c <mutex_free_platform+0x54>)
    1650:	4798      	blx	r3
    1652:	e7e4      	b.n	161e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1654:	2214      	movs	r2, #20
    1656:	2100      	movs	r1, #0
    1658:	6820      	ldr	r0, [r4, #0]
    165a:	f004 fc7d 	bl	5f58 <memset>
    165e:	e7f1      	b.n	1644 <mutex_free_platform+0x2c>
    1660:	a95c5f2c 	.word	0xa95c5f2c
    1664:	20001510 	.word	0x20001510
    1668:	20000124 	.word	0x20000124
    166c:	00007aac 	.word	0x00007aac

00001670 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1670:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1672:	4604      	mov	r4, r0
    1674:	b358      	cbz	r0, 16ce <mutex_init_platform+0x5e>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1676:	6860      	ldr	r0, [r4, #4]
    1678:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    167c:	d026      	beq.n	16cc <mutex_init_platform+0x5c>
    167e:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    1682:	d023      	beq.n	16cc <mutex_init_platform+0x5c>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1684:	4b16      	ldr	r3, [pc, #88]	; (16e0 <mutex_init_platform+0x70>)
    1686:	4298      	cmp	r0, r3
    1688:	d026      	beq.n	16d8 <mutex_init_platform+0x68>
        mutex_flags_unknown(mutex->flags)) {
    168a:	f7ff ff3f 	bl	150c <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    168e:	b1b0      	cbz	r0, 16be <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1690:	f04f 32ff 	mov.w	r2, #4294967295
    1694:	f04f 33ff 	mov.w	r3, #4294967295
    1698:	4621      	mov	r1, r4
    169a:	4812      	ldr	r0, [pc, #72]	; (16e4 <mutex_init_platform+0x74>)
    169c:	f002 fc1e 	bl	3edc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    16a0:	b908      	cbnz	r0, 16a6 <mutex_init_platform+0x36>
    16a2:	6823      	ldr	r3, [r4, #0]
    16a4:	b91b      	cbnz	r3, 16ae <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
    16a6:	4b10      	ldr	r3, [pc, #64]	; (16e8 <mutex_init_platform+0x78>)
    16a8:	685b      	ldr	r3, [r3, #4]
    16aa:	4810      	ldr	r0, [pc, #64]	; (16ec <mutex_init_platform+0x7c>)
    16ac:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    16ae:	2214      	movs	r2, #20
    16b0:	2100      	movs	r1, #0
    16b2:	6820      	ldr	r0, [r4, #0]
    16b4:	f004 fc50 	bl	5f58 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    16b8:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    16bc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    16be:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    16c0:	f005 fc49 	bl	6f56 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    16c4:	6863      	ldr	r3, [r4, #4]
    16c6:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    16ca:	6063      	str	r3, [r4, #4]
}
    16cc:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    16ce:	4b06      	ldr	r3, [pc, #24]	; (16e8 <mutex_init_platform+0x78>)
    16d0:	685b      	ldr	r3, [r3, #4]
    16d2:	4807      	ldr	r0, [pc, #28]	; (16f0 <mutex_init_platform+0x80>)
    16d4:	4798      	blx	r3
    16d6:	e7ce      	b.n	1676 <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    16d8:	6823      	ldr	r3, [r4, #0]
    16da:	2b00      	cmp	r3, #0
    16dc:	d1d5      	bne.n	168a <mutex_init_platform+0x1a>
    16de:	e7d7      	b.n	1690 <mutex_init_platform+0x20>
    16e0:	a95c5f2c 	.word	0xa95c5f2c
    16e4:	20001510 	.word	0x20001510
    16e8:	20000124 	.word	0x20000124
    16ec:	00007ad4 	.word	0x00007ad4
    16f0:	00007aac 	.word	0x00007aac

000016f4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    16f4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    16f6:	2340      	movs	r3, #64	; 0x40
    16f8:	2214      	movs	r2, #20
    16fa:	4904      	ldr	r1, [pc, #16]	; (170c <nrf_cc3xx_platform_mutex_init+0x18>)
    16fc:	4804      	ldr	r0, [pc, #16]	; (1710 <nrf_cc3xx_platform_mutex_init+0x1c>)
    16fe:	f005 fba9 	bl	6e54 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1702:	4904      	ldr	r1, [pc, #16]	; (1714 <nrf_cc3xx_platform_mutex_init+0x20>)
    1704:	4804      	ldr	r0, [pc, #16]	; (1718 <nrf_cc3xx_platform_mutex_init+0x24>)
    1706:	f003 fcb7 	bl	5078 <nrf_cc3xx_platform_set_mutexes>
}
    170a:	bd08      	pop	{r3, pc}
    170c:	20001010 	.word	0x20001010
    1710:	20001510 	.word	0x20001510
    1714:	00007b04 	.word	0x00007b04
    1718:	00007b18 	.word	0x00007b18

0000171c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    171c:	4901      	ldr	r1, [pc, #4]	; (1724 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    171e:	2210      	movs	r2, #16
	str	r2, [r1]
    1720:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1722:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1724:	e000ed10 	.word	0xe000ed10

00001728 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1728:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    172a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    172c:	f380 8811 	msr	BASEPRI, r0
	isb
    1730:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    1734:	f3bf 8f4f 	dsb	sy
    1738:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    173a:	b662      	cpsie	i
	isb
    173c:	f3bf 8f6f 	isb	sy

	bx	lr
    1740:	4770      	bx	lr
    1742:	bf00      	nop

00001744 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1744:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1746:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1748:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    174c:	f3bf 8f4f 	dsb	sy
    1750:	bf20      	wfe

	msr	BASEPRI, r0
    1752:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1756:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1758:	4770      	bx	lr
    175a:	bf00      	nop

0000175c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    175c:	2800      	cmp	r0, #0
    175e:	db07      	blt.n	1770 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1760:	f000 021f 	and.w	r2, r0, #31
    1764:	0940      	lsrs	r0, r0, #5
    1766:	2301      	movs	r3, #1
    1768:	4093      	lsls	r3, r2
    176a:	4a02      	ldr	r2, [pc, #8]	; (1774 <__NVIC_EnableIRQ+0x18>)
    176c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    1770:	4770      	bx	lr
    1772:	bf00      	nop
    1774:	e000e100 	.word	0xe000e100

00001778 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1778:	2800      	cmp	r0, #0
    177a:	db0c      	blt.n	1796 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    177c:	f000 021f 	and.w	r2, r0, #31
    1780:	0940      	lsrs	r0, r0, #5
    1782:	2301      	movs	r3, #1
    1784:	4093      	lsls	r3, r2
    1786:	3020      	adds	r0, #32
    1788:	4a03      	ldr	r2, [pc, #12]	; (1798 <__NVIC_DisableIRQ+0x20>)
    178a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    178e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1792:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    1796:	4770      	bx	lr
    1798:	e000e100 	.word	0xe000e100

0000179c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    179c:	2800      	cmp	r0, #0
    179e:	db08      	blt.n	17b2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17a0:	0149      	lsls	r1, r1, #5
    17a2:	b2c9      	uxtb	r1, r1
    17a4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    17a8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    17ac:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    17b0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17b2:	f000 000f 	and.w	r0, r0, #15
    17b6:	0149      	lsls	r1, r1, #5
    17b8:	b2c9      	uxtb	r1, r1
    17ba:	4b01      	ldr	r3, [pc, #4]	; (17c0 <__NVIC_SetPriority+0x24>)
    17bc:	5419      	strb	r1, [r3, r0]
  }
}
    17be:	4770      	bx	lr
    17c0:	e000ed14 	.word	0xe000ed14

000017c4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    17c4:	0942      	lsrs	r2, r0, #5
    17c6:	4b05      	ldr	r3, [pc, #20]	; (17dc <arch_irq_is_enabled+0x18>)
    17c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    17cc:	f000 001f 	and.w	r0, r0, #31
    17d0:	2301      	movs	r3, #1
    17d2:	fa03 f000 	lsl.w	r0, r3, r0
}
    17d6:	4010      	ands	r0, r2
    17d8:	4770      	bx	lr
    17da:	bf00      	nop
    17dc:	e000e100 	.word	0xe000e100

000017e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    17e0:	bf30      	wfi
    b z_SysNmiOnReset
    17e2:	f7ff bffd 	b.w	17e0 <z_SysNmiOnReset>
    17e6:	bf00      	nop

000017e8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    17e8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    17ea:	4b0b      	ldr	r3, [pc, #44]	; (1818 <z_arm_prep_c+0x30>)
    17ec:	4a0b      	ldr	r2, [pc, #44]	; (181c <z_arm_prep_c+0x34>)
    17ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    17f2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    17f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17f8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    17fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1800:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1808:	f002 fab2 	bl	3d70 <z_bss_zero>
	z_data_copy();
    180c:	f003 fa20 	bl	4c50 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1810:	f000 fa80 	bl	1d14 <z_arm_interrupt_init>
	z_cstart();
    1814:	f002 fb0a 	bl	3e2c <z_cstart>
    1818:	e000ed00 	.word	0xe000ed00
    181c:	00000000 	.word	0x00000000

00001820 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1820:	4a0a      	ldr	r2, [pc, #40]	; (184c <arch_swap+0x2c>)
    1822:	6893      	ldr	r3, [r2, #8]
    1824:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1828:	4909      	ldr	r1, [pc, #36]	; (1850 <arch_swap+0x30>)
    182a:	6809      	ldr	r1, [r1, #0]
    182c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1830:	4908      	ldr	r1, [pc, #32]	; (1854 <arch_swap+0x34>)
    1832:	684b      	ldr	r3, [r1, #4]
    1834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1838:	604b      	str	r3, [r1, #4]
    183a:	2300      	movs	r3, #0
    183c:	f383 8811 	msr	BASEPRI, r3
    1840:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1844:	6893      	ldr	r3, [r2, #8]
}
    1846:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    184a:	4770      	bx	lr
    184c:	20001ac4 	.word	0x20001ac4
    1850:	00007d64 	.word	0x00007d64
    1854:	e000ed00 	.word	0xe000ed00

00001858 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1858:	4913      	ldr	r1, [pc, #76]	; (18a8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    185a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    185c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1860:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1862:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1866:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    186a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    186c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1870:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1874:	4f0d      	ldr	r7, [pc, #52]	; (18ac <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1876:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    187a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    187c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    187e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1880:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1884:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1886:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    188a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    188e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1890:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1892:	f000 faef 	bl	1e74 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1896:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    189a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    189e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    18a2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    18a6:	4770      	bx	lr
    ldr r1, =_kernel
    18a8:	20001ac4 	.word	0x20001ac4
    ldr v4, =_SCS_ICSR
    18ac:	e000ed04 	.word	0xe000ed04

000018b0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    18b0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    18b4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    18b6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    18ba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    18be:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    18c0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    18c4:	2902      	cmp	r1, #2
    beq _oops
    18c6:	d0ff      	beq.n	18c8 <_oops>

000018c8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    18c8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    18ca:	f004 f9b8 	bl	5c3e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    18ce:	bd01      	pop	{r0, pc}

000018d0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    18d0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    18d2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    18d6:	490e      	ldr	r1, [pc, #56]	; (1910 <arch_new_thread+0x40>)
    18d8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    18dc:	f021 0101 	bic.w	r1, r1, #1
    18e0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    18e4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    18e8:	9b01      	ldr	r3, [sp, #4]
    18ea:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    18ee:	9b02      	ldr	r3, [sp, #8]
    18f0:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    18f4:	9b03      	ldr	r3, [sp, #12]
    18f6:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    18fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    18fe:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    1902:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1904:	2300      	movs	r3, #0
    1906:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    190a:	bc10      	pop	{r4}
    190c:	4770      	bx	lr
    190e:	bf00      	nop
    1910:	0000536f 	.word	0x0000536f

00001914 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1914:	4b10      	ldr	r3, [pc, #64]	; (1958 <z_check_thread_stack_fail+0x44>)
    1916:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
    1918:	b1bb      	cbz	r3, 194a <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    191a:	f110 0f16 	cmn.w	r0, #22
    191e:	d00b      	beq.n	1938 <z_check_thread_stack_fail+0x24>
    1920:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    1924:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
    1928:	4584      	cmp	ip, r0
    192a:	d810      	bhi.n	194e <z_check_thread_stack_fail+0x3a>
    192c:	4282      	cmp	r2, r0
    192e:	d910      	bls.n	1952 <z_check_thread_stack_fail+0x3e>
    1930:	428a      	cmp	r2, r1
    1932:	d807      	bhi.n	1944 <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1934:	2000      	movs	r0, #0
    1936:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1938:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    193c:	428a      	cmp	r2, r1
    193e:	d801      	bhi.n	1944 <z_check_thread_stack_fail+0x30>
	return 0;
    1940:	2000      	movs	r0, #0
}
    1942:	4770      	bx	lr
		return thread->stack_info.start;
    1944:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    1948:	4770      	bx	lr
		return 0;
    194a:	2000      	movs	r0, #0
    194c:	4770      	bx	lr
	return 0;
    194e:	2000      	movs	r0, #0
    1950:	4770      	bx	lr
    1952:	2000      	movs	r0, #0
    1954:	4770      	bx	lr
    1956:	bf00      	nop
    1958:	20001ac4 	.word	0x20001ac4

0000195c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    195c:	b508      	push	{r3, lr}
    195e:	460d      	mov	r5, r1
    1960:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1962:	4b08      	ldr	r3, [pc, #32]	; (1984 <arch_switch_to_main_thread+0x28>)
    1964:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1966:	f000 fa85 	bl	1e74 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    196a:	4620      	mov	r0, r4
    196c:	f385 8809 	msr	PSP, r5
    1970:	2100      	movs	r1, #0
    1972:	b663      	cpsie	if
    1974:	f381 8811 	msr	BASEPRI, r1
    1978:	f3bf 8f6f 	isb	sy
    197c:	2200      	movs	r2, #0
    197e:	2300      	movs	r3, #0
    1980:	f003 fcf5 	bl	536e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1984:	20001ac4 	.word	0x20001ac4

00001988 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1988:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    198a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    198c:	4a0b      	ldr	r2, [pc, #44]	; (19bc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    198e:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    1990:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1992:	bf1e      	ittt	ne
	movne	r1, #0
    1994:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1996:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    1998:	f005 fac1 	blne	6f1e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    199c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    199e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    19a2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    19a6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    19aa:	4905      	ldr	r1, [pc, #20]	; (19c0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    19ac:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    19ae:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    19b0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    19b2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    19b6:	4903      	ldr	r1, [pc, #12]	; (19c4 <_isr_wrapper+0x3c>)
	bx r1
    19b8:	4708      	bx	r1
    19ba:	0000      	.short	0x0000
	ldr r2, =_kernel
    19bc:	20001ac4 	.word	0x20001ac4
	ldr r1, =_sw_isr_table
    19c0:	0000734c 	.word	0x0000734c
	ldr r1, =z_arm_int_exit
    19c4:	000019c9 	.word	0x000019c9

000019c8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    19c8:	4b04      	ldr	r3, [pc, #16]	; (19dc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    19ca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    19cc:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    19ce:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    19d0:	d003      	beq.n	19da <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    19d2:	4903      	ldr	r1, [pc, #12]	; (19e0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    19d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    19d8:	600a      	str	r2, [r1, #0]

000019da <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    19da:	4770      	bx	lr
	ldr r3, =_kernel
    19dc:	20001ac4 	.word	0x20001ac4
	ldr r1, =_SCS_ICSR
    19e0:	e000ed04 	.word	0xe000ed04

000019e4 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    19e4:	b538      	push	{r3, r4, r5, lr}
    19e6:	4615      	mov	r5, r2
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    19e8:	4b20      	ldr	r3, [pc, #128]	; (1a6c <bus_fault+0x88>)
    19ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19ec:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    19f0:	d119      	bne.n	1a26 <bus_fault+0x42>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    19f2:	2416      	movs	r4, #22
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    19f4:	4b1d      	ldr	r3, [pc, #116]	; (1a6c <bus_fault+0x88>)
    19f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19f8:	f413 6f00 	tst.w	r3, #2048	; 0x800
    19fc:	d000      	beq.n	1a00 <bus_fault+0x1c>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    19fe:	2418      	movs	r4, #24
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1a00:	4b1a      	ldr	r3, [pc, #104]	; (1a6c <bus_fault+0x88>)
    1a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a04:	f413 7f00 	tst.w	r3, #512	; 0x200
    1a08:	d010      	beq.n	1a2c <bus_fault+0x48>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1a0a:	4b18      	ldr	r3, [pc, #96]	; (1a6c <bus_fault+0x88>)
    1a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a10:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1a14:	d009      	beq.n	1a2a <bus_fault+0x46>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1a16:	b1d9      	cbz	r1, 1a50 <bus_fault+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1a18:	4a14      	ldr	r2, [pc, #80]	; (1a6c <bus_fault+0x88>)
    1a1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1a20:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    1a22:	2419      	movs	r4, #25
    1a24:	e002      	b.n	1a2c <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_STACKING;
    1a26:	2417      	movs	r4, #23
    1a28:	e7e4      	b.n	19f4 <bus_fault+0x10>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    1a2a:	2419      	movs	r4, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1a2c:	4b0f      	ldr	r3, [pc, #60]	; (1a6c <bus_fault+0x88>)
    1a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a30:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1a34:	d000      	beq.n	1a38 <bus_fault+0x54>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1a36:	241a      	movs	r4, #26
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1a38:	4b0c      	ldr	r3, [pc, #48]	; (1a6c <bus_fault+0x88>)
    1a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a3c:	f413 7f80 	tst.w	r3, #256	; 0x100
    1a40:	d108      	bne.n	1a54 <bus_fault+0x70>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1a42:	4b0a      	ldr	r3, [pc, #40]	; (1a6c <bus_fault+0x88>)
    1a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a46:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1a4a:	d004      	beq.n	1a56 <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    1a4c:	241c      	movs	r4, #28
    1a4e:	e002      	b.n	1a56 <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    1a50:	2419      	movs	r4, #25
    1a52:	e7eb      	b.n	1a2c <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    1a54:	241b      	movs	r4, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1a56:	4a05      	ldr	r2, [pc, #20]	; (1a6c <bus_fault+0x88>)
    1a58:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a5a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1a5e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1a60:	2101      	movs	r1, #1
    1a62:	f004 f90e 	bl	5c82 <memory_fault_recoverable>
    1a66:	7028      	strb	r0, [r5, #0]

	return reason;
}
    1a68:	4620      	mov	r0, r4
    1a6a:	bd38      	pop	{r3, r4, r5, pc}
    1a6c:	e000ed00 	.word	0xe000ed00

00001a70 <usage_fault>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1a70:	4b17      	ldr	r3, [pc, #92]	; (1ad0 <usage_fault+0x60>)
    1a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a74:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    1a78:	d125      	bne.n	1ac6 <usage_fault+0x56>
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    1a7a:	201d      	movs	r0, #29
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1a7c:	4b14      	ldr	r3, [pc, #80]	; (1ad0 <usage_fault+0x60>)
    1a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a80:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    1a84:	d000      	beq.n	1a88 <usage_fault+0x18>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    1a86:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1a88:	4b11      	ldr	r3, [pc, #68]	; (1ad0 <usage_fault+0x60>)
    1a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a8c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    1a90:	d000      	beq.n	1a94 <usage_fault+0x24>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1a92:	2021      	movs	r0, #33	; 0x21
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1a94:	4b0e      	ldr	r3, [pc, #56]	; (1ad0 <usage_fault+0x60>)
    1a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a98:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    1a9c:	d000      	beq.n	1aa0 <usage_fault+0x30>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1a9e:	2022      	movs	r0, #34	; 0x22
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1aa0:	4b0b      	ldr	r3, [pc, #44]	; (1ad0 <usage_fault+0x60>)
    1aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1aa4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    1aa8:	d000      	beq.n	1aac <usage_fault+0x3c>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1aaa:	2023      	movs	r0, #35	; 0x23
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1aac:	4b08      	ldr	r3, [pc, #32]	; (1ad0 <usage_fault+0x60>)
    1aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ab0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1ab4:	d109      	bne.n	1aca <usage_fault+0x5a>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1ab6:	4a06      	ldr	r2, [pc, #24]	; (1ad0 <usage_fault+0x60>)
    1ab8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1aba:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1abe:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1ac2:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1ac4:	4770      	bx	lr
		reason = K_ERR_ARM_USAGE_DIV_0;
    1ac6:	201e      	movs	r0, #30
    1ac8:	e7d8      	b.n	1a7c <usage_fault+0xc>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    1aca:	2024      	movs	r0, #36	; 0x24
    1acc:	e7f3      	b.n	1ab6 <usage_fault+0x46>
    1ace:	bf00      	nop
    1ad0:	e000ed00 	.word	0xe000ed00

00001ad4 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1ad4:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1ad6:	4b0d      	ldr	r3, [pc, #52]	; (1b0c <z_arm_is_synchronous_svc+0x38>)
    1ad8:	695a      	ldr	r2, [r3, #20]
    1ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1ade:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1ae0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ae4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    1ae8:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1aec:	695a      	ldr	r2, [r3, #20]
    1aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1af2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1af8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1afc:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1b00:	4299      	cmp	r1, r3
    1b02:	d001      	beq.n	1b08 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    1b04:	2000      	movs	r0, #0
    1b06:	4770      	bx	lr
		return true;
    1b08:	2001      	movs	r0, #1
}
    1b0a:	4770      	bx	lr
    1b0c:	e000ed00 	.word	0xe000ed00

00001b10 <mem_manage_fault>:
{
    1b10:	b570      	push	{r4, r5, r6, lr}
    1b12:	4604      	mov	r4, r0
    1b14:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1b16:	4b32      	ldr	r3, [pc, #200]	; (1be0 <mem_manage_fault+0xd0>)
    1b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b1a:	f013 0f10 	tst.w	r3, #16
    1b1e:	d11a      	bne.n	1b56 <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    1b20:	2510      	movs	r5, #16
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1b22:	4b2f      	ldr	r3, [pc, #188]	; (1be0 <mem_manage_fault+0xd0>)
    1b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b26:	f013 0f08 	tst.w	r3, #8
    1b2a:	d000      	beq.n	1b2e <mem_manage_fault+0x1e>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1b2c:	2512      	movs	r5, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1b2e:	4b2c      	ldr	r3, [pc, #176]	; (1be0 <mem_manage_fault+0xd0>)
    1b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b32:	f013 0f02 	tst.w	r3, #2
    1b36:	d010      	beq.n	1b5a <mem_manage_fault+0x4a>
		uint32_t temp = SCB->MMFAR;
    1b38:	4b29      	ldr	r3, [pc, #164]	; (1be0 <mem_manage_fault+0xd0>)
    1b3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b3e:	f013 0f80 	tst.w	r3, #128	; 0x80
    1b42:	d03d      	beq.n	1bc0 <mem_manage_fault+0xb0>
			if (from_hard_fault != 0) {
    1b44:	2900      	cmp	r1, #0
    1b46:	d03f      	beq.n	1bc8 <mem_manage_fault+0xb8>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1b48:	4a25      	ldr	r2, [pc, #148]	; (1be0 <mem_manage_fault+0xd0>)
    1b4a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1b50:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    1b52:	2513      	movs	r5, #19
    1b54:	e003      	b.n	1b5e <mem_manage_fault+0x4e>
		reason = K_ERR_ARM_MEM_STACKING;
    1b56:	2511      	movs	r5, #17
    1b58:	e7e3      	b.n	1b22 <mem_manage_fault+0x12>
	uint32_t mmfar = -EINVAL;
    1b5a:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1b5e:	4b20      	ldr	r3, [pc, #128]	; (1be0 <mem_manage_fault+0xd0>)
    1b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b62:	f013 0f01 	tst.w	r3, #1
    1b66:	d000      	beq.n	1b6a <mem_manage_fault+0x5a>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    1b68:	2514      	movs	r5, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1b6a:	4b1d      	ldr	r3, [pc, #116]	; (1be0 <mem_manage_fault+0xd0>)
    1b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b6e:	f013 0f20 	tst.w	r3, #32
    1b72:	d000      	beq.n	1b76 <mem_manage_fault+0x66>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1b74:	2515      	movs	r5, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1b76:	4b1a      	ldr	r3, [pc, #104]	; (1be0 <mem_manage_fault+0xd0>)
    1b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b7a:	f013 0f10 	tst.w	r3, #16
    1b7e:	d104      	bne.n	1b8a <mem_manage_fault+0x7a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1b80:	4b17      	ldr	r3, [pc, #92]	; (1be0 <mem_manage_fault+0xd0>)
    1b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1b84:	f013 0f02 	tst.w	r3, #2
    1b88:	d004      	beq.n	1b94 <mem_manage_fault+0x84>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1b8a:	4b15      	ldr	r3, [pc, #84]	; (1be0 <mem_manage_fault+0xd0>)
    1b8c:	685b      	ldr	r3, [r3, #4]
    1b8e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    1b92:	d11b      	bne.n	1bcc <mem_manage_fault+0xbc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1b94:	4b12      	ldr	r3, [pc, #72]	; (1be0 <mem_manage_fault+0xd0>)
    1b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b98:	f013 0f20 	tst.w	r3, #32
    1b9c:	d004      	beq.n	1ba8 <mem_manage_fault+0x98>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1b9e:	4a10      	ldr	r2, [pc, #64]	; (1be0 <mem_manage_fault+0xd0>)
    1ba0:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1ba6:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1ba8:	4a0d      	ldr	r2, [pc, #52]	; (1be0 <mem_manage_fault+0xd0>)
    1baa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1bac:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1bb0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1bb2:	2101      	movs	r1, #1
    1bb4:	4620      	mov	r0, r4
    1bb6:	f004 f864 	bl	5c82 <memory_fault_recoverable>
    1bba:	7030      	strb	r0, [r6, #0]
}
    1bbc:	4628      	mov	r0, r5
    1bbe:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1bc0:	f06f 0015 	mvn.w	r0, #21
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    1bc4:	2513      	movs	r5, #19
    1bc6:	e7ca      	b.n	1b5e <mem_manage_fault+0x4e>
    1bc8:	2513      	movs	r5, #19
    1bca:	e7c8      	b.n	1b5e <mem_manage_fault+0x4e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1bcc:	4621      	mov	r1, r4
    1bce:	f7ff fea1 	bl	1914 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1bd2:	2800      	cmp	r0, #0
    1bd4:	d0de      	beq.n	1b94 <mem_manage_fault+0x84>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1bd6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1bda:	2502      	movs	r5, #2
    1bdc:	e7da      	b.n	1b94 <mem_manage_fault+0x84>
    1bde:	bf00      	nop
    1be0:	e000ed00 	.word	0xe000ed00

00001be4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1be4:	b538      	push	{r3, r4, r5, lr}
    1be6:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    1be8:	2300      	movs	r3, #0
    1bea:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1bec:	4b1a      	ldr	r3, [pc, #104]	; (1c58 <hard_fault+0x74>)
    1bee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1bf0:	f010 0002 	ands.w	r0, r0, #2
    1bf4:	d12d      	bne.n	1c52 <hard_fault+0x6e>
    1bf6:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	db2a      	blt.n	1c54 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1bfe:	4b16      	ldr	r3, [pc, #88]	; (1c58 <hard_fault+0x74>)
    1c00:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1c02:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    1c06:	d025      	beq.n	1c54 <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    1c08:	4628      	mov	r0, r5
    1c0a:	f7ff ff63 	bl	1ad4 <z_arm_is_synchronous_svc>
    1c0e:	b108      	cbz	r0, 1c14 <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    1c10:	6828      	ldr	r0, [r5, #0]
    1c12:	e01f      	b.n	1c54 <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1c14:	4b10      	ldr	r3, [pc, #64]	; (1c58 <hard_fault+0x74>)
    1c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c18:	f013 0fff 	tst.w	r3, #255	; 0xff
    1c1c:	d10d      	bne.n	1c3a <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1c1e:	4b0e      	ldr	r3, [pc, #56]	; (1c58 <hard_fault+0x74>)
    1c20:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1c22:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    1c26:	d10e      	bne.n	1c46 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1c28:	4b0b      	ldr	r3, [pc, #44]	; (1c58 <hard_fault+0x74>)
    1c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1c30:	d310      	bcc.n	1c54 <hard_fault+0x70>
			reason = usage_fault(esf);
    1c32:	4628      	mov	r0, r5
    1c34:	f7ff ff1c 	bl	1a70 <usage_fault>
    1c38:	e00c      	b.n	1c54 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    1c3a:	4622      	mov	r2, r4
    1c3c:	2101      	movs	r1, #1
    1c3e:	4628      	mov	r0, r5
    1c40:	f7ff ff66 	bl	1b10 <mem_manage_fault>
    1c44:	e006      	b.n	1c54 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    1c46:	4622      	mov	r2, r4
    1c48:	2101      	movs	r1, #1
    1c4a:	4628      	mov	r0, r5
    1c4c:	f7ff feca 	bl	19e4 <bus_fault>
    1c50:	e000      	b.n	1c54 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1c52:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    1c54:	bd38      	pop	{r3, r4, r5, pc}
    1c56:	bf00      	nop
    1c58:	e000ed00 	.word	0xe000ed00

00001c5c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1c5c:	b570      	push	{r4, r5, r6, lr}
    1c5e:	b08a      	sub	sp, #40	; 0x28
    1c60:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c62:	4b22      	ldr	r3, [pc, #136]	; (1cec <z_arm_fault+0x90>)
    1c64:	6859      	ldr	r1, [r3, #4]
    1c66:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1c6a:	2300      	movs	r3, #0
    1c6c:	f383 8811 	msr	BASEPRI, r3
    1c70:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1c74:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1c78:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1c7c:	d115      	bne.n	1caa <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1c7e:	f002 030c 	and.w	r3, r2, #12
    1c82:	2b08      	cmp	r3, #8
    1c84:	d014      	beq.n	1cb0 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1c86:	f012 0f08 	tst.w	r2, #8
    1c8a:	d00b      	beq.n	1ca4 <z_arm_fault+0x48>
	*nested_exc = false;
    1c8c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1c8e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1c92:	4620      	mov	r0, r4
    1c94:	f003 fffa 	bl	5c8c <fault_handle>
    1c98:	4605      	mov	r5, r0
	if (recoverable) {
    1c9a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1c9e:	b153      	cbz	r3, 1cb6 <z_arm_fault+0x5a>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1ca0:	b00a      	add	sp, #40	; 0x28
    1ca2:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1ca4:	4604      	mov	r4, r0
			*nested_exc = true;
    1ca6:	2601      	movs	r6, #1
    1ca8:	e7f1      	b.n	1c8e <z_arm_fault+0x32>
	*nested_exc = false;
    1caa:	2600      	movs	r6, #0
		return NULL;
    1cac:	4634      	mov	r4, r6
    1cae:	e7ee      	b.n	1c8e <z_arm_fault+0x32>
	*nested_exc = false;
    1cb0:	2600      	movs	r6, #0
		return NULL;
    1cb2:	4634      	mov	r4, r6
    1cb4:	e7eb      	b.n	1c8e <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1cb6:	2220      	movs	r2, #32
    1cb8:	4621      	mov	r1, r4
    1cba:	a801      	add	r0, sp, #4
    1cbc:	f004 f91d 	bl	5efa <memcpy>
	if (nested_exc) {
    1cc0:	b14e      	cbz	r6, 1cd6 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1cc2:	9b08      	ldr	r3, [sp, #32]
    1cc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1cc8:	b95a      	cbnz	r2, 1ce2 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1cca:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1cce:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    1cd2:	9308      	str	r3, [sp, #32]
    1cd4:	e005      	b.n	1ce2 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1cd6:	9b08      	ldr	r3, [sp, #32]
    1cd8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1cdc:	f023 0301 	bic.w	r3, r3, #1
    1ce0:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    1ce2:	a901      	add	r1, sp, #4
    1ce4:	4628      	mov	r0, r5
    1ce6:	f003 ffa6 	bl	5c36 <z_arm_fatal_error>
    1cea:	e7d9      	b.n	1ca0 <z_arm_fault+0x44>
    1cec:	e000ed00 	.word	0xe000ed00

00001cf0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1cf0:	4a02      	ldr	r2, [pc, #8]	; (1cfc <z_arm_fault_init+0xc>)
    1cf2:	6953      	ldr	r3, [r2, #20]
    1cf4:	f043 0310 	orr.w	r3, r3, #16
    1cf8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1cfa:	4770      	bx	lr
    1cfc:	e000ed00 	.word	0xe000ed00

00001d00 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1d00:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1d04:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1d08:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1d0a:	4672      	mov	r2, lr
	bl z_arm_fault
    1d0c:	f7ff ffa6 	bl	1c5c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1d10:	bd01      	pop	{r0, pc}
    1d12:	bf00      	nop

00001d14 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1d14:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1d16:	e006      	b.n	1d26 <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d18:	f003 030f 	and.w	r3, r3, #15
    1d1c:	4909      	ldr	r1, [pc, #36]	; (1d44 <z_arm_interrupt_init+0x30>)
    1d1e:	4419      	add	r1, r3
    1d20:	2320      	movs	r3, #32
    1d22:	760b      	strb	r3, [r1, #24]
    1d24:	3201      	adds	r2, #1
    1d26:	2a2f      	cmp	r2, #47	; 0x2f
    1d28:	dc0a      	bgt.n	1d40 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    1d2a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	dbf3      	blt.n	1d18 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d30:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1d34:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1d38:	2120      	movs	r1, #32
    1d3a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1d3e:	e7f1      	b.n	1d24 <z_arm_interrupt_init+0x10>
	}
}
    1d40:	4770      	bx	lr
    1d42:	bf00      	nop
    1d44:	e000ecfc 	.word	0xe000ecfc

00001d48 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    1d48:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    1d4a:	4913      	ldr	r1, [pc, #76]	; (1d98 <__start+0x50>)
    strb r0, [r1]
    1d4c:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1d4e:	2000      	movs	r0, #0
    msr CONTROL, r0
    1d50:	f380 8814 	msr	CONTROL, r0
    isb
    1d54:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1d58:	f7ff fa96 	bl	1288 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1d5c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1d5e:	490f      	ldr	r1, [pc, #60]	; (1d9c <__start+0x54>)
    str r0, [r1]
    1d60:	6008      	str	r0, [r1, #0]
    dsb
    1d62:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1d66:	480e      	ldr	r0, [pc, #56]	; (1da0 <__start+0x58>)
    msr msp, r0
    1d68:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1d6c:	f000 f830 	bl	1dd0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1d70:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1d72:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1d76:	480b      	ldr	r0, [pc, #44]	; (1da4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1d78:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    1d7c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1d7e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1d82:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1d86:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1d88:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1d8a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1d8e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1d92:	f7ff fd29 	bl	17e8 <z_arm_prep_c>
    1d96:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    1d98:	20001cde 	.word	0x20001cde
    ldr r1, =_SCS_MPU_CTRL
    1d9c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1da0:	20002ac0 	.word	0x20002ac0
    ldr r0, =z_interrupt_stacks
    1da4:	20001d00 	.word	0x20001d00

00001da8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1da8:	4b08      	ldr	r3, [pc, #32]	; (1dcc <z_arm_clear_arm_mpu_config+0x24>)
    1daa:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    1dae:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    1db2:	2300      	movs	r3, #0
    1db4:	e006      	b.n	1dc4 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1db6:	4a05      	ldr	r2, [pc, #20]	; (1dcc <z_arm_clear_arm_mpu_config+0x24>)
    1db8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1dbc:	2100      	movs	r1, #0
    1dbe:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1dc2:	3301      	adds	r3, #1
    1dc4:	4283      	cmp	r3, r0
    1dc6:	dbf6      	blt.n	1db6 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1dc8:	4770      	bx	lr
    1dca:	bf00      	nop
    1dcc:	e000ed00 	.word	0xe000ed00

00001dd0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1dd0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1dd2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1dd4:	2400      	movs	r4, #0
    1dd6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1dda:	f7ff ffe5 	bl	1da8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1dde:	4623      	mov	r3, r4
    1de0:	e008      	b.n	1df4 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    1de2:	f103 0120 	add.w	r1, r3, #32
    1de6:	4a0e      	ldr	r2, [pc, #56]	; (1e20 <z_arm_init_arch_hw_at_boot+0x50>)
    1de8:	f04f 30ff 	mov.w	r0, #4294967295
    1dec:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1df0:	3301      	adds	r3, #1
    1df2:	b2db      	uxtb	r3, r3
    1df4:	2b07      	cmp	r3, #7
    1df6:	d9f4      	bls.n	1de2 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1df8:	2300      	movs	r3, #0
    1dfa:	e008      	b.n	1e0e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1dfc:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1e00:	4a07      	ldr	r2, [pc, #28]	; (1e20 <z_arm_init_arch_hw_at_boot+0x50>)
    1e02:	f04f 30ff 	mov.w	r0, #4294967295
    1e06:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1e0a:	3301      	adds	r3, #1
    1e0c:	b2db      	uxtb	r3, r3
    1e0e:	2b07      	cmp	r3, #7
    1e10:	d9f4      	bls.n	1dfc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1e12:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e18:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1e1c:	bd10      	pop	{r4, pc}
    1e1e:	bf00      	nop
    1e20:	e000e100 	.word	0xe000e100

00001e24 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1e24:	b508      	push	{r3, lr}
	if (_current == thread) {
    1e26:	4b0a      	ldr	r3, [pc, #40]	; (1e50 <z_impl_k_thread_abort+0x2c>)
    1e28:	689b      	ldr	r3, [r3, #8]
    1e2a:	4283      	cmp	r3, r0
    1e2c:	d002      	beq.n	1e34 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    1e2e:	f002 fed7 	bl	4be0 <z_thread_abort>
}
    1e32:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1e34:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d0f8      	beq.n	1e2e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e3c:	4b05      	ldr	r3, [pc, #20]	; (1e54 <z_impl_k_thread_abort+0x30>)
    1e3e:	685a      	ldr	r2, [r3, #4]
    1e40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1e44:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1e48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1e4c:	625a      	str	r2, [r3, #36]	; 0x24
    1e4e:	e7ee      	b.n	1e2e <z_impl_k_thread_abort+0xa>
    1e50:	20001ac4 	.word	0x20001ac4
    1e54:	e000ed00 	.word	0xe000ed00

00001e58 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1e58:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1e5a:	4b03      	ldr	r3, [pc, #12]	; (1e68 <z_arm_configure_static_mpu_regions+0x10>)
    1e5c:	4a03      	ldr	r2, [pc, #12]	; (1e6c <z_arm_configure_static_mpu_regions+0x14>)
    1e5e:	2101      	movs	r1, #1
    1e60:	4803      	ldr	r0, [pc, #12]	; (1e70 <z_arm_configure_static_mpu_regions+0x18>)
    1e62:	f003 ff99 	bl	5d98 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1e66:	bd08      	pop	{r3, pc}
    1e68:	20040000 	.word	0x20040000
    1e6c:	20000000 	.word	0x20000000
    1e70:	00007b28 	.word	0x00007b28

00001e74 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    1e74:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1e76:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    1e7a:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1e7c:	4804      	ldr	r0, [pc, #16]	; (1e90 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1e7e:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    1e80:	2340      	movs	r3, #64	; 0x40
    1e82:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1e84:	4b03      	ldr	r3, [pc, #12]	; (1e94 <z_arm_configure_dynamic_mpu_regions+0x20>)
    1e86:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1e88:	2101      	movs	r1, #1
    1e8a:	f003 ff89 	bl	5da0 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    1e8e:	bd08      	pop	{r3, pc}
    1e90:	2000152c 	.word	0x2000152c
    1e94:	150b0000 	.word	0x150b0000

00001e98 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1e98:	4a08      	ldr	r2, [pc, #32]	; (1ebc <region_init+0x24>)
    1e9a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e9e:	680b      	ldr	r3, [r1, #0]
    1ea0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1ea4:	4303      	orrs	r3, r0
    1ea6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1eaa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1eae:	688b      	ldr	r3, [r1, #8]
    1eb0:	f043 0301 	orr.w	r3, r3, #1
    1eb4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    1eb8:	4770      	bx	lr
    1eba:	bf00      	nop
    1ebc:	e000ed00 	.word	0xe000ed00

00001ec0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1ec0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1ec2:	4c03      	ldr	r4, [pc, #12]	; (1ed0 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1ec4:	2301      	movs	r3, #1
    1ec6:	7822      	ldrb	r2, [r4, #0]
    1ec8:	f003 ff3e 	bl	5d48 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1ecc:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1ece:	bd10      	pop	{r4, pc}
    1ed0:	20001cd8 	.word	0x20001cd8

00001ed4 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1ed4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1ed6:	2300      	movs	r3, #0
    1ed8:	4a09      	ldr	r2, [pc, #36]	; (1f00 <mpu_configure_dynamic_mpu_regions+0x2c>)
    1eda:	7812      	ldrb	r2, [r2, #0]
    1edc:	f003 ff34 	bl	5d48 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1ee0:	f110 0f16 	cmn.w	r0, #22
    1ee4:	d00a      	beq.n	1efc <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1ee6:	4603      	mov	r3, r0
    1ee8:	e006      	b.n	1ef8 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    1eea:	4a06      	ldr	r2, [pc, #24]	; (1f04 <mpu_configure_dynamic_mpu_regions+0x30>)
    1eec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1ef0:	2100      	movs	r1, #0
    1ef2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1ef6:	3301      	adds	r3, #1
    1ef8:	2b07      	cmp	r3, #7
    1efa:	ddf6      	ble.n	1eea <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    1efc:	bd08      	pop	{r3, pc}
    1efe:	bf00      	nop
    1f00:	20001cd8 	.word	0x20001cd8
    1f04:	e000ed00 	.word	0xe000ed00

00001f08 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1f08:	4b04      	ldr	r3, [pc, #16]	; (1f1c <arm_core_mpu_enable+0x14>)
    1f0a:	2205      	movs	r2, #5
    1f0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1f10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f14:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1f18:	4770      	bx	lr
    1f1a:	bf00      	nop
    1f1c:	e000ed00 	.word	0xe000ed00

00001f20 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1f20:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1f24:	4b02      	ldr	r3, [pc, #8]	; (1f30 <arm_core_mpu_disable+0x10>)
    1f26:	2200      	movs	r2, #0
    1f28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1f2c:	4770      	bx	lr
    1f2e:	bf00      	nop
    1f30:	e000ed00 	.word	0xe000ed00

00001f34 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1f34:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1f36:	4b0e      	ldr	r3, [pc, #56]	; (1f70 <z_arm_mpu_init+0x3c>)
    1f38:	681d      	ldr	r5, [r3, #0]
    1f3a:	2d08      	cmp	r5, #8
    1f3c:	d815      	bhi.n	1f6a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1f3e:	f7ff ffef 	bl	1f20 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1f42:	2400      	movs	r4, #0
    1f44:	e009      	b.n	1f5a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1f46:	4b0a      	ldr	r3, [pc, #40]	; (1f70 <z_arm_mpu_init+0x3c>)
    1f48:	6859      	ldr	r1, [r3, #4]
    1f4a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1f4e:	0093      	lsls	r3, r2, #2
    1f50:	4419      	add	r1, r3
    1f52:	4620      	mov	r0, r4
    1f54:	f7ff ffa0 	bl	1e98 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1f58:	3401      	adds	r4, #1
    1f5a:	42a5      	cmp	r5, r4
    1f5c:	d8f3      	bhi.n	1f46 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1f5e:	4b05      	ldr	r3, [pc, #20]	; (1f74 <z_arm_mpu_init+0x40>)
    1f60:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1f62:	f7ff ffd1 	bl	1f08 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1f66:	2000      	movs	r0, #0
}
    1f68:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1f6a:	f04f 30ff 	mov.w	r0, #4294967295
    1f6e:	e7fb      	b.n	1f68 <z_arm_mpu_init+0x34>
    1f70:	00007b38 	.word	0x00007b38
    1f74:	20001cd8 	.word	0x20001cd8

00001f78 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1f78:	4b01      	ldr	r3, [pc, #4]	; (1f80 <__stdout_hook_install+0x8>)
    1f7a:	6018      	str	r0, [r3, #0]
}
    1f7c:	4770      	bx	lr
    1f7e:	bf00      	nop
    1f80:	20000030 	.word	0x20000030

00001f84 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    1f84:	b40c      	push	{r2, r3}
    1f86:	b510      	push	{r4, lr}
    1f88:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    1f8a:	460b      	mov	r3, r1
    1f8c:	b909      	cbnz	r1, 1f92 <snprintf+0xe>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    1f8e:	f10d 000b 	add.w	r0, sp, #11
	}

	p.ptr = str;
    1f92:	9003      	str	r0, [sp, #12]
	p.len = (int) len;
    1f94:	9304      	str	r3, [sp, #16]

	va_start(vargs, format);
    1f96:	ab09      	add	r3, sp, #36	; 0x24
    1f98:	9305      	str	r3, [sp, #20]
    1f9a:	2400      	movs	r4, #0
    1f9c:	9400      	str	r4, [sp, #0]
    1f9e:	9a08      	ldr	r2, [sp, #32]
    1fa0:	a903      	add	r1, sp, #12
    1fa2:	4805      	ldr	r0, [pc, #20]	; (1fb8 <snprintf+0x34>)
    1fa4:	f7fe fe8c 	bl	cc0 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    1fa8:	9b03      	ldr	r3, [sp, #12]
    1faa:	701c      	strb	r4, [r3, #0]
	return r;
}
    1fac:	b006      	add	sp, #24
    1fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1fb2:	b002      	add	sp, #8
    1fb4:	4770      	bx	lr
    1fb6:	bf00      	nop
    1fb8:	00005f9b 	.word	0x00005f9b

00001fbc <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    1fbc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1fc0:	4905      	ldr	r1, [pc, #20]	; (1fd8 <__NVIC_SystemReset+0x1c>)
    1fc2:	68ca      	ldr	r2, [r1, #12]
    1fc4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1fc8:	4b04      	ldr	r3, [pc, #16]	; (1fdc <__NVIC_SystemReset+0x20>)
    1fca:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1fcc:	60cb      	str	r3, [r1, #12]
    1fce:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1fd2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1fd4:	e7fd      	b.n	1fd2 <__NVIC_SystemReset+0x16>
    1fd6:	bf00      	nop
    1fd8:	e000ed00 	.word	0xe000ed00
    1fdc:	05fa0004 	.word	0x05fa0004

00001fe0 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
    1fe0:	b510      	push	{r4, lr}
	__asm__ volatile(
    1fe2:	f04f 0320 	mov.w	r3, #32
    1fe6:	f3ef 8411 	mrs	r4, BASEPRI
    1fea:	f383 8812 	msr	BASEPRI_MAX, r3
    1fee:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1ff2:	2301      	movs	r3, #1
    1ff4:	4a0c      	ldr	r2, [pc, #48]	; (2028 <nordicsemi_nrf52_init+0x48>)
    1ff6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1ffe:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2002:	f003 ffd7 	bl	5fb4 <nrf52_errata_197>
    2006:	b120      	cbz	r0, 2012 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    200c:	2201      	movs	r2, #1
    200e:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2016:	2201      	movs	r2, #1
    2018:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    201c:	f384 8811 	msr	BASEPRI, r4
    2020:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2024:	2000      	movs	r0, #0
    2026:	bd10      	pop	{r4, pc}
    2028:	4001e000 	.word	0x4001e000

0000202c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    202c:	b130      	cbz	r0, 203c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    202e:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2030:	4b03      	ldr	r3, [pc, #12]	; (2040 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2032:	0180      	lsls	r0, r0, #6
    2034:	f043 0301 	orr.w	r3, r3, #1
    2038:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    203a:	bd08      	pop	{r3, pc}
    203c:	4770      	bx	lr
    203e:	bf00      	nop
    2040:	000075a0 	.word	0x000075a0

00002044 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    2044:	4800      	ldr	r0, [pc, #0]	; (2048 <get_hf_flags+0x4>)
    2046:	4770      	bx	lr
    2048:	2000158c 	.word	0x2000158c

0000204c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    204c:	4b03      	ldr	r3, [pc, #12]	; (205c <get_subsys+0x10>)
    204e:	1ac0      	subs	r0, r0, r3
    2050:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    2052:	4b03      	ldr	r3, [pc, #12]	; (2060 <get_subsys+0x14>)
    2054:	fb03 f000 	mul.w	r0, r3, r0
    2058:	4770      	bx	lr
    205a:	bf00      	nop
    205c:	2000154c 	.word	0x2000154c
    2060:	b6db6db7 	.word	0xb6db6db7

00002064 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2064:	b538      	push	{r3, r4, r5, lr}
    2066:	4605      	mov	r5, r0
    2068:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    206a:	f7ff ffef 	bl	204c <get_subsys>
    206e:	4601      	mov	r1, r0
    2070:	2240      	movs	r2, #64	; 0x40
    2072:	4803      	ldr	r0, [pc, #12]	; (2080 <onoff_stop+0x1c>)
    2074:	f004 f863 	bl	613e <stop>
    2078:	4601      	mov	r1, r0
	notify(mgr, res);
    207a:	4628      	mov	r0, r5
    207c:	47a0      	blx	r4
}
    207e:	bd38      	pop	{r3, r4, r5, pc}
    2080:	000072d4 	.word	0x000072d4

00002084 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2084:	b530      	push	{r4, r5, lr}
    2086:	b083      	sub	sp, #12
    2088:	4605      	mov	r5, r0
    208a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    208c:	f7ff ffde 	bl	204c <get_subsys>
    2090:	4601      	mov	r1, r0
    2092:	2340      	movs	r3, #64	; 0x40
    2094:	9300      	str	r3, [sp, #0]
    2096:	4623      	mov	r3, r4
    2098:	4a05      	ldr	r2, [pc, #20]	; (20b0 <onoff_start+0x2c>)
    209a:	4806      	ldr	r0, [pc, #24]	; (20b4 <onoff_start+0x30>)
    209c:	f004 f869 	bl	6172 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    20a0:	1e01      	subs	r1, r0, #0
    20a2:	db01      	blt.n	20a8 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    20a4:	b003      	add	sp, #12
    20a6:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    20a8:	4628      	mov	r0, r5
    20aa:	47a0      	blx	r4
}
    20ac:	e7fa      	b.n	20a4 <onoff_start+0x20>
    20ae:	bf00      	nop
    20b0:	000061bb 	.word	0x000061bb
    20b4:	000072d4 	.word	0x000072d4

000020b8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    20b8:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    20ba:	b110      	cbz	r0, 20c2 <clock_event_handler+0xa>
    20bc:	2801      	cmp	r0, #1
    20be:	d00d      	beq.n	20dc <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    20c0:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    20c2:	2100      	movs	r1, #0
    20c4:	4808      	ldr	r0, [pc, #32]	; (20e8 <clock_event_handler+0x30>)
    20c6:	f003 ffc5 	bl	6054 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    20ca:	6883      	ldr	r3, [r0, #8]
    20cc:	f013 0f07 	tst.w	r3, #7
    20d0:	d1f6      	bne.n	20c0 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    20d2:	2100      	movs	r1, #0
    20d4:	4804      	ldr	r0, [pc, #16]	; (20e8 <clock_event_handler+0x30>)
    20d6:	f004 f820 	bl	611a <clkstarted_handle>
    20da:	e7f1      	b.n	20c0 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    20dc:	2101      	movs	r1, #1
    20de:	4802      	ldr	r0, [pc, #8]	; (20e8 <clock_event_handler+0x30>)
    20e0:	f004 f81b 	bl	611a <clkstarted_handle>
}
    20e4:	e7ec      	b.n	20c0 <clock_event_handler+0x8>
    20e6:	bf00      	nop
    20e8:	000072d4 	.word	0x000072d4

000020ec <generic_hfclk_start>:
{
    20ec:	b510      	push	{r4, lr}
    20ee:	b082      	sub	sp, #8
	__asm__ volatile(
    20f0:	f04f 0320 	mov.w	r3, #32
    20f4:	f3ef 8411 	mrs	r4, BASEPRI
    20f8:	f383 8812 	msr	BASEPRI_MAX, r3
    20fc:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2100:	4a14      	ldr	r2, [pc, #80]	; (2154 <generic_hfclk_start+0x68>)
    2102:	6813      	ldr	r3, [r2, #0]
    2104:	f043 0102 	orr.w	r1, r3, #2
    2108:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    210a:	f013 0f01 	tst.w	r3, #1
    210e:	d109      	bne.n	2124 <generic_hfclk_start+0x38>
	bool already_started = false;
    2110:	2300      	movs	r3, #0
	__asm__ volatile(
    2112:	f384 8811 	msr	BASEPRI, r4
    2116:	f3bf 8f6f 	isb	sy
	if (already_started) {
    211a:	b9b3      	cbnz	r3, 214a <generic_hfclk_start+0x5e>
	hfclk_start();
    211c:	f004 f855 	bl	61ca <hfclk_start>
}
    2120:	b002      	add	sp, #8
    2122:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    2124:	f10d 0207 	add.w	r2, sp, #7
    2128:	2101      	movs	r1, #1
    212a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    212e:	f003 ff6e 	bl	600e <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2132:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2136:	2b01      	cmp	r3, #1
    2138:	d001      	beq.n	213e <generic_hfclk_start+0x52>
	bool already_started = false;
    213a:	2300      	movs	r3, #0
    213c:	e7e9      	b.n	2112 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    213e:	f7ff ff81 	bl	2044 <get_hf_flags>
    2142:	f003 ffd7 	bl	60f4 <set_on_state>
			already_started = true;
    2146:	2301      	movs	r3, #1
    2148:	e7e3      	b.n	2112 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    214a:	2100      	movs	r1, #0
    214c:	4802      	ldr	r0, [pc, #8]	; (2158 <generic_hfclk_start+0x6c>)
    214e:	f003 ffe4 	bl	611a <clkstarted_handle>
		return;
    2152:	e7e5      	b.n	2120 <generic_hfclk_start+0x34>
    2154:	2000159c 	.word	0x2000159c
    2158:	000072d4 	.word	0x000072d4

0000215c <generic_hfclk_stop>:
{
    215c:	b510      	push	{r4, lr}
	__asm__ volatile(
    215e:	f04f 0320 	mov.w	r3, #32
    2162:	f3ef 8411 	mrs	r4, BASEPRI
    2166:	f383 8812 	msr	BASEPRI_MAX, r3
    216a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    216e:	4a08      	ldr	r2, [pc, #32]	; (2190 <generic_hfclk_stop+0x34>)
    2170:	6813      	ldr	r3, [r2, #0]
    2172:	f023 0102 	bic.w	r1, r3, #2
    2176:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    2178:	f013 0f01 	tst.w	r3, #1
    217c:	d004      	beq.n	2188 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
    217e:	f384 8811 	msr	BASEPRI, r4
    2182:	f3bf 8f6f 	isb	sy
}
    2186:	bd10      	pop	{r4, pc}
		hfclk_stop();
    2188:	f004 f829 	bl	61de <hfclk_stop>
    218c:	e7f7      	b.n	217e <generic_hfclk_stop+0x22>
    218e:	bf00      	nop
    2190:	2000159c 	.word	0x2000159c

00002194 <lfclk_spinwait>:
{
    2194:	b570      	push	{r4, r5, r6, lr}
    2196:	b082      	sub	sp, #8
    2198:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    219a:	2801      	cmp	r0, #1
    219c:	d107      	bne.n	21ae <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    219e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21a2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    21a6:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    21aa:	2b01      	cmp	r3, #1
    21ac:	d04c      	beq.n	2248 <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    21ae:	f004 fea1 	bl	6ef4 <k_is_in_isr>
    21b2:	4604      	mov	r4, r0
    21b4:	b918      	cbnz	r0, 21be <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    21b6:	4b28      	ldr	r3, [pc, #160]	; (2258 <lfclk_spinwait+0xc4>)
    21b8:	781b      	ldrb	r3, [r3, #0]
    21ba:	2b00      	cmp	r3, #0
    21bc:	d139      	bne.n	2232 <lfclk_spinwait+0x9e>
	__asm__ volatile(
    21be:	f04f 0320 	mov.w	r3, #32
    21c2:	f3ef 8611 	mrs	r6, BASEPRI
    21c6:	f383 8812 	msr	BASEPRI_MAX, r3
    21ca:	f3bf 8f6f 	isb	sy
    21ce:	2401      	movs	r4, #1
	if (!isr_mode) {
    21d0:	b924      	cbnz	r4, 21dc <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
    21d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21d6:	2202      	movs	r2, #2
    21d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    21dc:	aa01      	add	r2, sp, #4
    21de:	2100      	movs	r1, #0
    21e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    21e4:	f003 ff13 	bl	600e <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    21e8:	b120      	cbz	r0, 21f4 <lfclk_spinwait+0x60>
		 && ((type == target_type)
    21ea:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    21ec:	2b01      	cmp	r3, #1
    21ee:	d026      	beq.n	223e <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    21f0:	2d01      	cmp	r5, #1
    21f2:	d024      	beq.n	223e <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    21f4:	b1fc      	cbz	r4, 2236 <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    21f6:	4630      	mov	r0, r6
    21f8:	f7ff faa4 	bl	1744 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    21fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2200:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2204:	2b00      	cmp	r3, #0
    2206:	d1e9      	bne.n	21dc <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    220c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2210:	2b00      	cmp	r3, #0
    2212:	d0e3      	beq.n	21dc <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2218:	2200      	movs	r2, #0
    221a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    221e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2222:	2201      	movs	r2, #1
    2224:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2228:	490c      	ldr	r1, [pc, #48]	; (225c <lfclk_spinwait+0xc8>)
    222a:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    222e:	609a      	str	r2, [r3, #8]
}
    2230:	e7d4      	b.n	21dc <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
    2232:	2600      	movs	r6, #0
    2234:	e7cc      	b.n	21d0 <lfclk_spinwait+0x3c>
				k_msleep(1);
    2236:	2001      	movs	r0, #1
    2238:	f003 ffdb 	bl	61f2 <k_msleep>
    223c:	e7de      	b.n	21fc <lfclk_spinwait+0x68>
	if (isr_mode) {
    223e:	b12c      	cbz	r4, 224c <lfclk_spinwait+0xb8>
	__asm__ volatile(
    2240:	f386 8811 	msr	BASEPRI, r6
    2244:	f3bf 8f6f 	isb	sy
}
    2248:	b002      	add	sp, #8
    224a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    224c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2250:	2202      	movs	r2, #2
    2252:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2256:	e7f7      	b.n	2248 <lfclk_spinwait+0xb4>
    2258:	20001cde 	.word	0x20001cde
    225c:	e000e100 	.word	0xe000e100

00002260 <api_blocking_start>:
{
    2260:	b500      	push	{lr}
    2262:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2264:	f8cd d000 	str.w	sp, [sp]
    2268:	f8cd d004 	str.w	sp, [sp, #4]
    226c:	2300      	movs	r3, #0
    226e:	9302      	str	r3, [sp, #8]
    2270:	2301      	movs	r3, #1
    2272:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2274:	466b      	mov	r3, sp
    2276:	4a07      	ldr	r2, [pc, #28]	; (2294 <api_blocking_start+0x34>)
    2278:	f003 ff97 	bl	61aa <api_start>
	if (err < 0) {
    227c:	2800      	cmp	r0, #0
    227e:	db05      	blt.n	228c <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    2280:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2284:	2300      	movs	r3, #0
    2286:	4668      	mov	r0, sp
    2288:	f002 f8f6 	bl	4478 <z_impl_k_sem_take>
}
    228c:	b005      	add	sp, #20
    228e:	f85d fb04 	ldr.w	pc, [sp], #4
    2292:	bf00      	nop
    2294:	0000621f 	.word	0x0000621f

00002298 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2298:	b570      	push	{r4, r5, r6, lr}
    229a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    229c:	2200      	movs	r2, #0
    229e:	2101      	movs	r1, #1
    22a0:	4610      	mov	r0, r2
    22a2:	f003 fcdc 	bl	5c5e <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    22a6:	4811      	ldr	r0, [pc, #68]	; (22ec <clk_init+0x54>)
    22a8:	f000 ffe8 	bl	327c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    22ac:	4b10      	ldr	r3, [pc, #64]	; (22f0 <clk_init+0x58>)
    22ae:	4298      	cmp	r0, r3
    22b0:	d119      	bne.n	22e6 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    22b2:	f004 fca7 	bl	6c04 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    22b6:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    22b8:	2c01      	cmp	r4, #1
    22ba:	d812      	bhi.n	22e2 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    22bc:	4621      	mov	r1, r4
    22be:	4630      	mov	r0, r6
    22c0:	f003 fec8 	bl	6054 <get_sub_data>
    22c4:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    22c6:	4621      	mov	r1, r4
    22c8:	4630      	mov	r0, r6
    22ca:	f003 fece 	bl	606a <get_onoff_manager>
    22ce:	4909      	ldr	r1, [pc, #36]	; (22f4 <clk_init+0x5c>)
    22d0:	f003 f9ad 	bl	562e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    22d4:	2800      	cmp	r0, #0
    22d6:	db05      	blt.n	22e4 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    22d8:	2301      	movs	r3, #1
    22da:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    22dc:	441c      	add	r4, r3
    22de:	b2e4      	uxtb	r4, r4
    22e0:	e7ea      	b.n	22b8 <clk_init+0x20>
	}

	return 0;
    22e2:	2000      	movs	r0, #0
}
    22e4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    22e6:	f06f 0004 	mvn.w	r0, #4
    22ea:	e7fb      	b.n	22e4 <clk_init+0x4c>
    22ec:	000020b9 	.word	0x000020b9
    22f0:	0bad0000 	.word	0x0bad0000
    22f4:	00007b6c 	.word	0x00007b6c

000022f8 <z_nrf_clock_control_lf_on>:
{
    22f8:	b510      	push	{r4, lr}
    22fa:	4604      	mov	r4, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    22fc:	4b10      	ldr	r3, [pc, #64]	; (2340 <z_nrf_clock_control_lf_on+0x48>)
    22fe:	2101      	movs	r1, #1
    2300:	f3bf 8f5b 	dmb	ish
    2304:	e853 2f00 	ldrex	r2, [r3]
    2308:	e843 1000 	strex	r0, r1, [r3]
    230c:	2800      	cmp	r0, #0
    230e:	d1f9      	bne.n	2304 <z_nrf_clock_control_lf_on+0xc>
    2310:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2314:	b11a      	cbz	r2, 231e <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    2316:	1e63      	subs	r3, r4, #1
    2318:	2b01      	cmp	r3, #1
    231a:	d90d      	bls.n	2338 <z_nrf_clock_control_lf_on+0x40>
}
    231c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    231e:	4809      	ldr	r0, [pc, #36]	; (2344 <z_nrf_clock_control_lf_on+0x4c>)
    2320:	f003 fea3 	bl	606a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2324:	4908      	ldr	r1, [pc, #32]	; (2348 <z_nrf_clock_control_lf_on+0x50>)
    2326:	2300      	movs	r3, #0
    2328:	604b      	str	r3, [r1, #4]
    232a:	608b      	str	r3, [r1, #8]
    232c:	60cb      	str	r3, [r1, #12]
    232e:	2301      	movs	r3, #1
    2330:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    2332:	f003 f999 	bl	5668 <onoff_request>
    2336:	e7ee      	b.n	2316 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    2338:	4620      	mov	r0, r4
    233a:	f7ff ff2b 	bl	2194 <lfclk_spinwait>
		break;
    233e:	e7ed      	b.n	231c <z_nrf_clock_control_lf_on+0x24>
    2340:	20001548 	.word	0x20001548
    2344:	000072d4 	.word	0x000072d4
    2348:	20001538 	.word	0x20001538

0000234c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    234c:	b510      	push	{r4, lr}
    234e:	4604      	mov	r4, r0
			 */
			return c;
		}
	}

	if ('\n' == c) {
    2350:	280a      	cmp	r0, #10
    2352:	d006      	beq.n	2362 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    2354:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    2356:	4806      	ldr	r0, [pc, #24]	; (2370 <console_out+0x24>)
    2358:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    235a:	69db      	ldr	r3, [r3, #28]
    235c:	4798      	blx	r3
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
    235e:	4620      	mov	r0, r4
    2360:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    2362:	4803      	ldr	r0, [pc, #12]	; (2370 <console_out+0x24>)
    2364:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2366:	69db      	ldr	r3, [r3, #28]
    2368:	210d      	movs	r1, #13
    236a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    236c:	e7f2      	b.n	2354 <console_out+0x8>
    236e:	bf00      	nop
    2370:	00007334 	.word	0x00007334

00002374 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    2374:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    2376:	4c04      	ldr	r4, [pc, #16]	; (2388 <uart_console_hook_install+0x14>)
    2378:	4620      	mov	r0, r4
    237a:	f7ff fdfd 	bl	1f78 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    237e:	4620      	mov	r0, r4
    2380:	f7fe fb72 	bl	a68 <__printk_hook_install>
#endif
}
    2384:	bd10      	pop	{r4, pc}
    2386:	bf00      	nop
    2388:	0000234d 	.word	0x0000234d

0000238c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    238c:	b508      	push	{r3, lr}
    238e:	4805      	ldr	r0, [pc, #20]	; (23a4 <uart_console_init+0x18>)
    2390:	f004 fd17 	bl	6dc2 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2394:	b118      	cbz	r0, 239e <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    2396:	f7ff ffed 	bl	2374 <uart_console_hook_install>

	return 0;
    239a:	2000      	movs	r0, #0
}
    239c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    239e:	f06f 0012 	mvn.w	r0, #18
    23a2:	e7fb      	b.n	239c <uart_console_init+0x10>
    23a4:	00007334 	.word	0x00007334

000023a8 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    23a8:	b128      	cbz	r0, 23b6 <get_dev+0xe>
    23aa:	2801      	cmp	r0, #1
    23ac:	d101      	bne.n	23b2 <get_dev+0xa>
    23ae:	4803      	ldr	r0, [pc, #12]	; (23bc <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    23b0:	4770      	bx	lr
	const struct device *dev = NULL;
    23b2:	2000      	movs	r0, #0
    23b4:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    23b6:	4802      	ldr	r0, [pc, #8]	; (23c0 <get_dev+0x18>)
    23b8:	4770      	bx	lr
    23ba:	bf00      	nop
    23bc:	000072ec 	.word	0x000072ec
    23c0:	00007304 	.word	0x00007304

000023c4 <gpio_nrfx_pin_interrupt_configure>:
{
    23c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23c6:	b085      	sub	sp, #20
    23c8:	460e      	mov	r6, r1
    23ca:	4619      	mov	r1, r3
	return port->config;
    23cc:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    23ce:	7b1b      	ldrb	r3, [r3, #12]
    23d0:	f006 051f 	and.w	r5, r6, #31
    23d4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    23d8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    23dc:	d022      	beq.n	2424 <gpio_nrfx_pin_interrupt_configure+0x60>
    23de:	4607      	mov	r7, r0
    23e0:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    23e2:	2300      	movs	r3, #0
    23e4:	9301      	str	r3, [sp, #4]
    23e6:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    23e8:	4610      	mov	r0, r2
    23ea:	f003 fffa 	bl	63e2 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    23ee:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    23f2:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    23f4:	6899      	ldr	r1, [r3, #8]
    23f6:	40f1      	lsrs	r1, r6
    23f8:	f011 0f01 	tst.w	r1, #1
    23fc:	d102      	bne.n	2404 <gpio_nrfx_pin_interrupt_configure+0x40>
    23fe:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    2402:	d014      	beq.n	242e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2404:	2300      	movs	r3, #0
    2406:	aa01      	add	r2, sp, #4
    2408:	4619      	mov	r1, r3
    240a:	4628      	mov	r0, r5
    240c:	f001 f9e0 	bl	37d0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2410:	4b1b      	ldr	r3, [pc, #108]	; (2480 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    2412:	4298      	cmp	r0, r3
    2414:	d131      	bne.n	247a <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2416:	2101      	movs	r1, #1
    2418:	4628      	mov	r0, r5
    241a:	f001 fb39 	bl	3a90 <nrfx_gpiote_trigger_enable>
	return 0;
    241e:	2000      	movs	r0, #0
}
    2420:	b005      	add	sp, #20
    2422:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    2424:	4628      	mov	r0, r5
    2426:	f001 fb65 	bl	3af4 <nrfx_gpiote_trigger_disable>
		return 0;
    242a:	2000      	movs	r0, #0
    242c:	e7f8      	b.n	2420 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    242e:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    2432:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2434:	2a01      	cmp	r2, #1
    2436:	d014      	beq.n	2462 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    2438:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    243c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2444:	f013 0f01 	tst.w	r3, #1
    2448:	d1dc      	bne.n	2404 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    244a:	f10d 010f 	add.w	r1, sp, #15
    244e:	4628      	mov	r0, r5
    2450:	f001 fac2 	bl	39d8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2454:	4b0b      	ldr	r3, [pc, #44]	; (2484 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    2456:	4298      	cmp	r0, r3
    2458:	d005      	beq.n	2466 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    245a:	f10d 030f 	add.w	r3, sp, #15
    245e:	9302      	str	r3, [sp, #8]
    2460:	e7d0      	b.n	2404 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    2462:	4a09      	ldr	r2, [pc, #36]	; (2488 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2464:	e7ea      	b.n	243c <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    2466:	f10d 000f 	add.w	r0, sp, #15
    246a:	f001 fb09 	bl	3a80 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    246e:	4b04      	ldr	r3, [pc, #16]	; (2480 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    2470:	4298      	cmp	r0, r3
    2472:	d0f2      	beq.n	245a <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    2474:	f06f 000b 	mvn.w	r0, #11
    2478:	e7d2      	b.n	2420 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    247a:	f06f 0015 	mvn.w	r0, #21
    247e:	e7cf      	b.n	2420 <gpio_nrfx_pin_interrupt_configure+0x5c>
    2480:	0bad0000 	.word	0x0bad0000
    2484:	0bad0004 	.word	0x0bad0004
    2488:	50000300 	.word	0x50000300

0000248c <gpio_nrfx_pin_configure>:
{
    248c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2490:	b086      	sub	sp, #24
    2492:	460e      	mov	r6, r1
    2494:	4614      	mov	r4, r2
	return port->config;
    2496:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    249a:	f898 300c 	ldrb.w	r3, [r8, #12]
    249e:	f001 051f 	and.w	r5, r1, #31
    24a2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    24a6:	f10d 0117 	add.w	r1, sp, #23
    24aa:	4628      	mov	r0, r5
    24ac:	f001 fa94 	bl	39d8 <nrfx_gpiote_channel_get>
    24b0:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    24b2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    24b6:	d03a      	beq.n	252e <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    24b8:	2100      	movs	r1, #0
    24ba:	9103      	str	r1, [sp, #12]
    24bc:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    24be:	460b      	mov	r3, r1
    24c0:	aa03      	add	r2, sp, #12
    24c2:	4628      	mov	r0, r5
    24c4:	f001 f984 	bl	37d0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    24c8:	4b33      	ldr	r3, [pc, #204]	; (2598 <gpio_nrfx_pin_configure+0x10c>)
    24ca:	4298      	cmp	r0, r3
    24cc:	d161      	bne.n	2592 <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    24ce:	429f      	cmp	r7, r3
    24d0:	d03d      	beq.n	254e <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    24d2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    24d6:	d049      	beq.n	256c <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    24d8:	f10d 0103 	add.w	r1, sp, #3
    24dc:	4620      	mov	r0, r4
    24de:	f003 ff05 	bl	62ec <get_drive>
		if (rv != 0) {
    24e2:	4607      	mov	r7, r0
    24e4:	bb50      	cbnz	r0, 253c <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    24e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24ea:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    24ee:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    24f2:	bf0c      	ite	eq
    24f4:	2301      	moveq	r3, #1
    24f6:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    24f8:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    24fc:	4620      	mov	r0, r4
    24fe:	f003 ff38 	bl	6372 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    2502:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2506:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    250a:	d025      	beq.n	2558 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    250c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2510:	2301      	movs	r3, #1
    2512:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2514:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2518:	2200      	movs	r2, #0
    251a:	a901      	add	r1, sp, #4
    251c:	4628      	mov	r0, r5
    251e:	f001 f9eb 	bl	38f8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2522:	4b1d      	ldr	r3, [pc, #116]	; (2598 <gpio_nrfx_pin_configure+0x10c>)
    2524:	4298      	cmp	r0, r3
    2526:	d009      	beq.n	253c <gpio_nrfx_pin_configure+0xb0>
    2528:	f06f 0715 	mvn.w	r7, #21
    252c:	e006      	b.n	253c <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    252e:	4628      	mov	r0, r5
    2530:	f001 fb02 	bl	3b38 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    2534:	4b18      	ldr	r3, [pc, #96]	; (2598 <gpio_nrfx_pin_configure+0x10c>)
    2536:	429f      	cmp	r7, r3
    2538:	d004      	beq.n	2544 <gpio_nrfx_pin_configure+0xb8>
		return 0;
    253a:	2700      	movs	r7, #0
}
    253c:	4638      	mov	r0, r7
    253e:	b006      	add	sp, #24
    2540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    2544:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2548:	f001 fa92 	bl	3a70 <nrfx_gpiote_channel_free>
    254c:	e7f5      	b.n	253a <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    254e:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2552:	f001 fa8d 	bl	3a70 <nrfx_gpiote_channel_free>
    2556:	e7bc      	b.n	24d2 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2558:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    255c:	d0dc      	beq.n	2518 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    255e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2562:	2301      	movs	r3, #1
    2564:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    2566:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    256a:	e7d5      	b.n	2518 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    256c:	4620      	mov	r0, r4
    256e:	f003 ff00 	bl	6372 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    2572:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2576:	2300      	movs	r3, #0
    2578:	461a      	mov	r2, r3
    257a:	a902      	add	r1, sp, #8
    257c:	4628      	mov	r0, r5
    257e:	f001 f927 	bl	37d0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2582:	4b05      	ldr	r3, [pc, #20]	; (2598 <gpio_nrfx_pin_configure+0x10c>)
    2584:	4298      	cmp	r0, r3
    2586:	d101      	bne.n	258c <gpio_nrfx_pin_configure+0x100>
    2588:	2700      	movs	r7, #0
    258a:	e7d7      	b.n	253c <gpio_nrfx_pin_configure+0xb0>
    258c:	f06f 0715 	mvn.w	r7, #21
    2590:	e7d4      	b.n	253c <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    2592:	f06f 0715 	mvn.w	r7, #21
    2596:	e7d1      	b.n	253c <gpio_nrfx_pin_configure+0xb0>
    2598:	0bad0000 	.word	0x0bad0000

0000259c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    259c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    259e:	f001 fa5d 	bl	3a5c <nrfx_gpiote_is_init>
    25a2:	b108      	cbz	r0, 25a8 <gpio_nrfx_init+0xc>
		return 0;
    25a4:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    25a6:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    25a8:	f001 fa2e 	bl	3a08 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    25ac:	4b08      	ldr	r3, [pc, #32]	; (25d0 <gpio_nrfx_init+0x34>)
    25ae:	4298      	cmp	r0, r3
    25b0:	d10a      	bne.n	25c8 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    25b2:	2100      	movs	r1, #0
    25b4:	4807      	ldr	r0, [pc, #28]	; (25d4 <gpio_nrfx_init+0x38>)
    25b6:	f001 fa09 	bl	39cc <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    25ba:	2200      	movs	r2, #0
    25bc:	2105      	movs	r1, #5
    25be:	2006      	movs	r0, #6
    25c0:	f003 fb4d 	bl	5c5e <z_arm_irq_priority_set>
	return 0;
    25c4:	2000      	movs	r0, #0
    25c6:	e7ee      	b.n	25a6 <gpio_nrfx_init+0xa>
		return -EIO;
    25c8:	f06f 0004 	mvn.w	r0, #4
    25cc:	e7eb      	b.n	25a6 <gpio_nrfx_init+0xa>
    25ce:	bf00      	nop
    25d0:	0bad0000 	.word	0x0bad0000
    25d4:	0000641b 	.word	0x0000641b

000025d8 <nrf_gpio_pin_write>:
    if (value == 0)
    25d8:	b969      	cbnz	r1, 25f6 <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
    25da:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    25de:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    25e0:	2801      	cmp	r0, #1
    25e2:	d006      	beq.n	25f2 <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
    25e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    25e8:	2301      	movs	r3, #1
    25ea:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    25ec:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    25f0:	4770      	bx	lr
        case 1: return NRF_P1;
    25f2:	4a08      	ldr	r2, [pc, #32]	; (2614 <nrf_gpio_pin_write+0x3c>)
    25f4:	e7f8      	b.n	25e8 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
    25f6:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    25fa:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    25fc:	2801      	cmp	r0, #1
    25fe:	d006      	beq.n	260e <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
    2600:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2604:	2301      	movs	r3, #1
    2606:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2608:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    260c:	4770      	bx	lr
        case 1: return NRF_P1;
    260e:	4a01      	ldr	r2, [pc, #4]	; (2614 <nrf_gpio_pin_write+0x3c>)
    2610:	e7f8      	b.n	2604 <nrf_gpio_pin_write+0x2c>
    2612:	bf00      	nop
    2614:	50000300 	.word	0x50000300

00002618 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    261c:	b083      	sub	sp, #12
    261e:	4680      	mov	r8, r0
    2620:	468b      	mov	fp, r1
    2622:	9201      	str	r2, [sp, #4]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2624:	2500      	movs	r5, #0
    2626:	e02b      	b.n	2680 <pinctrl_configure_pins+0x68>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    2628:	f04f 34ff 	mov.w	r4, #4294967295
    262c:	e035      	b.n	269a <pinctrl_configure_pins+0x82>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    262e:	9b01      	ldr	r3, [sp, #4]
    2630:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2634:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2636:	463e      	mov	r6, r7
			write = 1U;
    2638:	4639      	mov	r1, r7
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    263a:	2c7f      	cmp	r4, #127	; 0x7f
    263c:	d01e      	beq.n	267c <pinctrl_configure_pins+0x64>
			if (write != NO_WRITE) {
    263e:	f1b1 3fff 	cmp.w	r1, #4294967295
    2642:	f040 811f 	bne.w	2884 <pinctrl_configure_pins+0x26c>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2646:	f858 300a 	ldr.w	r3, [r8, sl]
    264a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    264e:	d001      	beq.n	2654 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2650:	2701      	movs	r7, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    2652:	2600      	movs	r6, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2654:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    *p_pin = pin_number & 0x1F;
    2658:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    265c:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    265e:	2c01      	cmp	r4, #1
    2660:	f000 8114 	beq.w	288c <pinctrl_configure_pins+0x274>
        case 0: return NRF_P0;
    2664:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2668:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    266c:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2670:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    2674:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    2678:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    267c:	3501      	adds	r5, #1
    267e:	b2ed      	uxtb	r5, r5
    2680:	455d      	cmp	r5, fp
    2682:	f080 8105 	bcs.w	2890 <pinctrl_configure_pins+0x278>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2686:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    268a:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    268e:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2692:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    2696:	2c7f      	cmp	r4, #127	; 0x7f
    2698:	d0c6      	beq.n	2628 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    269a:	0c1b      	lsrs	r3, r3, #16
    269c:	2b22      	cmp	r3, #34	; 0x22
    269e:	f200 80f9 	bhi.w	2894 <pinctrl_configure_pins+0x27c>
    26a2:	a201      	add	r2, pc, #4	; (adr r2, 26a8 <pinctrl_configure_pins+0x90>)
    26a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    26a8:	0000262f 	.word	0x0000262f
    26ac:	00002735 	.word	0x00002735
    26b0:	00002745 	.word	0x00002745
    26b4:	00002753 	.word	0x00002753
    26b8:	00002763 	.word	0x00002763
    26bc:	00002771 	.word	0x00002771
    26c0:	0000277f 	.word	0x0000277f
    26c4:	00002895 	.word	0x00002895
    26c8:	00002895 	.word	0x00002895
    26cc:	00002895 	.word	0x00002895
    26d0:	00002895 	.word	0x00002895
    26d4:	0000278f 	.word	0x0000278f
    26d8:	000027a5 	.word	0x000027a5
    26dc:	00002895 	.word	0x00002895
    26e0:	00002895 	.word	0x00002895
    26e4:	00002895 	.word	0x00002895
    26e8:	00002895 	.word	0x00002895
    26ec:	00002895 	.word	0x00002895
    26f0:	00002895 	.word	0x00002895
    26f4:	00002895 	.word	0x00002895
    26f8:	00002895 	.word	0x00002895
    26fc:	00002895 	.word	0x00002895
    2700:	000027bb 	.word	0x000027bb
    2704:	000027cf 	.word	0x000027cf
    2708:	000027e3 	.word	0x000027e3
    270c:	000027f7 	.word	0x000027f7
    2710:	00002895 	.word	0x00002895
    2714:	00002895 	.word	0x00002895
    2718:	00002895 	.word	0x00002895
    271c:	0000280b 	.word	0x0000280b
    2720:	0000281b 	.word	0x0000281b
    2724:	00002829 	.word	0x00002829
    2728:	00002839 	.word	0x00002839
    272c:	00002849 	.word	0x00002849
    2730:	00002859 	.word	0x00002859
			NRF_PSEL_UART(reg, RXD) = pin;
    2734:	9b01      	ldr	r3, [sp, #4]
    2736:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    273a:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    273c:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    273e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2742:	e77a      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, RTS) = pin;
    2744:	9b01      	ldr	r3, [sp, #4]
    2746:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    274a:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    274c:	463e      	mov	r6, r7
			write = 1U;
    274e:	4639      	mov	r1, r7
			break;
    2750:	e773      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, CTS) = pin;
    2752:	9b01      	ldr	r3, [sp, #4]
    2754:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2758:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    275a:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    275c:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2760:	e76b      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    2762:	9b01      	ldr	r3, [sp, #4]
    2764:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2768:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    276a:	2601      	movs	r6, #1
			write = 0U;
    276c:	4639      	mov	r1, r7
			break;
    276e:	e764      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    2770:	9b01      	ldr	r3, [sp, #4]
    2772:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2776:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2778:	463e      	mov	r6, r7
			write = 0U;
    277a:	2100      	movs	r1, #0
			break;
    277c:	e75d      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    277e:	9b01      	ldr	r3, [sp, #4]
    2780:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2784:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2786:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    2788:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    278c:	e755      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    278e:	9b01      	ldr	r3, [sp, #4]
    2790:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2794:	f1b9 0f00 	cmp.w	r9, #0
    2798:	d066      	beq.n	2868 <pinctrl_configure_pins+0x250>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    279a:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    279c:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    279e:	f04f 31ff 	mov.w	r1, #4294967295
    27a2:	e74a      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    27a4:	9b01      	ldr	r3, [sp, #4]
    27a6:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    27aa:	f1b9 0f00 	cmp.w	r9, #0
    27ae:	d062      	beq.n	2876 <pinctrl_configure_pins+0x25e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    27b0:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    27b2:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    27b4:	f04f 31ff 	mov.w	r1, #4294967295
    27b8:	e73f      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    27ba:	9b01      	ldr	r3, [sp, #4]
    27bc:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    27c0:	f858 100a 	ldr.w	r1, [r8, sl]
    27c4:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27c8:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    27ca:	463e      	mov	r6, r7
			break;
    27cc:	e735      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    27ce:	9b01      	ldr	r3, [sp, #4]
    27d0:	f8c3 4564 	str.w	r4, [r3, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    27d4:	f858 100a 	ldr.w	r1, [r8, sl]
    27d8:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27dc:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    27de:	463e      	mov	r6, r7
			break;
    27e0:	e72b      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    27e2:	9b01      	ldr	r3, [sp, #4]
    27e4:	f8c3 4568 	str.w	r4, [r3, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    27e8:	f858 100a 	ldr.w	r1, [r8, sl]
    27ec:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27f0:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    27f2:	463e      	mov	r6, r7
			break;
    27f4:	e721      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    27f6:	9b01      	ldr	r3, [sp, #4]
    27f8:	f8c3 456c 	str.w	r4, [r3, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    27fc:	f858 100a 	ldr.w	r1, [r8, sl]
    2800:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2804:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2806:	463e      	mov	r6, r7
			break;
    2808:	e717      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    280a:	9b01      	ldr	r3, [sp, #4]
    280c:	f8c3 4524 	str.w	r4, [r3, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2810:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2812:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    2814:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2818:	e70f      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    281a:	9b01      	ldr	r3, [sp, #4]
    281c:	f8c3 4528 	str.w	r4, [r3, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2820:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2822:	463e      	mov	r6, r7
			write = 1U;
    2824:	4639      	mov	r1, r7
			break;
    2826:	e708      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    2828:	9b01      	ldr	r3, [sp, #4]
    282a:	f8c3 4530 	str.w	r4, [r3, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    282e:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2830:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    2832:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2836:	e700      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    2838:	9b01      	ldr	r3, [sp, #4]
    283a:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    283e:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2840:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    2842:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2846:	e6f8      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    2848:	9b01      	ldr	r3, [sp, #4]
    284a:	f8c3 4538 	str.w	r4, [r3, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    284e:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2850:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    2852:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2856:	e6f0      	b.n	263a <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    2858:	9b01      	ldr	r3, [sp, #4]
    285a:	f8c3 453c 	str.w	r4, [r3, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    285e:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2860:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    2862:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2866:	e6e8      	b.n	263a <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2868:	464f      	mov	r7, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    286a:	464e      	mov	r6, r9
		uint32_t write = NO_WRITE;
    286c:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    2870:	f04f 0906 	mov.w	r9, #6
    2874:	e6e1      	b.n	263a <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2876:	464f      	mov	r7, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2878:	464e      	mov	r6, r9
		uint32_t write = NO_WRITE;
    287a:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    287e:	f04f 0906 	mov.w	r9, #6
    2882:	e6da      	b.n	263a <pinctrl_configure_pins+0x22>
				nrf_gpio_pin_write(pin, write);
    2884:	4620      	mov	r0, r4
    2886:	f7ff fea7 	bl	25d8 <nrf_gpio_pin_write>
    288a:	e6dc      	b.n	2646 <pinctrl_configure_pins+0x2e>
        case 1: return NRF_P1;
    288c:	4904      	ldr	r1, [pc, #16]	; (28a0 <pinctrl_configure_pins+0x288>)
    288e:	e6eb      	b.n	2668 <pinctrl_configure_pins+0x50>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2890:	2000      	movs	r0, #0
    2892:	e001      	b.n	2898 <pinctrl_configure_pins+0x280>
		switch (NRF_GET_FUN(pins[i])) {
    2894:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2898:	b003      	add	sp, #12
    289a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    289e:	bf00      	nop
    28a0:	50000300 	.word	0x50000300

000028a4 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    28a4:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    28a6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    28a8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    28ac:	d06f      	beq.n	298e <baudrate_set+0xea>
    28ae:	d83a      	bhi.n	2926 <baudrate_set+0x82>
    28b0:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    28b4:	d06e      	beq.n	2994 <baudrate_set+0xf0>
    28b6:	d90a      	bls.n	28ce <baudrate_set+0x2a>
    28b8:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    28bc:	d075      	beq.n	29aa <baudrate_set+0x106>
    28be:	d924      	bls.n	290a <baudrate_set+0x66>
    28c0:	f647 2312 	movw	r3, #31250	; 0x7a12
    28c4:	4299      	cmp	r1, r3
    28c6:	d12b      	bne.n	2920 <baudrate_set+0x7c>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    28c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    28cc:	e013      	b.n	28f6 <baudrate_set+0x52>
	switch (baudrate) {
    28ce:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    28d2:	d061      	beq.n	2998 <baudrate_set+0xf4>
    28d4:	d907      	bls.n	28e6 <baudrate_set+0x42>
    28d6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    28da:	d063      	beq.n	29a4 <baudrate_set+0x100>
    28dc:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    28e0:	d110      	bne.n	2904 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    28e2:	4b3c      	ldr	r3, [pc, #240]	; (29d4 <baudrate_set+0x130>)
    28e4:	e007      	b.n	28f6 <baudrate_set+0x52>
	switch (baudrate) {
    28e6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    28ea:	d058      	beq.n	299e <baudrate_set+0xfa>
    28ec:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    28f0:	d105      	bne.n	28fe <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    28f2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    28f6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    28fa:	2000      	movs	r0, #0
    28fc:	4770      	bx	lr
	switch (baudrate) {
    28fe:	f06f 0015 	mvn.w	r0, #21
    2902:	4770      	bx	lr
    2904:	f06f 0015 	mvn.w	r0, #21
    2908:	4770      	bx	lr
    290a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    290e:	d04e      	beq.n	29ae <baudrate_set+0x10a>
    2910:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2914:	d101      	bne.n	291a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2916:	4b30      	ldr	r3, [pc, #192]	; (29d8 <baudrate_set+0x134>)
    2918:	e7ed      	b.n	28f6 <baudrate_set+0x52>
	switch (baudrate) {
    291a:	f06f 0015 	mvn.w	r0, #21
    291e:	4770      	bx	lr
    2920:	f06f 0015 	mvn.w	r0, #21
    2924:	4770      	bx	lr
    2926:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    292a:	d042      	beq.n	29b2 <baudrate_set+0x10e>
    292c:	d909      	bls.n	2942 <baudrate_set+0x9e>
    292e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2932:	d046      	beq.n	29c2 <baudrate_set+0x11e>
    2934:	d91f      	bls.n	2976 <baudrate_set+0xd2>
    2936:	4b29      	ldr	r3, [pc, #164]	; (29dc <baudrate_set+0x138>)
    2938:	4299      	cmp	r1, r3
    293a:	d148      	bne.n	29ce <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    293c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2940:	e7d9      	b.n	28f6 <baudrate_set+0x52>
	switch (baudrate) {
    2942:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2946:	d037      	beq.n	29b8 <baudrate_set+0x114>
    2948:	d905      	bls.n	2956 <baudrate_set+0xb2>
    294a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    294e:	d10f      	bne.n	2970 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2950:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2954:	e7cf      	b.n	28f6 <baudrate_set+0x52>
	switch (baudrate) {
    2956:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    295a:	4299      	cmp	r1, r3
    295c:	d02e      	beq.n	29bc <baudrate_set+0x118>
    295e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    2962:	d102      	bne.n	296a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2964:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2968:	e7c5      	b.n	28f6 <baudrate_set+0x52>
	switch (baudrate) {
    296a:	f06f 0015 	mvn.w	r0, #21
    296e:	4770      	bx	lr
    2970:	f06f 0015 	mvn.w	r0, #21
    2974:	4770      	bx	lr
    2976:	4b1a      	ldr	r3, [pc, #104]	; (29e0 <baudrate_set+0x13c>)
    2978:	4299      	cmp	r1, r3
    297a:	d025      	beq.n	29c8 <baudrate_set+0x124>
    297c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    2980:	d102      	bne.n	2988 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2982:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2986:	e7b6      	b.n	28f6 <baudrate_set+0x52>
	switch (baudrate) {
    2988:	f06f 0015 	mvn.w	r0, #21
    298c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    298e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2992:	e7b0      	b.n	28f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2994:	4b13      	ldr	r3, [pc, #76]	; (29e4 <baudrate_set+0x140>)
    2996:	e7ae      	b.n	28f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2998:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    299c:	e7ab      	b.n	28f6 <baudrate_set+0x52>
	switch (baudrate) {
    299e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    29a2:	e7a8      	b.n	28f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    29a4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    29a8:	e7a5      	b.n	28f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    29aa:	4b0f      	ldr	r3, [pc, #60]	; (29e8 <baudrate_set+0x144>)
    29ac:	e7a3      	b.n	28f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    29ae:	4b0f      	ldr	r3, [pc, #60]	; (29ec <baudrate_set+0x148>)
    29b0:	e7a1      	b.n	28f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    29b2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    29b6:	e79e      	b.n	28f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    29b8:	4b0d      	ldr	r3, [pc, #52]	; (29f0 <baudrate_set+0x14c>)
    29ba:	e79c      	b.n	28f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    29bc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    29c0:	e799      	b.n	28f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    29c2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    29c6:	e796      	b.n	28f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    29c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    29cc:	e793      	b.n	28f6 <baudrate_set+0x52>
	switch (baudrate) {
    29ce:	f06f 0015 	mvn.w	r0, #21
}
    29d2:	4770      	bx	lr
    29d4:	0013b000 	.word	0x0013b000
    29d8:	004ea000 	.word	0x004ea000
    29dc:	000f4240 	.word	0x000f4240
    29e0:	0003d090 	.word	0x0003d090
    29e4:	00275000 	.word	0x00275000
    29e8:	0075c000 	.word	0x0075c000
    29ec:	003af000 	.word	0x003af000
    29f0:	013a9000 	.word	0x013a9000

000029f4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    29f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29f6:	4605      	mov	r5, r0
    29f8:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    29fa:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    29fc:	f004 fa7a 	bl	6ef4 <k_is_in_isr>
    2a00:	b910      	cbnz	r0, 2a08 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2a02:	4b12      	ldr	r3, [pc, #72]	; (2a4c <uarte_nrfx_poll_out+0x58>)
    2a04:	781b      	ldrb	r3, [r3, #0]
    2a06:	b983      	cbnz	r3, 2a2a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2a08:	f04f 0320 	mov.w	r3, #32
    2a0c:	f3ef 8411 	mrs	r4, BASEPRI
    2a10:	f383 8812 	msr	BASEPRI_MAX, r3
    2a14:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2a18:	4628      	mov	r0, r5
    2a1a:	f003 fdf2 	bl	6602 <is_tx_ready>
    2a1e:	b940      	cbnz	r0, 2a32 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2a20:	f384 8811 	msr	BASEPRI, r4
    2a24:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2a28:	e7ee      	b.n	2a08 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    2a2a:	4628      	mov	r0, r5
    2a2c:	f003 ff1a 	bl	6864 <wait_tx_ready>
    2a30:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    2a32:	697b      	ldr	r3, [r7, #20]
    2a34:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    2a36:	2201      	movs	r2, #1
    2a38:	6979      	ldr	r1, [r7, #20]
    2a3a:	4628      	mov	r0, r5
    2a3c:	f003 fdfb 	bl	6636 <tx_start>
	__asm__ volatile(
    2a40:	f384 8811 	msr	BASEPRI, r4
    2a44:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a4a:	bf00      	nop
    2a4c:	20001cde 	.word	0x20001cde

00002a50 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    2a50:	b538      	push	{r3, r4, r5, lr}
    2a52:	4604      	mov	r4, r0
    2a54:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2a56:	f101 001c 	add.w	r0, r1, #28
    2a5a:	f001 f8c1 	bl	3be0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2a5e:	4b0c      	ldr	r3, [pc, #48]	; (2a90 <endtx_stoptx_ppi_init+0x40>)
    2a60:	4298      	cmp	r0, r3
    2a62:	d111      	bne.n	2a88 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2a64:	7f2b      	ldrb	r3, [r5, #28]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2a66:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    2a6a:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2a6c:	4a09      	ldr	r2, [pc, #36]	; (2a94 <endtx_stoptx_ppi_init+0x44>)
    2a6e:	33a2      	adds	r3, #162	; 0xa2
    2a70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2a74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2a78:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2a7a:	7f29      	ldrb	r1, [r5, #28]
    2a7c:	2301      	movs	r3, #1
    2a7e:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    2a80:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    2a84:	2000      	movs	r0, #0
}
    2a86:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    2a88:	f06f 0004 	mvn.w	r0, #4
    2a8c:	e7fb      	b.n	2a86 <endtx_stoptx_ppi_init+0x36>
    2a8e:	bf00      	nop
    2a90:	0bad0000 	.word	0x0bad0000
    2a94:	4001f000 	.word	0x4001f000

00002a98 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2a98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    2a9c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2aa0:	4b01      	ldr	r3, [pc, #4]	; (2aa8 <set_comparator+0x10>)
    2aa2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    2aa6:	4770      	bx	lr
    2aa8:	40011000 	.word	0x40011000

00002aac <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2ab0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2ab2:	4a02      	ldr	r2, [pc, #8]	; (2abc <event_enable+0x10>)
    2ab4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    2ab8:	4770      	bx	lr
    2aba:	bf00      	nop
    2abc:	40011000 	.word	0x40011000

00002ac0 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2ac4:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2ac6:	4a02      	ldr	r2, [pc, #8]	; (2ad0 <event_disable+0x10>)
    2ac8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    2acc:	4770      	bx	lr
    2ace:	bf00      	nop
    2ad0:	40011000 	.word	0x40011000

00002ad4 <counter>:
     return p_reg->COUNTER;
    2ad4:	4b01      	ldr	r3, [pc, #4]	; (2adc <counter+0x8>)
    2ad6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    2ada:	4770      	bx	lr
    2adc:	40011000 	.word	0x40011000

00002ae0 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
    2ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ae4:	4606      	mov	r6, r0
    2ae6:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
    2ae8:	f7ff ffea 	bl	2ac0 <event_disable>
	event_clear(chan);
    2aec:	4630      	mov	r0, r6
    2aee:	f003 ff71 	bl	69d4 <event_clear>
	uint32_t cc_val = req_cc;
    2af2:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    2af4:	2703      	movs	r7, #3
    2af6:	e001      	b.n	2afc <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
    2af8:	193d      	adds	r5, r7, r4
			cc_inc++;
    2afa:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
    2afc:	4629      	mov	r1, r5
    2afe:	4630      	mov	r0, r6
    2b00:	f7ff ffca 	bl	2a98 <set_comparator>
		event_enable(chan);
    2b04:	4630      	mov	r0, r6
    2b06:	f7ff ffd1 	bl	2aac <event_enable>
		now = counter();
    2b0a:	f7ff ffe3 	bl	2ad4 <counter>
    2b0e:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2b10:	1cc1      	adds	r1, r0, #3
    2b12:	4628      	mov	r0, r5
    2b14:	f003 ff4d 	bl	69b2 <counter_sub>
    2b18:	4b0b      	ldr	r3, [pc, #44]	; (2b48 <set_alarm+0x68>)
    2b1a:	4298      	cmp	r0, r3
    2b1c:	d911      	bls.n	2b42 <set_alarm+0x62>
			if (event_check(chan)) {
    2b1e:	4630      	mov	r0, r6
    2b20:	f003 ff4b 	bl	69ba <event_check>
    2b24:	2800      	cmp	r0, #0
    2b26:	d0e7      	beq.n	2af8 <set_alarm+0x18>
				now = counter();
    2b28:	f7ff ffd4 	bl	2ad4 <counter>
    2b2c:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    2b2e:	4641      	mov	r1, r8
    2b30:	f003 ff3f 	bl	69b2 <counter_sub>
    2b34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2b38:	d903      	bls.n	2b42 <set_alarm+0x62>
					event_clear(chan);
    2b3a:	4630      	mov	r0, r6
    2b3c:	f003 ff4a 	bl	69d4 <event_clear>
    2b40:	e7da      	b.n	2af8 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
    2b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b46:	bf00      	nop
    2b48:	007ffffd 	.word	0x007ffffd

00002b4c <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
    2b4c:	4b03      	ldr	r3, [pc, #12]	; (2b5c <int_event_disable_rtc+0x10>)
    2b4e:	4a04      	ldr	r2, [pc, #16]	; (2b60 <int_event_disable_rtc+0x14>)
    2b50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2b54:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
    2b58:	4770      	bx	lr
    2b5a:	bf00      	nop
    2b5c:	40011000 	.word	0x40011000
    2b60:	000f0003 	.word	0x000f0003

00002b64 <compare_int_lock>:
{
    2b64:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2b66:	2301      	movs	r3, #1
    2b68:	4083      	lsls	r3, r0
    2b6a:	ea6f 0c03 	mvn.w	ip, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2b6e:	4a0e      	ldr	r2, [pc, #56]	; (2ba8 <compare_int_lock+0x44>)
    2b70:	f3bf 8f5b 	dmb	ish
    2b74:	e852 1f00 	ldrex	r1, [r2]
    2b78:	ea01 0e0c 	and.w	lr, r1, ip
    2b7c:	e842 e400 	strex	r4, lr, [r2]
    2b80:	2c00      	cmp	r4, #0
    2b82:	d1f7      	bne.n	2b74 <compare_int_lock+0x10>
    2b84:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2b88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2b8c:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    2b8e:	4807      	ldr	r0, [pc, #28]	; (2bac <compare_int_lock+0x48>)
    2b90:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2b94:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b98:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    2b9c:	420b      	tst	r3, r1
}
    2b9e:	bf14      	ite	ne
    2ba0:	2001      	movne	r0, #1
    2ba2:	2000      	moveq	r0, #0
    2ba4:	bd10      	pop	{r4, pc}
    2ba6:	bf00      	nop
    2ba8:	200015fc 	.word	0x200015fc
    2bac:	40011000 	.word	0x40011000

00002bb0 <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2bb4:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
    2bb6:	4a14      	ldr	r2, [pc, #80]	; (2c08 <channel_processing_check_and_clear+0x58>)
    2bb8:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    2bbc:	4213      	tst	r3, r2
    2bbe:	d101      	bne.n	2bc4 <channel_processing_check_and_clear+0x14>
	return false;
    2bc0:	2000      	movs	r0, #0
}
    2bc2:	4770      	bx	lr
{
    2bc4:	b510      	push	{r4, lr}
    2bc6:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    2bc8:	2301      	movs	r3, #1
    2bca:	4083      	lsls	r3, r0
    2bcc:	43db      	mvns	r3, r3
    2bce:	490f      	ldr	r1, [pc, #60]	; (2c0c <channel_processing_check_and_clear+0x5c>)
    2bd0:	f3bf 8f5b 	dmb	ish
    2bd4:	e851 2f00 	ldrex	r2, [r1]
    2bd8:	ea02 0003 	and.w	r0, r2, r3
    2bdc:	e841 0c00 	strex	ip, r0, [r1]
    2be0:	f1bc 0f00 	cmp.w	ip, #0
    2be4:	d1f6      	bne.n	2bd4 <channel_processing_check_and_clear+0x24>
    2be6:	f3bf 8f5b 	dmb	ish
    2bea:	fa22 f304 	lsr.w	r3, r2, r4
    2bee:	f013 0f01 	tst.w	r3, #1
    2bf2:	d103      	bne.n	2bfc <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
    2bf4:	4620      	mov	r0, r4
    2bf6:	f003 fee0 	bl	69ba <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    2bfa:	b118      	cbz	r0, 2c04 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
    2bfc:	4620      	mov	r0, r4
    2bfe:	f003 fee9 	bl	69d4 <event_clear>
			return true;
    2c02:	2001      	movs	r0, #1
}
    2c04:	bd10      	pop	{r4, pc}
    2c06:	bf00      	nop
    2c08:	40011000 	.word	0x40011000
    2c0c:	200015f8 	.word	0x200015f8

00002c10 <compare_int_unlock>:
	if (key) {
    2c10:	b901      	cbnz	r1, 2c14 <compare_int_unlock+0x4>
}
    2c12:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    2c14:	2301      	movs	r3, #1
    2c16:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2c18:	4a11      	ldr	r2, [pc, #68]	; (2c60 <compare_int_unlock+0x50>)
    2c1a:	f3bf 8f5b 	dmb	ish
    2c1e:	e852 cf00 	ldrex	ip, [r2]
    2c22:	ea4c 0c03 	orr.w	ip, ip, r3
    2c26:	e842 c100 	strex	r1, ip, [r2]
    2c2a:	2900      	cmp	r1, #0
    2c2c:	d1f7      	bne.n	2c1e <compare_int_unlock+0xe>
    2c2e:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2c36:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2c38:	4a0a      	ldr	r2, [pc, #40]	; (2c64 <compare_int_unlock+0x54>)
    2c3a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2c3e:	f3bf 8f5b 	dmb	ish
    2c42:	4b09      	ldr	r3, [pc, #36]	; (2c68 <compare_int_unlock+0x58>)
    2c44:	681b      	ldr	r3, [r3, #0]
    2c46:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2c4a:	40c3      	lsrs	r3, r0
    2c4c:	f013 0f01 	tst.w	r3, #1
    2c50:	d0df      	beq.n	2c12 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c52:	4b06      	ldr	r3, [pc, #24]	; (2c6c <compare_int_unlock+0x5c>)
    2c54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2c58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2c5c:	e7d9      	b.n	2c12 <compare_int_unlock+0x2>
    2c5e:	bf00      	nop
    2c60:	200015fc 	.word	0x200015fc
    2c64:	40011000 	.word	0x40011000
    2c68:	200015f8 	.word	0x200015f8
    2c6c:	e000e100 	.word	0xe000e100

00002c70 <sys_clock_timeout_handler>:
{
    2c70:	b538      	push	{r3, r4, r5, lr}
    2c72:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    2c74:	4610      	mov	r0, r2
    2c76:	4619      	mov	r1, r3
    2c78:	f003 feb8 	bl	69ec <absolute_time_to_cc>
    2c7c:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    2c7e:	490d      	ldr	r1, [pc, #52]	; (2cb4 <sys_clock_timeout_handler+0x44>)
    2c80:	680b      	ldr	r3, [r1, #0]
    2c82:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
    2c84:	181b      	adds	r3, r3, r0
    2c86:	684c      	ldr	r4, [r1, #4]
    2c88:	f144 0400 	adc.w	r4, r4, #0
    2c8c:	600b      	str	r3, [r1, #0]
    2c8e:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2c90:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2c94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2c98:	d209      	bcs.n	2cae <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2c9a:	4b07      	ldr	r3, [pc, #28]	; (2cb8 <sys_clock_timeout_handler+0x48>)
    2c9c:	681b      	ldr	r3, [r3, #0]
    2c9e:	0a19      	lsrs	r1, r3, #8
    2ca0:	061b      	lsls	r3, r3, #24
    2ca2:	18d4      	adds	r4, r2, r3
    2ca4:	f141 0500 	adc.w	r5, r1, #0
    2ca8:	4b04      	ldr	r3, [pc, #16]	; (2cbc <sys_clock_timeout_handler+0x4c>)
    2caa:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
    2cae:	f002 f88b 	bl	4dc8 <sys_clock_announce>
}
    2cb2:	bd38      	pop	{r3, r4, r5, pc}
    2cb4:	20000218 	.word	0x20000218
    2cb8:	20001600 	.word	0x20001600
    2cbc:	20000220 	.word	0x20000220

00002cc0 <z_nrf_rtc_timer_read>:
{
    2cc0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2cc2:	4b0d      	ldr	r3, [pc, #52]	; (2cf8 <z_nrf_rtc_timer_read+0x38>)
    2cc4:	681c      	ldr	r4, [r3, #0]
    2cc6:	0a25      	lsrs	r5, r4, #8
    2cc8:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2cca:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    2cce:	f7ff ff01 	bl	2ad4 <counter>
    2cd2:	4603      	mov	r3, r0
	val += cntr;
    2cd4:	1900      	adds	r0, r0, r4
    2cd6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2cde:	d20a      	bcs.n	2cf6 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2ce0:	4b06      	ldr	r3, [pc, #24]	; (2cfc <z_nrf_rtc_timer_read+0x3c>)
    2ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ce6:	4290      	cmp	r0, r2
    2ce8:	eb71 0303 	sbcs.w	r3, r1, r3
    2cec:	d203      	bcs.n	2cf6 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    2cee:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2cf2:	f141 0100 	adc.w	r1, r1, #0
}
    2cf6:	bd38      	pop	{r3, r4, r5, pc}
    2cf8:	20001600 	.word	0x20001600
    2cfc:	20000220 	.word	0x20000220

00002d00 <compare_set_nolocks>:
{
    2d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d02:	4606      	mov	r6, r0
    2d04:	4614      	mov	r4, r2
    2d06:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2d08:	4610      	mov	r0, r2
    2d0a:	4619      	mov	r1, r3
    2d0c:	f003 fe6e 	bl	69ec <absolute_time_to_cc>
    2d10:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2d12:	f7ff ffd5 	bl	2cc0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2d16:	42a0      	cmp	r0, r4
    2d18:	eb71 0305 	sbcs.w	r3, r1, r5
    2d1c:	d215      	bcs.n	2d4a <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    2d1e:	1a20      	subs	r0, r4, r0
    2d20:	eb65 0101 	sbc.w	r1, r5, r1
    2d24:	4b17      	ldr	r3, [pc, #92]	; (2d84 <compare_set_nolocks+0x84>)
    2d26:	4298      	cmp	r0, r3
    2d28:	f171 0100 	sbcs.w	r1, r1, #0
    2d2c:	d227      	bcs.n	2d7e <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
    2d2e:	4b16      	ldr	r3, [pc, #88]	; (2d88 <compare_set_nolocks+0x88>)
    2d30:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2d34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2d38:	42ab      	cmp	r3, r5
    2d3a:	bf08      	it	eq
    2d3c:	42a2      	cmpeq	r2, r4
    2d3e:	d012      	beq.n	2d66 <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
    2d40:	4639      	mov	r1, r7
    2d42:	4630      	mov	r0, r6
    2d44:	f7ff fecc 	bl	2ae0 <set_alarm>
    2d48:	e00d      	b.n	2d66 <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
    2d4a:	2301      	movs	r3, #1
    2d4c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2d4e:	4a0f      	ldr	r2, [pc, #60]	; (2d8c <compare_set_nolocks+0x8c>)
    2d50:	f3bf 8f5b 	dmb	ish
    2d54:	e852 0f00 	ldrex	r0, [r2]
    2d58:	4318      	orrs	r0, r3
    2d5a:	e842 0100 	strex	r1, r0, [r2]
    2d5e:	2900      	cmp	r1, #0
    2d60:	d1f8      	bne.n	2d54 <compare_set_nolocks+0x54>
    2d62:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    2d66:	4b08      	ldr	r3, [pc, #32]	; (2d88 <compare_set_nolocks+0x88>)
    2d68:	0132      	lsls	r2, r6, #4
    2d6a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    2d6e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    2d72:	9906      	ldr	r1, [sp, #24]
    2d74:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2d76:	9b07      	ldr	r3, [sp, #28]
    2d78:	6073      	str	r3, [r6, #4]
	return ret;
    2d7a:	2000      	movs	r0, #0
}
    2d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    2d7e:	f06f 0015 	mvn.w	r0, #21
    2d82:	e7fb      	b.n	2d7c <compare_set_nolocks+0x7c>
    2d84:	00800001 	.word	0x00800001
    2d88:	20000208 	.word	0x20000208
    2d8c:	200015f8 	.word	0x200015f8

00002d90 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    2d90:	b530      	push	{r4, r5, lr}
    2d92:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
    2d94:	f7ff feda 	bl	2b4c <int_event_disable_rtc>
    p_reg->PRESCALER = val;
    2d98:	2300      	movs	r3, #0
    2d9a:	4a1d      	ldr	r2, [pc, #116]	; (2e10 <sys_clock_driver_init+0x80>)
    2d9c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2da0:	2b00      	cmp	r3, #0
    2da2:	dd24      	ble.n	2dee <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
    2da4:	4c1a      	ldr	r4, [pc, #104]	; (2e10 <sys_clock_driver_init+0x80>)
    2da6:	2502      	movs	r5, #2
    2da8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2dac:	4b19      	ldr	r3, [pc, #100]	; (2e14 <sys_clock_driver_init+0x84>)
    2dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2db2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2db6:	2200      	movs	r2, #0
    2db8:	2101      	movs	r1, #1
    2dba:	2011      	movs	r0, #17
    2dbc:	f002 ff4f 	bl	5c5e <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2dc0:	2011      	movs	r0, #17
    2dc2:	f002 ff42 	bl	5c4a <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2dc6:	2301      	movs	r3, #1
    2dc8:	60a3      	str	r3, [r4, #8]
    2dca:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2dcc:	4a12      	ldr	r2, [pc, #72]	; (2e18 <sys_clock_driver_init+0x88>)
    2dce:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2dd0:	2400      	movs	r4, #0
    2dd2:	9401      	str	r4, [sp, #4]
    2dd4:	4b11      	ldr	r3, [pc, #68]	; (2e1c <sys_clock_driver_init+0x8c>)
    2dd6:	9300      	str	r3, [sp, #0]
    2dd8:	4a11      	ldr	r2, [pc, #68]	; (2e20 <sys_clock_driver_init+0x90>)
    2dda:	2300      	movs	r3, #0
    2ddc:	4620      	mov	r0, r4
    2dde:	f003 fe16 	bl	6a0e <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2de2:	4628      	mov	r0, r5
    2de4:	f7ff fa88 	bl	22f8 <z_nrf_clock_control_lf_on>

	return 0;
}
    2de8:	4620      	mov	r0, r4
    2dea:	b003      	add	sp, #12
    2dec:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2dee:	4a0d      	ldr	r2, [pc, #52]	; (2e24 <sys_clock_driver_init+0x94>)
    2df0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2df4:	f04f 30ff 	mov.w	r0, #4294967295
    2df8:	f04f 31ff 	mov.w	r1, #4294967295
    2dfc:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2e00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2e04:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2e06:	4902      	ldr	r1, [pc, #8]	; (2e10 <sys_clock_driver_init+0x80>)
    2e08:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2e0c:	3301      	adds	r3, #1
    2e0e:	e7c7      	b.n	2da0 <sys_clock_driver_init+0x10>
    2e10:	40011000 	.word	0x40011000
    2e14:	e000e100 	.word	0xe000e100
    2e18:	200015fc 	.word	0x200015fc
    2e1c:	00002c71 	.word	0x00002c71
    2e20:	007fffff 	.word	0x007fffff
    2e24:	20000208 	.word	0x20000208

00002e28 <process_channel>:
{
    2e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e2c:	b082      	sub	sp, #8
    2e2e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2e30:	f7ff febe 	bl	2bb0 <channel_processing_check_and_clear>
    2e34:	b910      	cbnz	r0, 2e3c <process_channel+0x14>
}
    2e36:	b002      	add	sp, #8
    2e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2e3c:	f7ff ff40 	bl	2cc0 <z_nrf_rtc_timer_read>
    2e40:	4682      	mov	sl, r0
    2e42:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    2e44:	f003 fdd5 	bl	69f2 <full_int_lock>
    2e48:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    2e4a:	4b15      	ldr	r3, [pc, #84]	; (2ea0 <process_channel+0x78>)
    2e4c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2e50:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2e54:	45c2      	cmp	sl, r8
    2e56:	eb75 0509 	sbcs.w	r5, r5, r9
    2e5a:	d20b      	bcs.n	2e74 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2e5c:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    2e5e:	4630      	mov	r0, r6
    2e60:	f003 fdd0 	bl	6a04 <full_int_unlock>
		if (handler) {
    2e64:	2d00      	cmp	r5, #0
    2e66:	d0e6      	beq.n	2e36 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2e68:	9700      	str	r7, [sp, #0]
    2e6a:	4642      	mov	r2, r8
    2e6c:	464b      	mov	r3, r9
    2e6e:	4620      	mov	r0, r4
    2e70:	47a8      	blx	r5
}
    2e72:	e7e0      	b.n	2e36 <process_channel+0xe>
			handler = cc_data[chan].callback;
    2e74:	4a0a      	ldr	r2, [pc, #40]	; (2ea0 <process_channel+0x78>)
    2e76:	0123      	lsls	r3, r4, #4
    2e78:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2e7c:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    2e7e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    2e80:	2000      	movs	r0, #0
    2e82:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2e84:	f04f 32ff 	mov.w	r2, #4294967295
    2e88:	f04f 33ff 	mov.w	r3, #4294967295
    2e8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2e90:	4620      	mov	r0, r4
    2e92:	f7ff fe15 	bl	2ac0 <event_disable>
			event_clear(chan);
    2e96:	4620      	mov	r0, r4
    2e98:	f003 fd9c 	bl	69d4 <event_clear>
    2e9c:	e7df      	b.n	2e5e <process_channel+0x36>
    2e9e:	bf00      	nop
    2ea0:	20000208 	.word	0x20000208

00002ea4 <rtc_nrf_isr>:
{
    2ea4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    2ea6:	4b0e      	ldr	r3, [pc, #56]	; (2ee0 <rtc_nrf_isr+0x3c>)
    2ea8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2eac:	f013 0f02 	tst.w	r3, #2
    2eb0:	d00d      	beq.n	2ece <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2eb2:	4b0b      	ldr	r3, [pc, #44]	; (2ee0 <rtc_nrf_isr+0x3c>)
    2eb4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2eb8:	b14b      	cbz	r3, 2ece <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2eba:	4b09      	ldr	r3, [pc, #36]	; (2ee0 <rtc_nrf_isr+0x3c>)
    2ebc:	2200      	movs	r2, #0
    2ebe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2ec2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    2ec6:	4a07      	ldr	r2, [pc, #28]	; (2ee4 <rtc_nrf_isr+0x40>)
    2ec8:	6813      	ldr	r3, [r2, #0]
    2eca:	3301      	adds	r3, #1
    2ecc:	6013      	str	r3, [r2, #0]
{
    2ece:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2ed0:	2c00      	cmp	r4, #0
    2ed2:	dd00      	ble.n	2ed6 <rtc_nrf_isr+0x32>
}
    2ed4:	bd10      	pop	{r4, pc}
		process_channel(chan);
    2ed6:	4620      	mov	r0, r4
    2ed8:	f7ff ffa6 	bl	2e28 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2edc:	3401      	adds	r4, #1
    2ede:	e7f7      	b.n	2ed0 <rtc_nrf_isr+0x2c>
    2ee0:	40011000 	.word	0x40011000
    2ee4:	20001600 	.word	0x20001600

00002ee8 <sys_clock_set_timeout>:
{
    2ee8:	b510      	push	{r4, lr}
    2eea:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
    2eec:	f1b0 3fff 	cmp.w	r0, #4294967295
    2ef0:	d006      	beq.n	2f00 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2ef2:	2801      	cmp	r0, #1
    2ef4:	dd09      	ble.n	2f0a <sys_clock_set_timeout+0x22>
    2ef6:	4b15      	ldr	r3, [pc, #84]	; (2f4c <sys_clock_set_timeout+0x64>)
    2ef8:	4298      	cmp	r0, r3
    2efa:	dc24      	bgt.n	2f46 <sys_clock_set_timeout+0x5e>
    2efc:	4604      	mov	r4, r0
    2efe:	e005      	b.n	2f0c <sys_clock_set_timeout+0x24>
		sys_busy = false;
    2f00:	4b13      	ldr	r3, [pc, #76]	; (2f50 <sys_clock_set_timeout+0x68>)
    2f02:	2200      	movs	r2, #0
    2f04:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
    2f06:	4c13      	ldr	r4, [pc, #76]	; (2f54 <sys_clock_set_timeout+0x6c>)
    2f08:	e003      	b.n	2f12 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2f0a:	2401      	movs	r4, #1
		sys_busy = true;
    2f0c:	4b10      	ldr	r3, [pc, #64]	; (2f50 <sys_clock_set_timeout+0x68>)
    2f0e:	2201      	movs	r2, #1
    2f10:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2f12:	f7ff fed5 	bl	2cc0 <z_nrf_rtc_timer_read>
    2f16:	4b10      	ldr	r3, [pc, #64]	; (2f58 <sys_clock_set_timeout+0x70>)
    2f18:	681a      	ldr	r2, [r3, #0]
    2f1a:	685b      	ldr	r3, [r3, #4]
    2f1c:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    2f1e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2f22:	d300      	bcc.n	2f26 <sys_clock_set_timeout+0x3e>
		cyc = 0;
    2f24:	2400      	movs	r4, #0
	cyc += unannounced;
    2f26:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    2f28:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    2f2c:	d300      	bcc.n	2f30 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
    2f2e:	4c09      	ldr	r4, [pc, #36]	; (2f54 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
    2f30:	2000      	movs	r0, #0
    2f32:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2f34:	9001      	str	r0, [sp, #4]
    2f36:	4909      	ldr	r1, [pc, #36]	; (2f5c <sys_clock_set_timeout+0x74>)
    2f38:	9100      	str	r1, [sp, #0]
    2f3a:	f143 0300 	adc.w	r3, r3, #0
    2f3e:	f003 fd66 	bl	6a0e <compare_set>
}
    2f42:	b002      	add	sp, #8
    2f44:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2f46:	4c03      	ldr	r4, [pc, #12]	; (2f54 <sys_clock_set_timeout+0x6c>)
    2f48:	e7e0      	b.n	2f0c <sys_clock_set_timeout+0x24>
    2f4a:	bf00      	nop
    2f4c:	007ffffe 	.word	0x007ffffe
    2f50:	20001cdd 	.word	0x20001cdd
    2f54:	007fffff 	.word	0x007fffff
    2f58:	20000218 	.word	0x20000218
    2f5c:	00002c71 	.word	0x00002c71

00002f60 <sys_clock_elapsed>:
{
    2f60:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2f62:	f7ff fead 	bl	2cc0 <z_nrf_rtc_timer_read>
    2f66:	4b02      	ldr	r3, [pc, #8]	; (2f70 <sys_clock_elapsed+0x10>)
    2f68:	681b      	ldr	r3, [r3, #0]
}
    2f6a:	1ac0      	subs	r0, r0, r3
    2f6c:	bd08      	pop	{r3, pc}
    2f6e:	bf00      	nop
    2f70:	20000218 	.word	0x20000218

00002f74 <sys_clock_disable>:
{
    2f74:	b508      	push	{r3, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2f76:	4b07      	ldr	r3, [pc, #28]	; (2f94 <sys_clock_disable+0x20>)
    2f78:	2201      	movs	r2, #1
    2f7a:	605a      	str	r2, [r3, #4]
	irq_disable(RTC_IRQn);
    2f7c:	2011      	movs	r0, #17
    2f7e:	f002 fe69 	bl	5c54 <arch_irq_disable>
	int_event_disable_rtc();
    2f82:	f7ff fde3 	bl	2b4c <int_event_disable_rtc>
    2f86:	4b04      	ldr	r3, [pc, #16]	; (2f98 <sys_clock_disable+0x24>)
    2f88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2f8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    2f90:	bd08      	pop	{r3, pc}
    2f92:	bf00      	nop
    2f94:	40011000 	.word	0x40011000
    2f98:	e000e100 	.word	0xe000e100

00002f9c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    2f9c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2fa0:	4905      	ldr	r1, [pc, #20]	; (2fb8 <__NVIC_SystemReset+0x1c>)
    2fa2:	68ca      	ldr	r2, [r1, #12]
    2fa4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2fa8:	4b04      	ldr	r3, [pc, #16]	; (2fbc <__NVIC_SystemReset+0x20>)
    2faa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2fac:	60cb      	str	r3, [r1, #12]
    2fae:	f3bf 8f4f 	dsb	sy
    __NOP();
    2fb2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2fb4:	e7fd      	b.n	2fb2 <__NVIC_SystemReset+0x16>
    2fb6:	bf00      	nop
    2fb8:	e000ed00 	.word	0xe000ed00
    2fbc:	05fa0004 	.word	0x05fa0004

00002fc0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2fc0:	4b02      	ldr	r3, [pc, #8]	; (2fcc <nvmc_wait+0xc>)
    2fc2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d0fa      	beq.n	2fc0 <nvmc_wait>
}
    2fca:	4770      	bx	lr
    2fcc:	4001e000 	.word	0x4001e000

00002fd0 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    2fd0:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2fd2:	4b03      	ldr	r3, [pc, #12]	; (2fe0 <nvmc_config+0x10>)
    2fd4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    2fd8:	f7ff fff2 	bl	2fc0 <nvmc_wait>
}
    2fdc:	bd08      	pop	{r3, pc}
    2fde:	bf00      	nop
    2fe0:	4001e000 	.word	0x4001e000

00002fe4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    2fe4:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2fe6:	f003 fd3b 	bl	6a60 <nrf52_errata_36>
    2fea:	b140      	cbz	r0, 2ffe <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    2fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ff0:	2200      	movs	r2, #0
    2ff2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2ff6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2ffa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2ffe:	f003 fd39 	bl	6a74 <nrf52_errata_66>
    3002:	2800      	cmp	r0, #0
    3004:	d046      	beq.n	3094 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    300a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    300e:	4b4e      	ldr	r3, [pc, #312]	; (3148 <SystemInit+0x164>)
    3010:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3014:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3018:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    301c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3020:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3024:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3028:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    302c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3030:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3034:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3038:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    303c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3040:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3044:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3048:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    304c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3050:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3054:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3058:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    305c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3060:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3064:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3068:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    306c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3070:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3074:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3078:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    307c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3080:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3084:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3088:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    308c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3090:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3094:	f003 fcf8 	bl	6a88 <nrf52_errata_98>
    3098:	b118      	cbz	r0, 30a2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    309a:	4b2c      	ldr	r3, [pc, #176]	; (314c <SystemInit+0x168>)
    309c:	4a2c      	ldr	r2, [pc, #176]	; (3150 <SystemInit+0x16c>)
    309e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    30a2:	f003 fd04 	bl	6aae <nrf52_errata_103>
    30a6:	b118      	cbz	r0, 30b0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    30a8:	4b2a      	ldr	r3, [pc, #168]	; (3154 <SystemInit+0x170>)
    30aa:	22fb      	movs	r2, #251	; 0xfb
    30ac:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    30b0:	f003 fd10 	bl	6ad4 <nrf52_errata_115>
    30b4:	b170      	cbz	r0, 30d4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    30b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    30ba:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    30be:	f023 030f 	bic.w	r3, r3, #15
    30c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    30c6:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    30ca:	f002 020f 	and.w	r2, r2, #15
    30ce:	4313      	orrs	r3, r2
    30d0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    30d4:	f003 fd11 	bl	6afa <nrf52_errata_120>
    30d8:	b120      	cbz	r0, 30e4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    30da:	4b1f      	ldr	r3, [pc, #124]	; (3158 <SystemInit+0x174>)
    30dc:	f44f 7200 	mov.w	r2, #512	; 0x200
    30e0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    30e4:	f003 fd1c 	bl	6b20 <nrf52_errata_136>
    30e8:	b160      	cbz	r0, 3104 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    30ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    30f2:	f013 0f01 	tst.w	r3, #1
    30f6:	d005      	beq.n	3104 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    30f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30fc:	f06f 0201 	mvn.w	r2, #1
    3100:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
    3104:	f003 fd26 	bl	6b54 <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3108:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    310c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3110:	2b00      	cmp	r3, #0
    3112:	db06      	blt.n	3122 <SystemInit+0x13e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3114:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3118:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    311c:	2b00      	cmp	r3, #0
    311e:	db00      	blt.n	3122 <SystemInit+0x13e>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    3120:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    3122:	2001      	movs	r0, #1
    3124:	f7ff ff54 	bl	2fd0 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3128:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    312c:	2512      	movs	r5, #18
    312e:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    3132:	f7ff ff45 	bl	2fc0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3136:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    313a:	f7ff ff41 	bl	2fc0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    313e:	2000      	movs	r0, #0
    3140:	f7ff ff46 	bl	2fd0 <nvmc_config>
            NVIC_SystemReset();
    3144:	f7ff ff2a 	bl	2f9c <__NVIC_SystemReset>
    3148:	4000c000 	.word	0x4000c000
    314c:	40005000 	.word	0x40005000
    3150:	00038148 	.word	0x00038148
    3154:	4000f000 	.word	0x4000f000
    3158:	40029000 	.word	0x40029000

0000315c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    315c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    315e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3160:	fab4 f384 	clz	r3, r4
    3164:	f1c3 031f 	rsb	r3, r3, #31
    3168:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    316c:	2b00      	cmp	r3, #0
    316e:	db16      	blt.n	319e <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3170:	2201      	movs	r2, #1
    3172:	fa02 f303 	lsl.w	r3, r2, r3
    3176:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    317a:	f3bf 8f5b 	dmb	ish
    317e:	e850 2f00 	ldrex	r2, [r0]
    3182:	42a2      	cmp	r2, r4
    3184:	d104      	bne.n	3190 <nrfx_flag32_alloc+0x34>
    3186:	e840 3e00 	strex	lr, r3, [r0]
    318a:	f1be 0f00 	cmp.w	lr, #0
    318e:	d1f6      	bne.n	317e <nrfx_flag32_alloc+0x22>
    3190:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3194:	d1e3      	bne.n	315e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    3196:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    319a:	4802      	ldr	r0, [pc, #8]	; (31a4 <nrfx_flag32_alloc+0x48>)
}
    319c:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    319e:	4802      	ldr	r0, [pc, #8]	; (31a8 <nrfx_flag32_alloc+0x4c>)
    31a0:	e7fc      	b.n	319c <nrfx_flag32_alloc+0x40>
    31a2:	bf00      	nop
    31a4:	0bad0000 	.word	0x0bad0000
    31a8:	0bad0002 	.word	0x0bad0002

000031ac <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    31ac:	6803      	ldr	r3, [r0, #0]
    31ae:	40cb      	lsrs	r3, r1
    31b0:	f013 0f01 	tst.w	r3, #1
    31b4:	d115      	bne.n	31e2 <nrfx_flag32_free+0x36>
{
    31b6:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    31b8:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    31ba:	2301      	movs	r3, #1
    31bc:	408b      	lsls	r3, r1
    31be:	4313      	orrs	r3, r2
    31c0:	f3bf 8f5b 	dmb	ish
    31c4:	e850 cf00 	ldrex	ip, [r0]
    31c8:	4594      	cmp	ip, r2
    31ca:	d104      	bne.n	31d6 <nrfx_flag32_free+0x2a>
    31cc:	e840 3e00 	strex	lr, r3, [r0]
    31d0:	f1be 0f00 	cmp.w	lr, #0
    31d4:	d1f6      	bne.n	31c4 <nrfx_flag32_free+0x18>
    31d6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    31da:	d1ed      	bne.n	31b8 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    31dc:	4802      	ldr	r0, [pc, #8]	; (31e8 <nrfx_flag32_free+0x3c>)
}
    31de:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    31e2:	4802      	ldr	r0, [pc, #8]	; (31ec <nrfx_flag32_free+0x40>)
}
    31e4:	4770      	bx	lr
    31e6:	bf00      	nop
    31e8:	0bad0000 	.word	0x0bad0000
    31ec:	0bad0004 	.word	0x0bad0004

000031f0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    31f0:	b570      	push	{r4, r5, r6, lr}
    31f2:	b082      	sub	sp, #8
    switch (domain)
    31f4:	4606      	mov	r6, r0
    31f6:	b118      	cbz	r0, 3200 <clock_stop+0x10>
    31f8:	2801      	cmp	r0, #1
    31fa:	d016      	beq.n	322a <clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    31fc:	b002      	add	sp, #8
    31fe:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    3200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3204:	2202      	movs	r2, #2
    3206:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    320a:	2200      	movs	r2, #0
    320c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3210:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3214:	2201      	movs	r2, #1
    3216:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3218:	2301      	movs	r3, #1
    321a:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    321e:	429e      	cmp	r6, r3
    3220:	d00f      	beq.n	3242 <clock_stop+0x52>
    3222:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3224:	f242 7410 	movw	r4, #10000	; 0x2710
    3228:	e013      	b.n	3252 <clock_stop+0x62>
    p_reg->INTENCLR = mask;
    322a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    322e:	2201      	movs	r2, #1
    3230:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3234:	2100      	movs	r1, #0
    3236:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    323a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    323e:	605a      	str	r2, [r3, #4]
}
    3240:	e7ea      	b.n	3218 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3242:	f10d 0507 	add.w	r5, sp, #7
    3246:	e7ed      	b.n	3224 <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3248:	2001      	movs	r0, #1
    324a:	f003 fc93 	bl	6b74 <nrfx_busy_wait>
    324e:	3c01      	subs	r4, #1
    3250:	d00c      	beq.n	326c <clock_stop+0x7c>
    3252:	462a      	mov	r2, r5
    3254:	4631      	mov	r1, r6
    3256:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    325a:	f003 fc8f 	bl	6b7c <nrf_clock_is_running>
    325e:	b128      	cbz	r0, 326c <clock_stop+0x7c>
    3260:	2d00      	cmp	r5, #0
    3262:	d0f1      	beq.n	3248 <clock_stop+0x58>
    3264:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3268:	2b01      	cmp	r3, #1
    326a:	d0ed      	beq.n	3248 <clock_stop+0x58>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    326c:	2e01      	cmp	r6, #1
    326e:	d1c5      	bne.n	31fc <clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    3270:	4b01      	ldr	r3, [pc, #4]	; (3278 <clock_stop+0x88>)
    3272:	2200      	movs	r2, #0
    3274:	715a      	strb	r2, [r3, #5]
    3276:	e7c1      	b.n	31fc <clock_stop+0xc>
    3278:	20001604 	.word	0x20001604

0000327c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    327c:	4b06      	ldr	r3, [pc, #24]	; (3298 <nrfx_clock_init+0x1c>)
    327e:	791b      	ldrb	r3, [r3, #4]
    3280:	b93b      	cbnz	r3, 3292 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    3282:	4b05      	ldr	r3, [pc, #20]	; (3298 <nrfx_clock_init+0x1c>)
    3284:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3286:	2201      	movs	r2, #1
    3288:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    328a:	2200      	movs	r2, #0
    328c:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    328e:	4803      	ldr	r0, [pc, #12]	; (329c <nrfx_clock_init+0x20>)
    3290:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3292:	4803      	ldr	r0, [pc, #12]	; (32a0 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3294:	4770      	bx	lr
    3296:	bf00      	nop
    3298:	20001604 	.word	0x20001604
    329c:	0bad0000 	.word	0x0bad0000
    32a0:	0bad000c 	.word	0x0bad000c

000032a4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    32a4:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    32a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    32ae:	b18b      	cbz	r3, 32d4 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32b4:	2200      	movs	r2, #0
    32b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    32ba:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    32be:	2201      	movs	r2, #1
    32c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    32c4:	4b15      	ldr	r3, [pc, #84]	; (331c <nrfx_power_clock_irq_handler+0x78>)
    32c6:	795b      	ldrb	r3, [r3, #5]
    32c8:	b923      	cbnz	r3, 32d4 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    32ca:	4b14      	ldr	r3, [pc, #80]	; (331c <nrfx_power_clock_irq_handler+0x78>)
    32cc:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    32ce:	681b      	ldr	r3, [r3, #0]
    32d0:	2000      	movs	r0, #0
    32d2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    32d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    32dc:	b19b      	cbz	r3, 3306 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32e2:	2200      	movs	r2, #0
    32e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    32e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    32ec:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    32f0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    32f4:	f012 0f03 	tst.w	r2, #3
    32f8:	d106      	bne.n	3308 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    32fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32fe:	2201      	movs	r2, #1
    3300:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3304:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3306:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    3308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    330c:	2202      	movs	r2, #2
    330e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3312:	4b02      	ldr	r3, [pc, #8]	; (331c <nrfx_power_clock_irq_handler+0x78>)
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	2001      	movs	r0, #1
    3318:	4798      	blx	r3
}
    331a:	e7f4      	b.n	3306 <nrfx_power_clock_irq_handler+0x62>
    331c:	20001604 	.word	0x20001604

00003320 <nrf_gpio_reconfigure>:
{
    3320:	b5f0      	push	{r4, r5, r6, r7, lr}
    3322:	461c      	mov	r4, r3
    3324:	9f05      	ldr	r7, [sp, #20]
    3326:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    3328:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    332c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    332e:	2801      	cmp	r0, #1
    3330:	d035      	beq.n	339e <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
    3332:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3336:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
    333a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    333e:	b381      	cbz	r1, 33a2 <nrf_gpio_reconfigure+0x82>
    3340:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3342:	b382      	cbz	r2, 33a6 <nrf_gpio_reconfigure+0x86>
    3344:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3348:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    334c:	b374      	cbz	r4, 33ac <nrf_gpio_reconfigure+0x8c>
    334e:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3352:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3356:	b367      	cbz	r7, 33b2 <nrf_gpio_reconfigure+0x92>
    3358:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    335c:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    3360:	b356      	cbz	r6, 33b8 <nrf_gpio_reconfigure+0x98>
    3362:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3366:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    336a:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    336e:	b331      	cbz	r1, 33be <nrf_gpio_reconfigure+0x9e>
    3370:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3372:	b332      	cbz	r2, 33c2 <nrf_gpio_reconfigure+0xa2>
    3374:	7812      	ldrb	r2, [r2, #0]
    3376:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3378:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    337a:	b324      	cbz	r4, 33c6 <nrf_gpio_reconfigure+0xa6>
    337c:	7822      	ldrb	r2, [r4, #0]
    337e:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3380:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3382:	b317      	cbz	r7, 33ca <nrf_gpio_reconfigure+0xaa>
    3384:	783a      	ldrb	r2, [r7, #0]
    3386:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3388:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    338a:	b306      	cbz	r6, 33ce <nrf_gpio_reconfigure+0xae>
    338c:	7832      	ldrb	r2, [r6, #0]
    338e:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3390:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3392:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    3394:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    3398:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    339e:	4d0d      	ldr	r5, [pc, #52]	; (33d4 <nrf_gpio_reconfigure+0xb4>)
    33a0:	e7c9      	b.n	3336 <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    33a2:	2000      	movs	r0, #0
    33a4:	e7cd      	b.n	3342 <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    33a6:	f04f 0e00 	mov.w	lr, #0
    33aa:	e7cd      	b.n	3348 <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    33ac:	f04f 0e00 	mov.w	lr, #0
    33b0:	e7cf      	b.n	3352 <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    33b2:	f04f 0e00 	mov.w	lr, #0
    33b6:	e7d1      	b.n	335c <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    33b8:	f04f 0e00 	mov.w	lr, #0
    33bc:	e7d3      	b.n	3366 <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    33be:	2300      	movs	r3, #0
    33c0:	e7d7      	b.n	3372 <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    33c2:	2200      	movs	r2, #0
    33c4:	e7d8      	b.n	3378 <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    33c6:	2200      	movs	r2, #0
    33c8:	e7da      	b.n	3380 <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    33ca:	2200      	movs	r2, #0
    33cc:	e7dc      	b.n	3388 <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    33ce:	2200      	movs	r2, #0
    33d0:	e7de      	b.n	3390 <nrf_gpio_reconfigure+0x70>
    33d2:	bf00      	nop
    33d4:	50000300 	.word	0x50000300

000033d8 <nrf_gpio_latches_read_and_clear>:
{
    33d8:	b500      	push	{lr}
    33da:	b083      	sub	sp, #12
    33dc:	4684      	mov	ip, r0
    33de:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    33e0:	4b0d      	ldr	r3, [pc, #52]	; (3418 <nrf_gpio_latches_read_and_clear+0x40>)
    33e2:	e893 0003 	ldmia.w	r3, {r0, r1}
    33e6:	ab02      	add	r3, sp, #8
    33e8:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    33ec:	4663      	mov	r3, ip
    33ee:	e00b      	b.n	3408 <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    33f0:	a902      	add	r1, sp, #8
    33f2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    33f6:	f851 1c08 	ldr.w	r1, [r1, #-8]
    33fa:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
    33fe:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    3402:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    3406:	3301      	adds	r3, #1
    3408:	eb0c 000e 	add.w	r0, ip, lr
    340c:	4298      	cmp	r0, r3
    340e:	d8ef      	bhi.n	33f0 <nrf_gpio_latches_read_and_clear+0x18>
}
    3410:	b003      	add	sp, #12
    3412:	f85d fb04 	ldr.w	pc, [sp], #4
    3416:	bf00      	nop
    3418:	00007590 	.word	0x00007590

0000341c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    341c:	3008      	adds	r0, #8
    341e:	4b03      	ldr	r3, [pc, #12]	; (342c <pin_in_use+0x10>)
    3420:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3424:	f000 0001 	and.w	r0, r0, #1
    3428:	4770      	bx	lr
    342a:	bf00      	nop
    342c:	2000009c 	.word	0x2000009c

00003430 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3430:	3008      	adds	r0, #8
    3432:	4b03      	ldr	r3, [pc, #12]	; (3440 <pin_in_use_by_te+0x10>)
    3434:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3438:	f3c0 1040 	ubfx	r0, r0, #5, #1
    343c:	4770      	bx	lr
    343e:	bf00      	nop
    3440:	2000009c 	.word	0x2000009c

00003444 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3444:	3008      	adds	r0, #8
    3446:	4b04      	ldr	r3, [pc, #16]	; (3458 <pin_has_trigger+0x14>)
    3448:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    344c:	f010 001c 	ands.w	r0, r0, #28
    3450:	bf18      	it	ne
    3452:	2001      	movne	r0, #1
    3454:	4770      	bx	lr
    3456:	bf00      	nop
    3458:	2000009c 	.word	0x2000009c

0000345c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    345c:	3008      	adds	r0, #8
    345e:	4b03      	ldr	r3, [pc, #12]	; (346c <pin_is_output+0x10>)
    3460:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3464:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3468:	4770      	bx	lr
    346a:	bf00      	nop
    346c:	2000009c 	.word	0x2000009c

00003470 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3470:	3008      	adds	r0, #8
    3472:	4b02      	ldr	r3, [pc, #8]	; (347c <pin_te_get+0xc>)
    3474:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3478:	0b40      	lsrs	r0, r0, #13
    347a:	4770      	bx	lr
    347c:	2000009c 	.word	0x2000009c

00003480 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3480:	2200      	movs	r2, #0
    3482:	e004      	b.n	348e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3484:	f04f 33ff 	mov.w	r3, #4294967295
    3488:	4283      	cmp	r3, r0
    348a:	d00f      	beq.n	34ac <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    348c:	3201      	adds	r2, #1
    348e:	2a2f      	cmp	r2, #47	; 0x2f
    3490:	d80a      	bhi.n	34a8 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3492:	f102 0308 	add.w	r3, r2, #8
    3496:	4906      	ldr	r1, [pc, #24]	; (34b0 <handler_in_use+0x30>)
    3498:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    349c:	f413 7f80 	tst.w	r3, #256	; 0x100
    34a0:	d0f0      	beq.n	3484 <handler_in_use+0x4>
    34a2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    34a6:	e7ef      	b.n	3488 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    34a8:	2000      	movs	r0, #0
    34aa:	4770      	bx	lr
            return true;
    34ac:	2001      	movs	r0, #1
}
    34ae:	4770      	bx	lr
    34b0:	2000009c 	.word	0x2000009c

000034b4 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    34b4:	2300      	movs	r3, #0
    34b6:	b113      	cbz	r3, 34be <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    34b8:	f04f 30ff 	mov.w	r0, #4294967295
}
    34bc:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    34be:	4a07      	ldr	r2, [pc, #28]	; (34dc <find_handler+0x28>)
    34c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    34c4:	4282      	cmp	r2, r0
    34c6:	d001      	beq.n	34cc <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    34c8:	3301      	adds	r3, #1
    34ca:	e7f4      	b.n	34b6 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    34cc:	4a03      	ldr	r2, [pc, #12]	; (34dc <find_handler+0x28>)
    34ce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    34d2:	6852      	ldr	r2, [r2, #4]
    34d4:	428a      	cmp	r2, r1
    34d6:	d1f7      	bne.n	34c8 <find_handler+0x14>
            return i;
    34d8:	4618      	mov	r0, r3
    34da:	4770      	bx	lr
    34dc:	2000009c 	.word	0x2000009c

000034e0 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    34e0:	f100 0208 	add.w	r2, r0, #8
    34e4:	4b0f      	ldr	r3, [pc, #60]	; (3524 <get_initial_sense+0x44>)
    34e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    34ea:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    34ee:	2b04      	cmp	r3, #4
    34f0:	d012      	beq.n	3518 <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    34f2:	2b05      	cmp	r3, #5
    34f4:	d012      	beq.n	351c <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
    34f6:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    34fa:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    34fc:	2801      	cmp	r0, #1
    34fe:	d009      	beq.n	3514 <get_initial_sense+0x34>
        case 0: return NRF_P0;
    3500:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    3504:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3508:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    350a:	f013 0f01 	tst.w	r3, #1
    350e:	d007      	beq.n	3520 <get_initial_sense+0x40>
    3510:	2003      	movs	r0, #3
    3512:	4770      	bx	lr
        case 1: return NRF_P1;
    3514:	4b04      	ldr	r3, [pc, #16]	; (3528 <get_initial_sense+0x48>)
    3516:	e7f5      	b.n	3504 <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3518:	2003      	movs	r0, #3
    351a:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    351c:	2002      	movs	r0, #2
    351e:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3520:	2002      	movs	r0, #2
    }

    return sense;
}
    3522:	4770      	bx	lr
    3524:	2000009c 	.word	0x2000009c
    3528:	50000300 	.word	0x50000300

0000352c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    352c:	3008      	adds	r0, #8
    352e:	4b06      	ldr	r3, [pc, #24]	; (3548 <channel_handler_get+0x1c>)
    3530:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3534:	f410 7f80 	tst.w	r0, #256	; 0x100
    3538:	d004      	beq.n	3544 <channel_handler_get+0x18>
    353a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    353e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3542:	4770      	bx	lr
        return NULL;
    3544:	2000      	movs	r0, #0
}
    3546:	4770      	bx	lr
    3548:	2000009c 	.word	0x2000009c

0000354c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    354c:	b570      	push	{r4, r5, r6, lr}
    354e:	4604      	mov	r4, r0
    3550:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    3552:	f7ff ffeb 	bl	352c <channel_handler_get>

    if (handler)
    3556:	b120      	cbz	r0, 3562 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    3558:	6806      	ldr	r6, [r0, #0]
    355a:	6842      	ldr	r2, [r0, #4]
    355c:	4629      	mov	r1, r5
    355e:	4620      	mov	r0, r4
    3560:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    3562:	4b04      	ldr	r3, [pc, #16]	; (3574 <call_handler+0x28>)
    3564:	689b      	ldr	r3, [r3, #8]
    3566:	b123      	cbz	r3, 3572 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3568:	4a02      	ldr	r2, [pc, #8]	; (3574 <call_handler+0x28>)
    356a:	68d2      	ldr	r2, [r2, #12]
    356c:	4629      	mov	r1, r5
    356e:	4620      	mov	r0, r4
    3570:	4798      	blx	r3
    }
}
    3572:	bd70      	pop	{r4, r5, r6, pc}
    3574:	2000009c 	.word	0x2000009c

00003578 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    3578:	b570      	push	{r4, r5, r6, lr}
    357a:	4606      	mov	r6, r0
    357c:	460c      	mov	r4, r1
    357e:	4615      	mov	r5, r2
    if (is_level(trigger))
    3580:	4608      	mov	r0, r1
    3582:	f003 fbfd 	bl	6d80 <is_level>
    3586:	b960      	cbnz	r0, 35a2 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3588:	2d02      	cmp	r5, #2
    358a:	d028      	beq.n	35de <next_sense_cond_call_handler+0x66>
    358c:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    358e:	4630      	mov	r0, r6
    3590:	f003 fbce 	bl	6d30 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3594:	2c03      	cmp	r4, #3
    3596:	d026      	beq.n	35e6 <next_sense_cond_call_handler+0x6e>
    3598:	2d02      	cmp	r5, #2
    359a:	d022      	beq.n	35e2 <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    359c:	2d03      	cmp	r5, #3
    359e:	d027      	beq.n	35f0 <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    35a0:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    35a2:	4621      	mov	r1, r4
    35a4:	4630      	mov	r0, r6
    35a6:	f7ff ffd1 	bl	354c <call_handler>
    *p_pin = pin_number & 0x1F;
    35aa:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    35ae:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    35b0:	2a01      	cmp	r2, #1
    35b2:	d012      	beq.n	35da <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
    35b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    35b8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    35bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    35c0:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    35c4:	429d      	cmp	r5, r3
    35c6:	d1eb      	bne.n	35a0 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    35c8:	2100      	movs	r1, #0
    35ca:	4630      	mov	r0, r6
    35cc:	f003 fbb0 	bl	6d30 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    35d0:	4629      	mov	r1, r5
    35d2:	4630      	mov	r0, r6
    35d4:	f003 fbac 	bl	6d30 <nrf_gpio_cfg_sense_set>
    35d8:	e7e2      	b.n	35a0 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    35da:	4a07      	ldr	r2, [pc, #28]	; (35f8 <next_sense_cond_call_handler+0x80>)
    35dc:	e7ec      	b.n	35b8 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    35de:	2103      	movs	r1, #3
    35e0:	e7d5      	b.n	358e <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    35e2:	2c01      	cmp	r4, #1
    35e4:	d1da      	bne.n	359c <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    35e6:	4621      	mov	r1, r4
    35e8:	4630      	mov	r0, r6
    35ea:	f7ff ffaf 	bl	354c <call_handler>
}
    35ee:	e7d7      	b.n	35a0 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    35f0:	2c02      	cmp	r4, #2
    35f2:	d1d5      	bne.n	35a0 <next_sense_cond_call_handler+0x28>
    35f4:	e7f7      	b.n	35e6 <next_sense_cond_call_handler+0x6e>
    35f6:	bf00      	nop
    35f8:	50000300 	.word	0x50000300

000035fc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    35fc:	f100 0208 	add.w	r2, r0, #8
    3600:	4b0e      	ldr	r3, [pc, #56]	; (363c <release_handler+0x40>)
    3602:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3606:	f413 7f80 	tst.w	r3, #256	; 0x100
    360a:	d016      	beq.n	363a <release_handler+0x3e>
{
    360c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    360e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3612:	4610      	mov	r0, r2
    3614:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3618:	4a08      	ldr	r2, [pc, #32]	; (363c <release_handler+0x40>)
    361a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    361e:	4620      	mov	r0, r4
    3620:	f7ff ff2e 	bl	3480 <handler_in_use>
    3624:	b100      	cbz	r0, 3628 <release_handler+0x2c>
}
    3626:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    3628:	4804      	ldr	r0, [pc, #16]	; (363c <release_handler+0x40>)
    362a:	2300      	movs	r3, #0
    362c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3630:	4621      	mov	r1, r4
    3632:	3074      	adds	r0, #116	; 0x74
    3634:	f7ff fdba 	bl	31ac <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3638:	e7f5      	b.n	3626 <release_handler+0x2a>
    363a:	4770      	bx	lr
    363c:	2000009c 	.word	0x2000009c

00003640 <pin_handler_trigger_uninit>:
{
    3640:	b510      	push	{r4, lr}
    3642:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    3644:	f7ff fef4 	bl	3430 <pin_in_use_by_te>
    3648:	b140      	cbz	r0, 365c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    364a:	4620      	mov	r0, r4
    364c:	f7ff ff10 	bl	3470 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3650:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3654:	4b06      	ldr	r3, [pc, #24]	; (3670 <pin_handler_trigger_uninit+0x30>)
    3656:	2200      	movs	r2, #0
    3658:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    365c:	4620      	mov	r0, r4
    365e:	f7ff ffcd 	bl	35fc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3662:	3408      	adds	r4, #8
    3664:	4b03      	ldr	r3, [pc, #12]	; (3674 <pin_handler_trigger_uninit+0x34>)
    3666:	2200      	movs	r2, #0
    3668:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    366c:	bd10      	pop	{r4, pc}
    366e:	bf00      	nop
    3670:	40006000 	.word	0x40006000
    3674:	2000009c 	.word	0x2000009c

00003678 <pin_handler_set>:
{
    3678:	b570      	push	{r4, r5, r6, lr}
    367a:	b082      	sub	sp, #8
    367c:	4605      	mov	r5, r0
    367e:	460e      	mov	r6, r1
    3680:	4614      	mov	r4, r2
    release_handler(pin);
    3682:	f7ff ffbb 	bl	35fc <release_handler>
    if (!handler)
    3686:	b326      	cbz	r6, 36d2 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    3688:	4621      	mov	r1, r4
    368a:	4630      	mov	r0, r6
    368c:	f7ff ff12 	bl	34b4 <find_handler>
    if (handler_id < 0)
    3690:	1e03      	subs	r3, r0, #0
    3692:	db13      	blt.n	36bc <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    3694:	4910      	ldr	r1, [pc, #64]	; (36d8 <pin_handler_set+0x60>)
    3696:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    369a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    369e:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    36a0:	f105 0008 	add.w	r0, r5, #8
    36a4:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    36a8:	025b      	lsls	r3, r3, #9
    36aa:	b29b      	uxth	r3, r3
    36ac:	4313      	orrs	r3, r2
    36ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    36b2:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    36b6:	4809      	ldr	r0, [pc, #36]	; (36dc <pin_handler_set+0x64>)
}
    36b8:	b002      	add	sp, #8
    36ba:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    36bc:	f10d 0107 	add.w	r1, sp, #7
    36c0:	4807      	ldr	r0, [pc, #28]	; (36e0 <pin_handler_set+0x68>)
    36c2:	f7ff fd4b 	bl	315c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    36c6:	4b05      	ldr	r3, [pc, #20]	; (36dc <pin_handler_set+0x64>)
    36c8:	4298      	cmp	r0, r3
    36ca:	d1f5      	bne.n	36b8 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    36cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    36d0:	e7e0      	b.n	3694 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    36d2:	4802      	ldr	r0, [pc, #8]	; (36dc <pin_handler_set+0x64>)
    36d4:	e7f0      	b.n	36b8 <pin_handler_set+0x40>
    36d6:	bf00      	nop
    36d8:	2000009c 	.word	0x2000009c
    36dc:	0bad0000 	.word	0x0bad0000
    36e0:	20000110 	.word	0x20000110

000036e4 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    36e4:	b570      	push	{r4, r5, r6, lr}
    36e6:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    36e8:	466a      	mov	r2, sp
    36ea:	2102      	movs	r1, #2
    36ec:	2000      	movs	r0, #0
    36ee:	f7ff fe73 	bl	33d8 <nrf_gpio_latches_read_and_clear>
    36f2:	e040      	b.n	3776 <port_event_handle+0x92>
    36f4:	4e22      	ldr	r6, [pc, #136]	; (3780 <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    36f6:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    36fa:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    36fe:	f3c2 4201 	ubfx	r2, r2, #16, #2
    3702:	f7ff ff39 	bl	3578 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    3706:	2301      	movs	r3, #1
    3708:	40ab      	lsls	r3, r5
    370a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    370e:	ab02      	add	r3, sp, #8
    3710:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3714:	f853 0c08 	ldr.w	r0, [r3, #-8]
    3718:	b300      	cbz	r0, 375c <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
    371a:	fa90 f0a0 	rbit	r0, r0
    371e:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    3722:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3726:	f100 0208 	add.w	r2, r0, #8
    372a:	4b16      	ldr	r3, [pc, #88]	; (3784 <port_event_handle+0xa0>)
    372c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    3730:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3734:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    3736:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    373a:	f81d 2005 	ldrb.w	r2, [sp, r5]
    373e:	2301      	movs	r3, #1
    3740:	40b3      	lsls	r3, r6
    3742:	43db      	mvns	r3, r3
    3744:	b25b      	sxtb	r3, r3
    3746:	4013      	ands	r3, r2
    3748:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    374c:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    3750:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3752:	2b01      	cmp	r3, #1
    3754:	d0ce      	beq.n	36f4 <port_event_handle+0x10>
        case 0: return NRF_P0;
    3756:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    375a:	e7cc      	b.n	36f6 <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    375c:	3401      	adds	r4, #1
    375e:	2c01      	cmp	r4, #1
    3760:	d9d5      	bls.n	370e <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3762:	4b09      	ldr	r3, [pc, #36]	; (3788 <port_event_handle+0xa4>)
    3764:	2200      	movs	r2, #0
    3766:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    376a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    376e:	4668      	mov	r0, sp
    3770:	f003 fb0b 	bl	6d8a <latch_pending_read_and_check>
    3774:	b108      	cbz	r0, 377a <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3776:	2400      	movs	r4, #0
    3778:	e7f1      	b.n	375e <port_event_handle+0x7a>
}
    377a:	b002      	add	sp, #8
    377c:	bd70      	pop	{r4, r5, r6, pc}
    377e:	bf00      	nop
    3780:	50000300 	.word	0x50000300
    3784:	2000009c 	.word	0x2000009c
    3788:	40006000 	.word	0x40006000

0000378c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    378c:	b538      	push	{r3, r4, r5, lr}
    378e:	4604      	mov	r4, r0
    while (mask)
    3790:	e018      	b.n	37c4 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    3792:	fa94 f3a4 	rbit	r3, r4
    3796:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    379a:	2201      	movs	r2, #1
    379c:	409a      	lsls	r2, r3
    379e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    37a2:	4a0a      	ldr	r2, [pc, #40]	; (37cc <gpiote_evt_handle+0x40>)
    37a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    37a8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    37ac:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    37b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    37b4:	f3c0 4001 	ubfx	r0, r0, #16, #2
    37b8:	f003 fae0 	bl	6d7c <gpiote_polarity_to_trigger>
    37bc:	4601      	mov	r1, r0
    37be:	4628      	mov	r0, r5
    37c0:	f7ff fec4 	bl	354c <call_handler>
    while (mask)
    37c4:	2c00      	cmp	r4, #0
    37c6:	d1e4      	bne.n	3792 <gpiote_evt_handle+0x6>
    }
}
    37c8:	bd38      	pop	{r3, r4, r5, pc}
    37ca:	bf00      	nop
    37cc:	40006000 	.word	0x40006000

000037d0 <nrfx_gpiote_input_configure>:
{
    37d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37d4:	b084      	sub	sp, #16
    37d6:	4604      	mov	r4, r0
    37d8:	4615      	mov	r5, r2
    37da:	461e      	mov	r6, r3
    if (p_input_config)
    37dc:	b309      	cbz	r1, 3822 <nrfx_gpiote_input_configure+0x52>
    37de:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    37e0:	f003 fab6 	bl	6d50 <pin_is_task_output>
    37e4:	2800      	cmp	r0, #0
    37e6:	d13f      	bne.n	3868 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    37e8:	2300      	movs	r3, #0
    37ea:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    37ee:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    37f2:	9301      	str	r3, [sp, #4]
    37f4:	9300      	str	r3, [sp, #0]
    37f6:	463b      	mov	r3, r7
    37f8:	f10d 020f 	add.w	r2, sp, #15
    37fc:	f10d 010e 	add.w	r1, sp, #14
    3800:	4620      	mov	r0, r4
    3802:	f7ff fd8d 	bl	3320 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3806:	4a38      	ldr	r2, [pc, #224]	; (38e8 <nrfx_gpiote_input_configure+0x118>)
    3808:	f104 0108 	add.w	r1, r4, #8
    380c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3810:	f023 0302 	bic.w	r3, r3, #2
    3814:	b29b      	uxth	r3, r3
    3816:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    381a:	f043 0301 	orr.w	r3, r3, #1
    381e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3822:	b1bd      	cbz	r5, 3854 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3824:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3826:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    382a:	4620      	mov	r0, r4
    382c:	f7ff fe16 	bl	345c <pin_is_output>
    3830:	b1e0      	cbz	r0, 386c <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    3832:	f1b8 0f00 	cmp.w	r8, #0
    3836:	d151      	bne.n	38dc <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3838:	4a2b      	ldr	r2, [pc, #172]	; (38e8 <nrfx_gpiote_input_configure+0x118>)
    383a:	f104 0108 	add.w	r1, r4, #8
    383e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3842:	f023 031c 	bic.w	r3, r3, #28
    3846:	b29b      	uxth	r3, r3
    3848:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    384c:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3850:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    3854:	2e00      	cmp	r6, #0
    3856:	d045      	beq.n	38e4 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3858:	6872      	ldr	r2, [r6, #4]
    385a:	6831      	ldr	r1, [r6, #0]
    385c:	4620      	mov	r0, r4
    385e:	f7ff ff0b 	bl	3678 <pin_handler_set>
}
    3862:	b004      	add	sp, #16
    3864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3868:	4820      	ldr	r0, [pc, #128]	; (38ec <nrfx_gpiote_input_configure+0x11c>)
    386a:	e7fa      	b.n	3862 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    386c:	4a1e      	ldr	r2, [pc, #120]	; (38e8 <nrfx_gpiote_input_configure+0x118>)
    386e:	f104 0108 	add.w	r1, r4, #8
    3872:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3876:	f023 0320 	bic.w	r3, r3, #32
    387a:	04db      	lsls	r3, r3, #19
    387c:	0cdb      	lsrs	r3, r3, #19
    387e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    3882:	f1b8 0f00 	cmp.w	r8, #0
    3886:	d0d7      	beq.n	3838 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    3888:	2f03      	cmp	r7, #3
    388a:	d829      	bhi.n	38e0 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
    388c:	686b      	ldr	r3, [r5, #4]
    388e:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3890:	b937      	cbnz	r7, 38a0 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
    3892:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    3896:	4b16      	ldr	r3, [pc, #88]	; (38f0 <nrfx_gpiote_input_configure+0x120>)
    3898:	2200      	movs	r2, #0
    389a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    389e:	e7cb      	b.n	3838 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    38a0:	4638      	mov	r0, r7
    38a2:	f003 fa6c 	bl	6d7e <gpiote_trigger_to_polarity>
    38a6:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    38a8:	4811      	ldr	r0, [pc, #68]	; (38f0 <nrfx_gpiote_input_configure+0x120>)
    38aa:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    38ae:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    38b2:	f022 0203 	bic.w	r2, r2, #3
    38b6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    38ba:	4622      	mov	r2, r4
    38bc:	4629      	mov	r1, r5
    38be:	f003 f9ff 	bl	6cc0 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    38c2:	4a09      	ldr	r2, [pc, #36]	; (38e8 <nrfx_gpiote_input_configure+0x118>)
    38c4:	f104 0108 	add.w	r1, r4, #8
    38c8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    38cc:	036d      	lsls	r5, r5, #13
    38ce:	b2ad      	uxth	r5, r5
    38d0:	432b      	orrs	r3, r5
    38d2:	f043 0320 	orr.w	r3, r3, #32
    38d6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    38da:	e7ad      	b.n	3838 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    38dc:	4803      	ldr	r0, [pc, #12]	; (38ec <nrfx_gpiote_input_configure+0x11c>)
    38de:	e7c0      	b.n	3862 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    38e0:	4802      	ldr	r0, [pc, #8]	; (38ec <nrfx_gpiote_input_configure+0x11c>)
    38e2:	e7be      	b.n	3862 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    38e4:	4803      	ldr	r0, [pc, #12]	; (38f4 <nrfx_gpiote_input_configure+0x124>)
    38e6:	e7bc      	b.n	3862 <nrfx_gpiote_input_configure+0x92>
    38e8:	2000009c 	.word	0x2000009c
    38ec:	0bad0004 	.word	0x0bad0004
    38f0:	40006000 	.word	0x40006000
    38f4:	0bad0000 	.word	0x0bad0000

000038f8 <nrfx_gpiote_output_configure>:
{
    38f8:	b570      	push	{r4, r5, r6, lr}
    38fa:	b084      	sub	sp, #16
    38fc:	4604      	mov	r4, r0
    38fe:	4615      	mov	r5, r2
    if (p_config)
    3900:	b329      	cbz	r1, 394e <nrfx_gpiote_output_configure+0x56>
    3902:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3904:	f003 fa33 	bl	6d6e <pin_is_input>
    3908:	b120      	cbz	r0, 3914 <nrfx_gpiote_output_configure+0x1c>
    390a:	4620      	mov	r0, r4
    390c:	f7ff fd90 	bl	3430 <pin_in_use_by_te>
    3910:	2800      	cmp	r0, #0
    3912:	d138      	bne.n	3986 <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3914:	4620      	mov	r0, r4
    3916:	f7ff fd95 	bl	3444 <pin_has_trigger>
    391a:	b110      	cbz	r0, 3922 <nrfx_gpiote_output_configure+0x2a>
    391c:	7873      	ldrb	r3, [r6, #1]
    391e:	2b01      	cmp	r3, #1
    3920:	d031      	beq.n	3986 <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3922:	2301      	movs	r3, #1
    3924:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3928:	2300      	movs	r3, #0
    392a:	9301      	str	r3, [sp, #4]
    392c:	9600      	str	r6, [sp, #0]
    392e:	1cb3      	adds	r3, r6, #2
    3930:	1c72      	adds	r2, r6, #1
    3932:	f10d 010f 	add.w	r1, sp, #15
    3936:	4620      	mov	r0, r4
    3938:	f7ff fcf2 	bl	3320 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    393c:	4a1f      	ldr	r2, [pc, #124]	; (39bc <nrfx_gpiote_output_configure+0xc4>)
    393e:	f104 0108 	add.w	r1, r4, #8
    3942:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3946:	f043 0303 	orr.w	r3, r3, #3
    394a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    394e:	b385      	cbz	r5, 39b2 <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
    3950:	4620      	mov	r0, r4
    3952:	f003 fa0c 	bl	6d6e <pin_is_input>
    3956:	bb70      	cbnz	r0, 39b6 <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
    3958:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    395a:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    395e:	4b18      	ldr	r3, [pc, #96]	; (39c0 <nrfx_gpiote_output_configure+0xc8>)
    3960:	2100      	movs	r1, #0
    3962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3966:	4a15      	ldr	r2, [pc, #84]	; (39bc <nrfx_gpiote_output_configure+0xc4>)
    3968:	f104 0108 	add.w	r1, r4, #8
    396c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3970:	f023 0320 	bic.w	r3, r3, #32
    3974:	04db      	lsls	r3, r3, #19
    3976:	0cdb      	lsrs	r3, r3, #19
    3978:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    397c:	786b      	ldrb	r3, [r5, #1]
    397e:	b923      	cbnz	r3, 398a <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
    3980:	4810      	ldr	r0, [pc, #64]	; (39c4 <nrfx_gpiote_output_configure+0xcc>)
}
    3982:	b004      	add	sp, #16
    3984:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3986:	4810      	ldr	r0, [pc, #64]	; (39c8 <nrfx_gpiote_output_configure+0xd0>)
    3988:	e7fb      	b.n	3982 <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
    398a:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    398c:	9200      	str	r2, [sp, #0]
    398e:	4622      	mov	r2, r4
    3990:	4631      	mov	r1, r6
    3992:	480b      	ldr	r0, [pc, #44]	; (39c0 <nrfx_gpiote_output_configure+0xc8>)
    3994:	f003 f9ad 	bl	6cf2 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3998:	4a08      	ldr	r2, [pc, #32]	; (39bc <nrfx_gpiote_output_configure+0xc4>)
    399a:	3408      	adds	r4, #8
    399c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    39a0:	0376      	lsls	r6, r6, #13
    39a2:	b2b6      	uxth	r6, r6
    39a4:	4333      	orrs	r3, r6
    39a6:	f043 0320 	orr.w	r3, r3, #32
    39aa:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    39ae:	4805      	ldr	r0, [pc, #20]	; (39c4 <nrfx_gpiote_output_configure+0xcc>)
    39b0:	e7e7      	b.n	3982 <nrfx_gpiote_output_configure+0x8a>
    39b2:	4804      	ldr	r0, [pc, #16]	; (39c4 <nrfx_gpiote_output_configure+0xcc>)
    39b4:	e7e5      	b.n	3982 <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
    39b6:	4804      	ldr	r0, [pc, #16]	; (39c8 <nrfx_gpiote_output_configure+0xd0>)
    39b8:	e7e3      	b.n	3982 <nrfx_gpiote_output_configure+0x8a>
    39ba:	bf00      	nop
    39bc:	2000009c 	.word	0x2000009c
    39c0:	40006000 	.word	0x40006000
    39c4:	0bad0000 	.word	0x0bad0000
    39c8:	0bad0004 	.word	0x0bad0004

000039cc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    39cc:	4b01      	ldr	r3, [pc, #4]	; (39d4 <nrfx_gpiote_global_callback_set+0x8>)
    39ce:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    39d0:	60d9      	str	r1, [r3, #12]
}
    39d2:	4770      	bx	lr
    39d4:	2000009c 	.word	0x2000009c

000039d8 <nrfx_gpiote_channel_get>:
{
    39d8:	b538      	push	{r3, r4, r5, lr}
    39da:	4604      	mov	r4, r0
    39dc:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    39de:	f7ff fd27 	bl	3430 <pin_in_use_by_te>
    39e2:	b140      	cbz	r0, 39f6 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    39e4:	f104 0008 	add.w	r0, r4, #8
    39e8:	4b04      	ldr	r3, [pc, #16]	; (39fc <nrfx_gpiote_channel_get+0x24>)
    39ea:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    39ee:	0b5b      	lsrs	r3, r3, #13
    39f0:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    39f2:	4803      	ldr	r0, [pc, #12]	; (3a00 <nrfx_gpiote_channel_get+0x28>)
}
    39f4:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    39f6:	4803      	ldr	r0, [pc, #12]	; (3a04 <nrfx_gpiote_channel_get+0x2c>)
    39f8:	e7fc      	b.n	39f4 <nrfx_gpiote_channel_get+0x1c>
    39fa:	bf00      	nop
    39fc:	2000009c 	.word	0x2000009c
    3a00:	0bad0000 	.word	0x0bad0000
    3a04:	0bad0004 	.word	0x0bad0004

00003a08 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3a08:	4b0f      	ldr	r3, [pc, #60]	; (3a48 <nrfx_gpiote_init+0x40>)
    3a0a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3a0e:	b10b      	cbz	r3, 3a14 <nrfx_gpiote_init+0xc>
        return err_code;
    3a10:	480e      	ldr	r0, [pc, #56]	; (3a4c <nrfx_gpiote_init+0x44>)
}
    3a12:	4770      	bx	lr
{
    3a14:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3a16:	4c0e      	ldr	r4, [pc, #56]	; (3a50 <nrfx_gpiote_init+0x48>)
    3a18:	2260      	movs	r2, #96	; 0x60
    3a1a:	2100      	movs	r1, #0
    3a1c:	4620      	mov	r0, r4
    3a1e:	f002 fa9b 	bl	5f58 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3a22:	2006      	movs	r0, #6
    3a24:	f002 f911 	bl	5c4a <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a28:	4b0a      	ldr	r3, [pc, #40]	; (3a54 <nrfx_gpiote_init+0x4c>)
    3a2a:	2200      	movs	r2, #0
    3a2c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3a30:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3a34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3a38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3a3c:	2301      	movs	r3, #1
    3a3e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3a42:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    3a44:	4804      	ldr	r0, [pc, #16]	; (3a58 <nrfx_gpiote_init+0x50>)
}
    3a46:	bd10      	pop	{r4, pc}
    3a48:	2000009c 	.word	0x2000009c
    3a4c:	0bad0005 	.word	0x0bad0005
    3a50:	200000ac 	.word	0x200000ac
    3a54:	40006000 	.word	0x40006000
    3a58:	0bad0000 	.word	0x0bad0000

00003a5c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3a5c:	4b03      	ldr	r3, [pc, #12]	; (3a6c <nrfx_gpiote_is_init+0x10>)
    3a5e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3a62:	3800      	subs	r0, #0
    3a64:	bf18      	it	ne
    3a66:	2001      	movne	r0, #1
    3a68:	4770      	bx	lr
    3a6a:	bf00      	nop
    3a6c:	2000009c 	.word	0x2000009c

00003a70 <nrfx_gpiote_channel_free>:
{
    3a70:	b508      	push	{r3, lr}
    3a72:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3a74:	4801      	ldr	r0, [pc, #4]	; (3a7c <nrfx_gpiote_channel_free+0xc>)
    3a76:	f7ff fb99 	bl	31ac <nrfx_flag32_free>
}
    3a7a:	bd08      	pop	{r3, pc}
    3a7c:	2000010c 	.word	0x2000010c

00003a80 <nrfx_gpiote_channel_alloc>:
{
    3a80:	b508      	push	{r3, lr}
    3a82:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3a84:	4801      	ldr	r0, [pc, #4]	; (3a8c <nrfx_gpiote_channel_alloc+0xc>)
    3a86:	f7ff fb69 	bl	315c <nrfx_flag32_alloc>
}
    3a8a:	bd08      	pop	{r3, pc}
    3a8c:	2000010c 	.word	0x2000010c

00003a90 <nrfx_gpiote_trigger_enable>:
{
    3a90:	b538      	push	{r3, r4, r5, lr}
    3a92:	4604      	mov	r4, r0
    3a94:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3a96:	f7ff fccb 	bl	3430 <pin_in_use_by_te>
    3a9a:	b300      	cbz	r0, 3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
    3a9c:	4620      	mov	r0, r4
    3a9e:	f003 f966 	bl	6d6e <pin_is_input>
    3aa2:	b1e0      	cbz	r0, 3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
        uint8_t ch = pin_te_get(pin);
    3aa4:	4620      	mov	r0, r4
    3aa6:	f7ff fce3 	bl	3470 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3aaa:	0083      	lsls	r3, r0, #2
    3aac:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3ab0:	b29b      	uxth	r3, r3
    3ab2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3ab6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3aba:	2200      	movs	r2, #0
    3abc:	601a      	str	r2, [r3, #0]
    3abe:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3ac0:	4a0b      	ldr	r2, [pc, #44]	; (3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>)
    3ac2:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    3ac6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    3aca:	f043 0301 	orr.w	r3, r3, #1
    3ace:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3ad2:	b15d      	cbz	r5, 3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3ad4:	2301      	movs	r3, #1
    3ad6:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3ad8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3adc:	e006      	b.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3ade:	4620      	mov	r0, r4
    3ae0:	f7ff fcfe 	bl	34e0 <get_initial_sense>
    3ae4:	4601      	mov	r1, r0
    3ae6:	4620      	mov	r0, r4
    3ae8:	f003 f922 	bl	6d30 <nrf_gpio_cfg_sense_set>
}
    3aec:	bd38      	pop	{r3, r4, r5, pc}
    3aee:	bf00      	nop
    3af0:	40006000 	.word	0x40006000

00003af4 <nrfx_gpiote_trigger_disable>:
{
    3af4:	b510      	push	{r4, lr}
    3af6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3af8:	f7ff fc9a 	bl	3430 <pin_in_use_by_te>
    3afc:	b1a0      	cbz	r0, 3b28 <nrfx_gpiote_trigger_disable+0x34>
    3afe:	4620      	mov	r0, r4
    3b00:	f003 f935 	bl	6d6e <pin_is_input>
    3b04:	b180      	cbz	r0, 3b28 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    3b06:	4620      	mov	r0, r4
    3b08:	f7ff fcb2 	bl	3470 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3b0c:	2201      	movs	r2, #1
    3b0e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3b10:	4b08      	ldr	r3, [pc, #32]	; (3b34 <nrfx_gpiote_trigger_disable+0x40>)
    3b12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3b16:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3b1a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    3b1e:	f022 0203 	bic.w	r2, r2, #3
    3b22:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    3b26:	e003      	b.n	3b30 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3b28:	2100      	movs	r1, #0
    3b2a:	4620      	mov	r0, r4
    3b2c:	f003 f900 	bl	6d30 <nrf_gpio_cfg_sense_set>
}
    3b30:	bd10      	pop	{r4, pc}
    3b32:	bf00      	nop
    3b34:	40006000 	.word	0x40006000

00003b38 <nrfx_gpiote_pin_uninit>:
{
    3b38:	b510      	push	{r4, lr}
    3b3a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3b3c:	f7ff fc6e 	bl	341c <pin_in_use>
    3b40:	b908      	cbnz	r0, 3b46 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    3b42:	480c      	ldr	r0, [pc, #48]	; (3b74 <nrfx_gpiote_pin_uninit+0x3c>)
}
    3b44:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    3b46:	4620      	mov	r0, r4
    3b48:	f7ff ffd4 	bl	3af4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3b4c:	4620      	mov	r0, r4
    3b4e:	f7ff fd77 	bl	3640 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    3b52:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    3b56:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b58:	2c01      	cmp	r4, #1
    3b5a:	d008      	beq.n	3b6e <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    3b5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3b60:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3b64:	2102      	movs	r1, #2
    3b66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    3b6a:	4803      	ldr	r0, [pc, #12]	; (3b78 <nrfx_gpiote_pin_uninit+0x40>)
    3b6c:	e7ea      	b.n	3b44 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    3b6e:	4a03      	ldr	r2, [pc, #12]	; (3b7c <nrfx_gpiote_pin_uninit+0x44>)
    3b70:	e7f6      	b.n	3b60 <nrfx_gpiote_pin_uninit+0x28>
    3b72:	bf00      	nop
    3b74:	0bad0004 	.word	0x0bad0004
    3b78:	0bad0000 	.word	0x0bad0000
    3b7c:	50000300 	.word	0x50000300

00003b80 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3b80:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3b82:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3b84:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3b88:	2100      	movs	r1, #0
    uint32_t status = 0;
    3b8a:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3b8c:	e003      	b.n	3b96 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    3b8e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3b90:	3304      	adds	r3, #4
    3b92:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3b94:	3101      	adds	r1, #1
    3b96:	2907      	cmp	r1, #7
    3b98:	d814      	bhi.n	3bc4 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b9a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    3b9e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    3ba2:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3ba4:	2a00      	cmp	r2, #0
    3ba6:	d0f2      	beq.n	3b8e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    3ba8:	4a0c      	ldr	r2, [pc, #48]	; (3bdc <nrfx_gpiote_irq_handler+0x5c>)
    3baa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3bae:	4210      	tst	r0, r2
    3bb0:	d0ed      	beq.n	3b8e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    3bb2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    3bb6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bba:	2500      	movs	r5, #0
    3bbc:	6015      	str	r5, [r2, #0]
    3bbe:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3bc0:	4304      	orrs	r4, r0
    3bc2:	e7e4      	b.n	3b8e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bc4:	4b05      	ldr	r3, [pc, #20]	; (3bdc <nrfx_gpiote_irq_handler+0x5c>)
    3bc6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3bca:	b91b      	cbnz	r3, 3bd4 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3bcc:	4620      	mov	r0, r4
    3bce:	f7ff fddd 	bl	378c <gpiote_evt_handle>
}
    3bd2:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    3bd4:	f7ff fd86 	bl	36e4 <port_event_handle>
    3bd8:	e7f8      	b.n	3bcc <nrfx_gpiote_irq_handler+0x4c>
    3bda:	bf00      	nop
    3bdc:	40006000 	.word	0x40006000

00003be0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3be0:	b508      	push	{r3, lr}
    3be2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    3be4:	4801      	ldr	r0, [pc, #4]	; (3bec <nrfx_ppi_channel_alloc+0xc>)
    3be6:	f7ff fab9 	bl	315c <nrfx_flag32_alloc>
}
    3bea:	bd08      	pop	{r3, pc}
    3bec:	20000118 	.word	0x20000118

00003bf0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    3bf0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3bf2:	4c14      	ldr	r4, [pc, #80]	; (3c44 <_DoInit+0x54>)
    3bf4:	2303      	movs	r3, #3
    3bf6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3bf8:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    3bfa:	4a13      	ldr	r2, [pc, #76]	; (3c48 <_DoInit+0x58>)
    3bfc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3bfe:	4b13      	ldr	r3, [pc, #76]	; (3c4c <_DoInit+0x5c>)
    3c00:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    3c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3c06:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    3c08:	2300      	movs	r3, #0
    3c0a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    3c0c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    3c10:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    3c12:	4a0f      	ldr	r2, [pc, #60]	; (3c50 <_DoInit+0x60>)
    3c14:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    3c16:	2210      	movs	r2, #16
    3c18:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    3c1a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    3c1c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3c1e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    3c20:	490c      	ldr	r1, [pc, #48]	; (3c54 <_DoInit+0x64>)
    3c22:	1de0      	adds	r0, r4, #7
    3c24:	f002 f907 	bl	5e36 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3c28:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    3c2c:	490a      	ldr	r1, [pc, #40]	; (3c58 <_DoInit+0x68>)
    3c2e:	4620      	mov	r0, r4
    3c30:	f002 f901 	bl	5e36 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3c34:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    3c38:	2320      	movs	r3, #32
    3c3a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3c3c:	f3bf 8f5f 	dmb	sy
}
    3c40:	bd10      	pop	{r4, pc}
    3c42:	bf00      	nop
    3c44:	20001a1c 	.word	0x20001a1c
    3c48:	00007d4c 	.word	0x00007d4c
    3c4c:	2000161c 	.word	0x2000161c
    3c50:	2000160c 	.word	0x2000160c
    3c54:	00007d58 	.word	0x00007d58
    3c58:	00007d5c 	.word	0x00007d5c

00003c5c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3c5c:	4b03      	ldr	r3, [pc, #12]	; (3c6c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3c5e:	e000      	b.n	3c62 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    3c60:	3318      	adds	r3, #24
	while (dev < __device_end) {
    3c62:	4a03      	ldr	r2, [pc, #12]	; (3c70 <z_device_state_init+0x14>)
    3c64:	4293      	cmp	r3, r2
    3c66:	d3fb      	bcc.n	3c60 <z_device_state_init+0x4>
	}
}
    3c68:	4770      	bx	lr
    3c6a:	bf00      	nop
    3c6c:	000072d4 	.word	0x000072d4
    3c70:	0000734c 	.word	0x0000734c

00003c74 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    3c74:	b570      	push	{r4, r5, r6, lr}
    3c76:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3c78:	4b12      	ldr	r3, [pc, #72]	; (3cc4 <z_sys_init_run_level+0x50>)
    3c7a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3c7e:	e009      	b.n	3c94 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3c80:	4243      	negs	r3, r0
    3c82:	e017      	b.n	3cb4 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    3c84:	68ea      	ldr	r2, [r5, #12]
    3c86:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
    3c88:	68ea      	ldr	r2, [r5, #12]
    3c8a:	7853      	ldrb	r3, [r2, #1]
    3c8c:	f043 0301 	orr.w	r3, r3, #1
    3c90:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3c92:	3408      	adds	r4, #8
    3c94:	1c73      	adds	r3, r6, #1
    3c96:	4a0b      	ldr	r2, [pc, #44]	; (3cc4 <z_sys_init_run_level+0x50>)
    3c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3c9c:	42a3      	cmp	r3, r4
    3c9e:	d910      	bls.n	3cc2 <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
    3ca0:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
    3ca2:	b15d      	cbz	r5, 3cbc <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
    3ca4:	6823      	ldr	r3, [r4, #0]
    3ca6:	4628      	mov	r0, r5
    3ca8:	4798      	blx	r3
			if (rc != 0) {
    3caa:	4603      	mov	r3, r0
    3cac:	2800      	cmp	r0, #0
    3cae:	d0eb      	beq.n	3c88 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3cb0:	2800      	cmp	r0, #0
    3cb2:	dbe5      	blt.n	3c80 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3cb4:	2bff      	cmp	r3, #255	; 0xff
    3cb6:	dde5      	ble.n	3c84 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3cb8:	23ff      	movs	r3, #255	; 0xff
    3cba:	e7e3      	b.n	3c84 <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
    3cbc:	6823      	ldr	r3, [r4, #0]
    3cbe:	4798      	blx	r3
    3cc0:	e7e7      	b.n	3c92 <z_sys_init_run_level+0x1e>
		}
	}
}
    3cc2:	bd70      	pop	{r4, r5, r6, pc}
    3cc4:	00007d78 	.word	0x00007d78

00003cc8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3cc8:	b510      	push	{r4, lr}
    3cca:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    3ccc:	23b0      	movs	r3, #176	; 0xb0
    3cce:	4c11      	ldr	r4, [pc, #68]	; (3d14 <init_idle_thread+0x4c>)
    3cd0:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    3cd4:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3cd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3cdc:	4b0e      	ldr	r3, [pc, #56]	; (3d18 <init_idle_thread+0x50>)
    3cde:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	z_setup_new_thread(thread, stack,
    3ce2:	4a0e      	ldr	r2, [pc, #56]	; (3d1c <init_idle_thread+0x54>)
    3ce4:	9205      	str	r2, [sp, #20]
    3ce6:	2201      	movs	r2, #1
    3ce8:	9204      	str	r2, [sp, #16]
    3cea:	220f      	movs	r2, #15
    3cec:	9203      	str	r2, [sp, #12]
    3cee:	2200      	movs	r2, #0
    3cf0:	9202      	str	r2, [sp, #8]
    3cf2:	9201      	str	r2, [sp, #4]
    3cf4:	9300      	str	r3, [sp, #0]
    3cf6:	4b0a      	ldr	r3, [pc, #40]	; (3d20 <init_idle_thread+0x58>)
    3cf8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3cfc:	4909      	ldr	r1, [pc, #36]	; (3d24 <init_idle_thread+0x5c>)
    3cfe:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
    3d02:	4620      	mov	r0, r4
    3d04:	f000 f94c 	bl	3fa0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3d08:	7b63      	ldrb	r3, [r4, #13]
    3d0a:	f023 0304 	bic.w	r3, r3, #4
    3d0e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3d10:	b006      	add	sp, #24
    3d12:	bd10      	pop	{r4, pc}
    3d14:	20000228 	.word	0x20000228
    3d18:	20001ac4 	.word	0x20001ac4
    3d1c:	00007d68 	.word	0x00007d68
    3d20:	000040fd 	.word	0x000040fd
    3d24:	20002540 	.word	0x20002540

00003d28 <bg_thread_main>:
{
    3d28:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3d2a:	4b0a      	ldr	r3, [pc, #40]	; (3d54 <bg_thread_main+0x2c>)
    3d2c:	2201      	movs	r2, #1
    3d2e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3d30:	2003      	movs	r0, #3
    3d32:	f7ff ff9f 	bl	3c74 <z_sys_init_run_level>
	boot_banner();
    3d36:	f001 f8cb 	bl	4ed0 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    3d3a:	2004      	movs	r0, #4
    3d3c:	f7ff ff9a 	bl	3c74 <z_sys_init_run_level>
	z_init_static_threads();
    3d40:	f000 f992 	bl	4068 <z_init_static_threads>
	(void)main();
    3d44:	f7fc fde4 	bl	910 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3d48:	4a03      	ldr	r2, [pc, #12]	; (3d58 <bg_thread_main+0x30>)
    3d4a:	7b13      	ldrb	r3, [r2, #12]
    3d4c:	f023 0301 	bic.w	r3, r3, #1
    3d50:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3d52:	bd08      	pop	{r3, pc}
    3d54:	20001cde 	.word	0x20001cde
    3d58:	200002d8 	.word	0x200002d8

00003d5c <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3d5c:	b508      	push	{r3, lr}
    3d5e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3d60:	4a01      	ldr	r2, [pc, #4]	; (3d68 <switch_to_main_thread+0xc>)
    3d62:	4802      	ldr	r0, [pc, #8]	; (3d6c <switch_to_main_thread+0x10>)
    3d64:	f7fd fdfa 	bl	195c <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3d68:	00003d29 	.word	0x00003d29
    3d6c:	200002d8 	.word	0x200002d8

00003d70 <z_bss_zero>:
{
    3d70:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3d72:	4803      	ldr	r0, [pc, #12]	; (3d80 <z_bss_zero+0x10>)
    3d74:	4a03      	ldr	r2, [pc, #12]	; (3d84 <z_bss_zero+0x14>)
    3d76:	1a12      	subs	r2, r2, r0
    3d78:	2100      	movs	r1, #0
    3d7a:	f003 f84c 	bl	6e16 <z_early_memset>
}
    3d7e:	bd08      	pop	{r3, pc}
    3d80:	20000208 	.word	0x20000208
    3d84:	20001ce0 	.word	0x20001ce0

00003d88 <z_init_cpu>:
{
    3d88:	b510      	push	{r4, lr}
    3d8a:	4604      	mov	r4, r0
	init_idle_thread(id);
    3d8c:	f7ff ff9c 	bl	3cc8 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3d90:	23b0      	movs	r3, #176	; 0xb0
    3d92:	490b      	ldr	r1, [pc, #44]	; (3dc0 <z_init_cpu+0x38>)
    3d94:	fb03 1104 	mla	r1, r3, r4, r1
    3d98:	4a0a      	ldr	r2, [pc, #40]	; (3dc4 <z_init_cpu+0x3c>)
    3d9a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3d9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3da2:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3da4:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3da6:	eb04 1144 	add.w	r1, r4, r4, lsl #5
    3daa:	4b07      	ldr	r3, [pc, #28]	; (3dc8 <z_init_cpu+0x40>)
    3dac:	eb03 1381 	add.w	r3, r3, r1, lsl #6
    3db0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
    3db4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3db8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    3dbc:	6053      	str	r3, [r2, #4]
}
    3dbe:	bd10      	pop	{r4, pc}
    3dc0:	20000228 	.word	0x20000228
    3dc4:	20001ac4 	.word	0x20001ac4
    3dc8:	20001d00 	.word	0x20001d00

00003dcc <prepare_multithreading>:
{
    3dcc:	b570      	push	{r4, r5, r6, lr}
    3dce:	b086      	sub	sp, #24
	z_sched_init();
    3dd0:	f000 fe3c 	bl	4a4c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    3dd4:	4d10      	ldr	r5, [pc, #64]	; (3e18 <prepare_multithreading+0x4c>)
    3dd6:	4b11      	ldr	r3, [pc, #68]	; (3e1c <prepare_multithreading+0x50>)
    3dd8:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3dda:	4b11      	ldr	r3, [pc, #68]	; (3e20 <prepare_multithreading+0x54>)
    3ddc:	9305      	str	r3, [sp, #20]
    3dde:	2301      	movs	r3, #1
    3de0:	9304      	str	r3, [sp, #16]
    3de2:	2400      	movs	r4, #0
    3de4:	9403      	str	r4, [sp, #12]
    3de6:	9402      	str	r4, [sp, #8]
    3de8:	9401      	str	r4, [sp, #4]
    3dea:	9400      	str	r4, [sp, #0]
    3dec:	4b0d      	ldr	r3, [pc, #52]	; (3e24 <prepare_multithreading+0x58>)
    3dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3df2:	490d      	ldr	r1, [pc, #52]	; (3e28 <prepare_multithreading+0x5c>)
    3df4:	4628      	mov	r0, r5
    3df6:	f000 f8d3 	bl	3fa0 <z_setup_new_thread>
    3dfa:	4606      	mov	r6, r0
    3dfc:	7b6b      	ldrb	r3, [r5, #13]
    3dfe:	f023 0304 	bic.w	r3, r3, #4
    3e02:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    3e04:	4628      	mov	r0, r5
    3e06:	f003 f8f2 	bl	6fee <z_ready_thread>
	z_init_cpu(0);
    3e0a:	4620      	mov	r0, r4
    3e0c:	f7ff ffbc 	bl	3d88 <z_init_cpu>
}
    3e10:	4630      	mov	r0, r6
    3e12:	b006      	add	sp, #24
    3e14:	bd70      	pop	{r4, r5, r6, pc}
    3e16:	bf00      	nop
    3e18:	200002d8 	.word	0x200002d8
    3e1c:	20001ac4 	.word	0x20001ac4
    3e20:	00007d70 	.word	0x00007d70
    3e24:	00003d29 	.word	0x00003d29
    3e28:	200026c0 	.word	0x200026c0

00003e2c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    3e2c:	b500      	push	{lr}
    3e2e:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3e30:	2000      	movs	r0, #0
    3e32:	f7ff ff1f 	bl	3c74 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3e36:	4b1d      	ldr	r3, [pc, #116]	; (3eac <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3e38:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3e3c:	4c1c      	ldr	r4, [pc, #112]	; (3eb0 <z_cstart+0x84>)
    3e3e:	6963      	ldr	r3, [r4, #20]
    3e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3e44:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3e46:	23e0      	movs	r3, #224	; 0xe0
    3e48:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3e4c:	2500      	movs	r5, #0
    3e4e:	77e5      	strb	r5, [r4, #31]
    3e50:	7625      	strb	r5, [r4, #24]
    3e52:	7665      	strb	r5, [r4, #25]
    3e54:	76a5      	strb	r5, [r4, #26]
    3e56:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e5c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3e60:	6263      	str	r3, [r4, #36]	; 0x24
    3e62:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3e66:	f7fd ff43 	bl	1cf0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3e6a:	f7fd fc57 	bl	171c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3e6e:	f04f 33ff 	mov.w	r3, #4294967295
    3e72:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3e74:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3e76:	f7fe f85d 	bl	1f34 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3e7a:	f7fd ffed 	bl	1e58 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3e7e:	2401      	movs	r4, #1
    3e80:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3e84:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3e88:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    3e8a:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    3e8c:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    3e8e:	4b09      	ldr	r3, [pc, #36]	; (3eb4 <z_cstart+0x88>)
    3e90:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3e94:	f7ff fee2 	bl	3c5c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3e98:	4620      	mov	r0, r4
    3e9a:	f7ff feeb 	bl	3c74 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3e9e:	2002      	movs	r0, #2
    3ea0:	f7ff fee8 	bl	3c74 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3ea4:	f7ff ff92 	bl	3dcc <prepare_multithreading>
    3ea8:	f7ff ff58 	bl	3d5c <switch_to_main_thread>
    3eac:	20002540 	.word	0x20002540
    3eb0:	e000ed00 	.word	0xe000ed00
    3eb4:	20001ac4 	.word	0x20001ac4

00003eb8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    3eb8:	b510      	push	{r4, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3eba:	4c06      	ldr	r4, [pc, #24]	; (3ed4 <init_mem_slab_module+0x1c>)
	int rc = 0;
    3ebc:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3ebe:	e000      	b.n	3ec2 <init_mem_slab_module+0xa>
    3ec0:	341c      	adds	r4, #28
    3ec2:	4b05      	ldr	r3, [pc, #20]	; (3ed8 <init_mem_slab_module+0x20>)
    3ec4:	429c      	cmp	r4, r3
    3ec6:	d204      	bcs.n	3ed2 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3ec8:	4620      	mov	r0, r4
    3eca:	f002 ffac 	bl	6e26 <create_free_list>
		if (rc < 0) {
    3ece:	2800      	cmp	r0, #0
    3ed0:	daf6      	bge.n	3ec0 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    3ed2:	bd10      	pop	{r4, pc}
    3ed4:	2000018e 	.word	0x2000018e
    3ed8:	2000018e 	.word	0x2000018e

00003edc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3edc:	b530      	push	{r4, r5, lr}
    3ede:	b083      	sub	sp, #12
    3ee0:	460d      	mov	r5, r1
	__asm__ volatile(
    3ee2:	f04f 0120 	mov.w	r1, #32
    3ee6:	f3ef 8c11 	mrs	ip, BASEPRI
    3eea:	f381 8812 	msr	BASEPRI_MAX, r1
    3eee:	f3bf 8f6f 	isb	sy
    3ef2:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3ef4:	6944      	ldr	r4, [r0, #20]
    3ef6:	b164      	cbz	r4, 3f12 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    3ef8:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3efa:	6823      	ldr	r3, [r4, #0]
    3efc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3efe:	6983      	ldr	r3, [r0, #24]
    3f00:	3301      	adds	r3, #1
    3f02:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3f04:	2000      	movs	r0, #0
	__asm__ volatile(
    3f06:	f381 8811 	msr	BASEPRI, r1
    3f0a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    3f0e:	b003      	add	sp, #12
    3f10:	bd30      	pop	{r4, r5, pc}
    3f12:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3f16:	ea53 0402 	orrs.w	r4, r3, r2
    3f1a:	d104      	bne.n	3f26 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    3f1c:	2300      	movs	r3, #0
    3f1e:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3f20:	f06f 000b 	mvn.w	r0, #11
    3f24:	e7ef      	b.n	3f06 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3f26:	9200      	str	r2, [sp, #0]
    3f28:	9301      	str	r3, [sp, #4]
    3f2a:	4602      	mov	r2, r0
    3f2c:	4670      	mov	r0, lr
    3f2e:	f000 fc87 	bl	4840 <z_pend_curr>
		if (result == 0) {
    3f32:	2800      	cmp	r0, #0
    3f34:	d1eb      	bne.n	3f0e <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    3f36:	4b02      	ldr	r3, [pc, #8]	; (3f40 <k_mem_slab_alloc+0x64>)
    3f38:	689b      	ldr	r3, [r3, #8]
    3f3a:	695b      	ldr	r3, [r3, #20]
    3f3c:	602b      	str	r3, [r5, #0]
		return result;
    3f3e:	e7e6      	b.n	3f0e <k_mem_slab_alloc+0x32>
    3f40:	20001ac4 	.word	0x20001ac4

00003f44 <z_thread_monitor_exit>:
	__asm__ volatile(
    3f44:	f04f 0320 	mov.w	r3, #32
    3f48:	f3ef 8111 	mrs	r1, BASEPRI
    3f4c:	f383 8812 	msr	BASEPRI_MAX, r3
    3f50:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3f54:	4b0a      	ldr	r3, [pc, #40]	; (3f80 <z_thread_monitor_exit+0x3c>)
    3f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f58:	4283      	cmp	r3, r0
    3f5a:	d104      	bne.n	3f66 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    3f5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3f5e:	4b08      	ldr	r3, [pc, #32]	; (3f80 <z_thread_monitor_exit+0x3c>)
    3f60:	625a      	str	r2, [r3, #36]	; 0x24
    3f62:	e007      	b.n	3f74 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3f64:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3f66:	b113      	cbz	r3, 3f6e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3f68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    3f6a:	4282      	cmp	r2, r0
    3f6c:	d1fa      	bne.n	3f64 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    3f6e:	b10b      	cbz	r3, 3f74 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3f70:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3f72:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3f74:	f381 8811 	msr	BASEPRI, r1
    3f78:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    3f7c:	4770      	bx	lr
    3f7e:	bf00      	nop
    3f80:	20001ac4 	.word	0x20001ac4

00003f84 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3f84:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3f86:	ea53 0102 	orrs.w	r1, r3, r2
    3f8a:	d102      	bne.n	3f92 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    3f8c:	f002 ffb8 	bl	6f00 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3f90:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3f92:	4902      	ldr	r1, [pc, #8]	; (3f9c <schedule_new_thread+0x18>)
    3f94:	3018      	adds	r0, #24
    3f96:	f000 fe97 	bl	4cc8 <z_add_timeout>
    3f9a:	e7f9      	b.n	3f90 <schedule_new_thread+0xc>
    3f9c:	0000707b 	.word	0x0000707b

00003fa0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fa4:	b085      	sub	sp, #20
    3fa6:	4604      	mov	r4, r0
    3fa8:	460f      	mov	r7, r1
    3faa:	4615      	mov	r5, r2
    3fac:	461e      	mov	r6, r3
    3fae:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3fb2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3fb6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    3fba:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3fbe:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3fc2:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3fc4:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3fc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3fc8:	2204      	movs	r2, #4
    3fca:	9911      	ldr	r1, [sp, #68]	; 0x44
    3fcc:	f002 ff9c 	bl	6f08 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3fd0:	462a      	mov	r2, r5
    3fd2:	4639      	mov	r1, r7
    3fd4:	4620      	mov	r0, r4
    3fd6:	f002 ff7a 	bl	6ece <setup_thread_stack>
    3fda:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3fdc:	f8cd 8008 	str.w	r8, [sp, #8]
    3fe0:	f8cd 9004 	str.w	r9, [sp, #4]
    3fe4:	f8cd a000 	str.w	sl, [sp]
    3fe8:	4633      	mov	r3, r6
    3fea:	4602      	mov	r2, r0
    3fec:	4639      	mov	r1, r7
    3fee:	4620      	mov	r0, r4
    3ff0:	f7fd fc6e 	bl	18d0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    3ff4:	2300      	movs	r3, #0
    3ff6:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    3ff8:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    3ffa:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    3ffe:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    4002:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    4006:	f04f 0320 	mov.w	r3, #32
    400a:	f3ef 8211 	mrs	r2, BASEPRI
    400e:	f383 8812 	msr	BASEPRI_MAX, r3
    4012:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    4016:	4b13      	ldr	r3, [pc, #76]	; (4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>)
    4018:	6a59      	ldr	r1, [r3, #36]	; 0x24
    401a:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    401c:	625c      	str	r4, [r3, #36]	; 0x24
	__asm__ volatile(
    401e:	f382 8811 	msr	BASEPRI, r2
    4022:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    4026:	f1bb 0f00 	cmp.w	fp, #0
    402a:	d013      	beq.n	4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>
		strncpy(new_thread->name, name,
    402c:	221f      	movs	r2, #31
    402e:	4659      	mov	r1, fp
    4030:	f104 0074 	add.w	r0, r4, #116	; 0x74
    4034:	f001 ff09 	bl	5e4a <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    4038:	2300      	movs	r3, #0
    403a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    403e:	4b09      	ldr	r3, [pc, #36]	; (4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>)
    4040:	689b      	ldr	r3, [r3, #8]
    4042:	b15b      	cbz	r3, 405c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    4044:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    4048:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    404c:	4628      	mov	r0, r5
    404e:	b005      	add	sp, #20
    4050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    4054:	2300      	movs	r3, #0
    4056:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    405a:	e7f0      	b.n	403e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e>
		new_thread->resource_pool = NULL;
    405c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    4060:	e7f4      	b.n	404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    4062:	bf00      	nop
    4064:	20001ac4 	.word	0x20001ac4

00004068 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    4068:	b530      	push	{r4, r5, lr}
    406a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    406c:	4c21      	ldr	r4, [pc, #132]	; (40f4 <z_init_static_threads+0x8c>)
    406e:	e014      	b.n	409a <z_init_static_threads+0x32>
		z_setup_new_thread(
    4070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4072:	9305      	str	r3, [sp, #20]
    4074:	6a23      	ldr	r3, [r4, #32]
    4076:	9304      	str	r3, [sp, #16]
    4078:	69e3      	ldr	r3, [r4, #28]
    407a:	9303      	str	r3, [sp, #12]
    407c:	69a3      	ldr	r3, [r4, #24]
    407e:	9302      	str	r3, [sp, #8]
    4080:	6963      	ldr	r3, [r4, #20]
    4082:	9301      	str	r3, [sp, #4]
    4084:	6923      	ldr	r3, [r4, #16]
    4086:	9300      	str	r3, [sp, #0]
    4088:	68e3      	ldr	r3, [r4, #12]
    408a:	68a2      	ldr	r2, [r4, #8]
    408c:	6861      	ldr	r1, [r4, #4]
    408e:	6820      	ldr	r0, [r4, #0]
    4090:	f7ff ff86 	bl	3fa0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    4094:	6823      	ldr	r3, [r4, #0]
    4096:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4098:	342c      	adds	r4, #44	; 0x2c
    409a:	4b17      	ldr	r3, [pc, #92]	; (40f8 <z_init_static_threads+0x90>)
    409c:	429c      	cmp	r4, r3
    409e:	d3e7      	bcc.n	4070 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    40a0:	f000 fa96 	bl	45d0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    40a4:	4c13      	ldr	r4, [pc, #76]	; (40f4 <z_init_static_threads+0x8c>)
    40a6:	e000      	b.n	40aa <z_init_static_threads+0x42>
    40a8:	342c      	adds	r4, #44	; 0x2c
    40aa:	4b13      	ldr	r3, [pc, #76]	; (40f8 <z_init_static_threads+0x90>)
    40ac:	429c      	cmp	r4, r3
    40ae:	d21c      	bcs.n	40ea <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    40b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    40b2:	f1b0 3fff 	cmp.w	r0, #4294967295
    40b6:	d0f7      	beq.n	40a8 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    40b8:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    40ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    40be:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    40c0:	03c9      	lsls	r1, r1, #15
    40c2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    40c6:	03c0      	lsls	r0, r0, #15
    40c8:	f240 33e7 	movw	r3, #999	; 0x3e7
    40cc:	18c0      	adds	r0, r0, r3
    40ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    40d2:	f04f 0300 	mov.w	r3, #0
    40d6:	f141 0100 	adc.w	r1, r1, #0
    40da:	f7fc f811 	bl	100 <__aeabi_uldivmod>
    40de:	4602      	mov	r2, r0
    40e0:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    40e2:	4628      	mov	r0, r5
    40e4:	f7ff ff4e 	bl	3f84 <schedule_new_thread>
    40e8:	e7de      	b.n	40a8 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    40ea:	f000 fc5d 	bl	49a8 <k_sched_unlock>
}
    40ee:	b007      	add	sp, #28
    40f0:	bd30      	pop	{r4, r5, pc}
    40f2:	bf00      	nop
    40f4:	000074cc 	.word	0x000074cc
    40f8:	000074cc 	.word	0x000074cc

000040fc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    40fc:	b508      	push	{r3, lr}
    40fe:	e001      	b.n	4104 <idle+0x8>
	arch_cpu_idle();
    4100:	f7fd fb12 	bl	1728 <arch_cpu_idle>
	__asm__ volatile(
    4104:	f04f 0220 	mov.w	r2, #32
    4108:	f3ef 8311 	mrs	r3, BASEPRI
    410c:	f382 8812 	msr	BASEPRI_MAX, r2
    4110:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4114:	f003 f87b 	bl	720e <z_get_next_timeout_expiry>
    4118:	4b05      	ldr	r3, [pc, #20]	; (4130 <idle+0x34>)
    411a:	6158      	str	r0, [r3, #20]
	return !z_sys_post_kernel;
    411c:	4b05      	ldr	r3, [pc, #20]	; (4134 <idle+0x38>)
    411e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4120:	2b00      	cmp	r3, #0
    4122:	d0ed      	beq.n	4100 <idle+0x4>
    4124:	f7fd f914 	bl	1350 <pm_system_suspend>
    4128:	2800      	cmp	r0, #0
    412a:	d1eb      	bne.n	4104 <idle+0x8>
    412c:	e7e8      	b.n	4100 <idle+0x4>
    412e:	bf00      	nop
    4130:	20001ac4 	.word	0x20001ac4
    4134:	20001cde 	.word	0x20001cde

00004138 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
    4138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    413c:	b083      	sub	sp, #12
    413e:	4604      	mov	r4, r0
    4140:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    4142:	f100 0808 	add.w	r8, r0, #8
    4146:	f04f 0120 	mov.w	r1, #32
    414a:	f3ef 8611 	mrs	r6, BASEPRI
    414e:	f381 8812 	msr	BASEPRI_MAX, r1
    4152:	f3bf 8f6f 	isb	sy
    4156:	4637      	mov	r7, r6

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
    4158:	6a00      	ldr	r0, [r0, #32]
    415a:	68e1      	ldr	r1, [r4, #12]
    415c:	4288      	cmp	r0, r1
    415e:	d30b      	bcc.n	4178 <z_impl_k_msgq_put+0x40>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4160:	ea53 0102 	orrs.w	r1, r3, r2
    4164:	d132      	bne.n	41cc <z_impl_k_msgq_put+0x94>
		/* don't wait for message space to become available */
		result = -ENOMSG;
    4166:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
    416a:	f387 8811 	msr	BASEPRI, r7
    416e:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    4172:	b003      	add	sp, #12
    4174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    4178:	4620      	mov	r0, r4
    417a:	f002 ffd0 	bl	711e <z_unpend_first_thread>
		if (pending_thread != NULL) {
    417e:	4681      	mov	r9, r0
    4180:	b180      	cbz	r0, 41a4 <z_impl_k_msgq_put+0x6c>
			(void)memcpy(pending_thread->base.swap_data, data,
    4182:	68a2      	ldr	r2, [r4, #8]
    4184:	4629      	mov	r1, r5
    4186:	6940      	ldr	r0, [r0, #20]
    4188:	f001 feb7 	bl	5efa <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    418c:	2400      	movs	r4, #0
    418e:	f8c9 40ac 	str.w	r4, [r9, #172]	; 0xac
			z_ready_thread(pending_thread);
    4192:	4648      	mov	r0, r9
    4194:	f002 ff2b 	bl	6fee <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    4198:	4631      	mov	r1, r6
    419a:	4640      	mov	r0, r8
    419c:	f000 fa02 	bl	45a4 <z_reschedule>
			return 0;
    41a0:	4620      	mov	r0, r4
    41a2:	e7e6      	b.n	4172 <z_impl_k_msgq_put+0x3a>
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
    41a4:	68a2      	ldr	r2, [r4, #8]
    41a6:	4629      	mov	r1, r5
    41a8:	69e0      	ldr	r0, [r4, #28]
    41aa:	f001 fea6 	bl	5efa <memcpy>
			msgq->write_ptr += msgq->msg_size;
    41ae:	69e3      	ldr	r3, [r4, #28]
    41b0:	68a2      	ldr	r2, [r4, #8]
    41b2:	4413      	add	r3, r2
    41b4:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    41b6:	6962      	ldr	r2, [r4, #20]
    41b8:	4293      	cmp	r3, r2
    41ba:	d004      	beq.n	41c6 <z_impl_k_msgq_put+0x8e>
			msgq->used_msgs++;
    41bc:	6a23      	ldr	r3, [r4, #32]
    41be:	3301      	adds	r3, #1
    41c0:	6223      	str	r3, [r4, #32]
		result = 0;
    41c2:	2000      	movs	r0, #0
    41c4:	e7d1      	b.n	416a <z_impl_k_msgq_put+0x32>
				msgq->write_ptr = msgq->buffer_start;
    41c6:	6923      	ldr	r3, [r4, #16]
    41c8:	61e3      	str	r3, [r4, #28]
    41ca:	e7f7      	b.n	41bc <z_impl_k_msgq_put+0x84>
		_current->base.swap_data = (void *) data;
    41cc:	4905      	ldr	r1, [pc, #20]	; (41e4 <z_impl_k_msgq_put+0xac>)
    41ce:	6889      	ldr	r1, [r1, #8]
    41d0:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    41d2:	9200      	str	r2, [sp, #0]
    41d4:	9301      	str	r3, [sp, #4]
    41d6:	4622      	mov	r2, r4
    41d8:	4631      	mov	r1, r6
    41da:	4640      	mov	r0, r8
    41dc:	f000 fb30 	bl	4840 <z_pend_curr>
		return result;
    41e0:	e7c7      	b.n	4172 <z_impl_k_msgq_put+0x3a>
    41e2:	bf00      	nop
    41e4:	20001ac4 	.word	0x20001ac4

000041e8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    41e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41ec:	b082      	sub	sp, #8
    41ee:	4604      	mov	r4, r0
    41f0:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    41f2:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
    41f6:	f04f 0120 	mov.w	r1, #32
    41fa:	f3ef 8511 	mrs	r5, BASEPRI
    41fe:	f381 8812 	msr	BASEPRI_MAX, r1
    4202:	f3bf 8f6f 	isb	sy
    4206:	462e      	mov	r6, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
    4208:	6a21      	ldr	r1, [r4, #32]
    420a:	b959      	cbnz	r1, 4224 <z_impl_k_msgq_get+0x3c>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    420c:	ea53 0102 	orrs.w	r1, r3, r2
    4210:	d13e      	bne.n	4290 <z_impl_k_msgq_get+0xa8>
		/* don't wait for a message to become available */
		result = -ENOMSG;
    4212:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
    4216:	f386 8811 	msr	BASEPRI, r6
    421a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    421e:	b002      	add	sp, #8
    4220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
    4224:	68a2      	ldr	r2, [r4, #8]
    4226:	69a1      	ldr	r1, [r4, #24]
    4228:	f001 fe67 	bl	5efa <memcpy>
		msgq->read_ptr += msgq->msg_size;
    422c:	69a3      	ldr	r3, [r4, #24]
    422e:	68a2      	ldr	r2, [r4, #8]
    4230:	4413      	add	r3, r2
    4232:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
    4234:	6962      	ldr	r2, [r4, #20]
    4236:	4293      	cmp	r3, r2
    4238:	d009      	beq.n	424e <z_impl_k_msgq_get+0x66>
		msgq->used_msgs--;
    423a:	6a23      	ldr	r3, [r4, #32]
    423c:	3b01      	subs	r3, #1
    423e:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    4240:	4620      	mov	r0, r4
    4242:	f002 ff6c 	bl	711e <z_unpend_first_thread>
		if (pending_thread != NULL) {
    4246:	4680      	mov	r8, r0
    4248:	b920      	cbnz	r0, 4254 <z_impl_k_msgq_get+0x6c>
		result = 0;
    424a:	2000      	movs	r0, #0
    424c:	e7e3      	b.n	4216 <z_impl_k_msgq_get+0x2e>
			msgq->read_ptr = msgq->buffer_start;
    424e:	6923      	ldr	r3, [r4, #16]
    4250:	61a3      	str	r3, [r4, #24]
    4252:	e7f2      	b.n	423a <z_impl_k_msgq_get+0x52>
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
    4254:	68a2      	ldr	r2, [r4, #8]
    4256:	6941      	ldr	r1, [r0, #20]
    4258:	69e0      	ldr	r0, [r4, #28]
    425a:	f001 fe4e 	bl	5efa <memcpy>
			msgq->write_ptr += msgq->msg_size;
    425e:	69e3      	ldr	r3, [r4, #28]
    4260:	68a2      	ldr	r2, [r4, #8]
    4262:	4413      	add	r3, r2
    4264:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    4266:	6962      	ldr	r2, [r4, #20]
    4268:	4293      	cmp	r3, r2
    426a:	d00e      	beq.n	428a <z_impl_k_msgq_get+0xa2>
			msgq->used_msgs++;
    426c:	6a23      	ldr	r3, [r4, #32]
    426e:	3301      	adds	r3, #1
    4270:	6223      	str	r3, [r4, #32]
    4272:	2400      	movs	r4, #0
    4274:	f8c8 40ac 	str.w	r4, [r8, #172]	; 0xac
			z_ready_thread(pending_thread);
    4278:	4640      	mov	r0, r8
    427a:	f002 feb8 	bl	6fee <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    427e:	4629      	mov	r1, r5
    4280:	4638      	mov	r0, r7
    4282:	f000 f98f 	bl	45a4 <z_reschedule>
			return 0;
    4286:	4620      	mov	r0, r4
    4288:	e7c9      	b.n	421e <z_impl_k_msgq_get+0x36>
				msgq->write_ptr = msgq->buffer_start;
    428a:	6923      	ldr	r3, [r4, #16]
    428c:	61e3      	str	r3, [r4, #28]
    428e:	e7ed      	b.n	426c <z_impl_k_msgq_get+0x84>
		_current->base.swap_data = data;
    4290:	4905      	ldr	r1, [pc, #20]	; (42a8 <z_impl_k_msgq_get+0xc0>)
    4292:	6889      	ldr	r1, [r1, #8]
    4294:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    4296:	9200      	str	r2, [sp, #0]
    4298:	9301      	str	r3, [sp, #4]
    429a:	4622      	mov	r2, r4
    429c:	4629      	mov	r1, r5
    429e:	4638      	mov	r0, r7
    42a0:	f000 face 	bl	4840 <z_pend_curr>
		return result;
    42a4:	e7bb      	b.n	421e <z_impl_k_msgq_get+0x36>
    42a6:	bf00      	nop
    42a8:	20001ac4 	.word	0x20001ac4

000042ac <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    42ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42b0:	b082      	sub	sp, #8
    42b2:	4604      	mov	r4, r0
    42b4:	461e      	mov	r6, r3
	__asm__ volatile(
    42b6:	f04f 0320 	mov.w	r3, #32
    42ba:	f3ef 8511 	mrs	r5, BASEPRI
    42be:	f383 8812 	msr	BASEPRI_MAX, r3
    42c2:	f3bf 8f6f 	isb	sy
    42c6:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    42c8:	68c1      	ldr	r1, [r0, #12]
    42ca:	b999      	cbnz	r1, 42f4 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    42cc:	2900      	cmp	r1, #0
    42ce:	d151      	bne.n	4374 <z_impl_k_mutex_lock+0xc8>
    42d0:	4a36      	ldr	r2, [pc, #216]	; (43ac <z_impl_k_mutex_lock+0x100>)
    42d2:	6892      	ldr	r2, [r2, #8]
    42d4:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    42d8:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    42da:	3101      	adds	r1, #1
    42dc:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    42de:	4a33      	ldr	r2, [pc, #204]	; (43ac <z_impl_k_mutex_lock+0x100>)
    42e0:	6892      	ldr	r2, [r2, #8]
    42e2:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    42e4:	f383 8811 	msr	BASEPRI, r3
    42e8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    42ec:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    42ee:	b002      	add	sp, #8
    42f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42f4:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    42f6:	6880      	ldr	r0, [r0, #8]
    42f8:	4a2c      	ldr	r2, [pc, #176]	; (43ac <z_impl_k_mutex_lock+0x100>)
    42fa:	6892      	ldr	r2, [r2, #8]
    42fc:	4290      	cmp	r0, r2
    42fe:	d0e5      	beq.n	42cc <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4300:	ea56 0107 	orrs.w	r1, r6, r7
    4304:	d038      	beq.n	4378 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    4306:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    430a:	4641      	mov	r1, r8
    430c:	f992 000e 	ldrsb.w	r0, [r2, #14]
    4310:	f002 fe0b 	bl	6f2a <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4314:	4580      	cmp	r8, r0
    4316:	dc36      	bgt.n	4386 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    4318:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    431c:	9700      	str	r7, [sp, #0]
    431e:	9601      	str	r6, [sp, #4]
    4320:	4622      	mov	r2, r4
    4322:	4629      	mov	r1, r5
    4324:	4822      	ldr	r0, [pc, #136]	; (43b0 <z_impl_k_mutex_lock+0x104>)
    4326:	f000 fa8b 	bl	4840 <z_pend_curr>
	if (got_mutex == 0) {
    432a:	2800      	cmp	r0, #0
    432c:	d0df      	beq.n	42ee <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    432e:	f04f 0320 	mov.w	r3, #32
    4332:	f3ef 8511 	mrs	r5, BASEPRI
    4336:	f383 8812 	msr	BASEPRI_MAX, r3
    433a:	f3bf 8f6f 	isb	sy
    433e:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    4340:	68a3      	ldr	r3, [r4, #8]
    4342:	b343      	cbz	r3, 4396 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4344:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4346:	429c      	cmp	r4, r3
    4348:	d023      	beq.n	4392 <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    434a:	b313      	cbz	r3, 4392 <z_impl_k_mutex_lock+0xe6>
    434c:	6921      	ldr	r1, [r4, #16]
    434e:	f993 000e 	ldrsb.w	r0, [r3, #14]
    4352:	f002 fdea 	bl	6f2a <new_prio_for_inheritance>
    4356:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    4358:	4620      	mov	r0, r4
    435a:	f002 fdf1 	bl	6f40 <adjust_owner_prio>
    435e:	b9e8      	cbnz	r0, 439c <z_impl_k_mutex_lock+0xf0>
    4360:	f1b8 0f00 	cmp.w	r8, #0
    4364:	d11a      	bne.n	439c <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    4366:	f386 8811 	msr	BASEPRI, r6
    436a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    436e:	f06f 000a 	mvn.w	r0, #10
    4372:	e7bc      	b.n	42ee <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    4374:	6922      	ldr	r2, [r4, #16]
    4376:	e7af      	b.n	42d8 <z_impl_k_mutex_lock+0x2c>
    4378:	f385 8811 	msr	BASEPRI, r5
    437c:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4380:	f06f 000f 	mvn.w	r0, #15
    4384:	e7b3      	b.n	42ee <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    4386:	4601      	mov	r1, r0
    4388:	4620      	mov	r0, r4
    438a:	f002 fdd9 	bl	6f40 <adjust_owner_prio>
    438e:	4680      	mov	r8, r0
    4390:	e7c4      	b.n	431c <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4392:	6921      	ldr	r1, [r4, #16]
    4394:	e7e0      	b.n	4358 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    4396:	f1b8 0f00 	cmp.w	r8, #0
    439a:	d0e4      	beq.n	4366 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    439c:	4629      	mov	r1, r5
    439e:	4804      	ldr	r0, [pc, #16]	; (43b0 <z_impl_k_mutex_lock+0x104>)
    43a0:	f000 f900 	bl	45a4 <z_reschedule>
	return -EAGAIN;
    43a4:	f06f 000a 	mvn.w	r0, #10
    43a8:	e7a1      	b.n	42ee <z_impl_k_mutex_lock+0x42>
    43aa:	bf00      	nop
    43ac:	20001ac4 	.word	0x20001ac4
    43b0:	20001aec 	.word	0x20001aec

000043b4 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    43b4:	6883      	ldr	r3, [r0, #8]
    43b6:	b38b      	cbz	r3, 441c <z_impl_k_mutex_unlock+0x68>
{
    43b8:	b570      	push	{r4, r5, r6, lr}
    43ba:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    43bc:	4a1a      	ldr	r2, [pc, #104]	; (4428 <z_impl_k_mutex_unlock+0x74>)
    43be:	6892      	ldr	r2, [r2, #8]
    43c0:	4293      	cmp	r3, r2
    43c2:	d12e      	bne.n	4422 <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    43c4:	68c3      	ldr	r3, [r0, #12]
    43c6:	2b01      	cmp	r3, #1
    43c8:	d903      	bls.n	43d2 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    43ca:	3b01      	subs	r3, #1
    43cc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    43ce:	2000      	movs	r0, #0
}
    43d0:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    43d2:	f04f 0320 	mov.w	r3, #32
    43d6:	f3ef 8511 	mrs	r5, BASEPRI
    43da:	f383 8812 	msr	BASEPRI_MAX, r3
    43de:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    43e2:	6901      	ldr	r1, [r0, #16]
    43e4:	f002 fdac 	bl	6f40 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    43e8:	4620      	mov	r0, r4
    43ea:	f002 fe98 	bl	711e <z_unpend_first_thread>
	mutex->owner = new_owner;
    43ee:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    43f0:	b168      	cbz	r0, 440e <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    43f2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    43f6:	6123      	str	r3, [r4, #16]
    43f8:	2400      	movs	r4, #0
    43fa:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    43fe:	f002 fdf6 	bl	6fee <z_ready_thread>
		z_reschedule(&lock, key);
    4402:	4629      	mov	r1, r5
    4404:	4809      	ldr	r0, [pc, #36]	; (442c <z_impl_k_mutex_unlock+0x78>)
    4406:	f000 f8cd 	bl	45a4 <z_reschedule>
	return 0;
    440a:	4620      	mov	r0, r4
    440c:	e7e0      	b.n	43d0 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    440e:	2000      	movs	r0, #0
    4410:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4412:	f385 8811 	msr	BASEPRI, r5
    4416:	f3bf 8f6f 	isb	sy
    441a:	e7d9      	b.n	43d0 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    441c:	f06f 0015 	mvn.w	r0, #21
}
    4420:	4770      	bx	lr
		return -EPERM;
    4422:	f04f 30ff 	mov.w	r0, #4294967295
    4426:	e7d3      	b.n	43d0 <z_impl_k_mutex_unlock+0x1c>
    4428:	20001ac4 	.word	0x20001ac4
    442c:	20001aec 	.word	0x20001aec

00004430 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4430:	b538      	push	{r3, r4, r5, lr}
    4432:	4604      	mov	r4, r0
	__asm__ volatile(
    4434:	f04f 0320 	mov.w	r3, #32
    4438:	f3ef 8511 	mrs	r5, BASEPRI
    443c:	f383 8812 	msr	BASEPRI_MAX, r3
    4440:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4444:	f002 fe6b 	bl	711e <z_unpend_first_thread>

	if (thread != NULL) {
    4448:	b148      	cbz	r0, 445e <z_impl_k_sem_give+0x2e>
    444a:	2200      	movs	r2, #0
    444c:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4450:	f002 fdcd 	bl	6fee <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4454:	4629      	mov	r1, r5
    4456:	4807      	ldr	r0, [pc, #28]	; (4474 <z_impl_k_sem_give+0x44>)
    4458:	f000 f8a4 	bl	45a4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    445c:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    445e:	68a3      	ldr	r3, [r4, #8]
    4460:	68e2      	ldr	r2, [r4, #12]
    4462:	4293      	cmp	r3, r2
    4464:	d003      	beq.n	446e <z_impl_k_sem_give+0x3e>
    4466:	2201      	movs	r2, #1
    4468:	4413      	add	r3, r2
    446a:	60a3      	str	r3, [r4, #8]
}
    446c:	e7f2      	b.n	4454 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    446e:	2200      	movs	r2, #0
    4470:	e7fa      	b.n	4468 <z_impl_k_sem_give+0x38>
    4472:	bf00      	nop
    4474:	20001aec 	.word	0x20001aec

00004478 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4478:	b510      	push	{r4, lr}
    447a:	b082      	sub	sp, #8
    447c:	f04f 0420 	mov.w	r4, #32
    4480:	f3ef 8111 	mrs	r1, BASEPRI
    4484:	f384 8812 	msr	BASEPRI_MAX, r4
    4488:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    448c:	6884      	ldr	r4, [r0, #8]
    448e:	b144      	cbz	r4, 44a2 <z_impl_k_sem_take+0x2a>
		sem->count--;
    4490:	3c01      	subs	r4, #1
    4492:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4494:	f381 8811 	msr	BASEPRI, r1
    4498:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    449c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    449e:	b002      	add	sp, #8
    44a0:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    44a2:	ea53 0402 	orrs.w	r4, r3, r2
    44a6:	d006      	beq.n	44b6 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    44a8:	9200      	str	r2, [sp, #0]
    44aa:	9301      	str	r3, [sp, #4]
    44ac:	4602      	mov	r2, r0
    44ae:	4805      	ldr	r0, [pc, #20]	; (44c4 <z_impl_k_sem_take+0x4c>)
    44b0:	f000 f9c6 	bl	4840 <z_pend_curr>
	return ret;
    44b4:	e7f3      	b.n	449e <z_impl_k_sem_take+0x26>
    44b6:	f381 8811 	msr	BASEPRI, r1
    44ba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    44be:	f06f 000f 	mvn.w	r0, #15
    44c2:	e7ec      	b.n	449e <z_impl_k_sem_take+0x26>
    44c4:	20001aec 	.word	0x20001aec

000044c8 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    44c8:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    44ca:	2b7f      	cmp	r3, #127	; 0x7f
    44cc:	d811      	bhi.n	44f2 <sliceable+0x2a>
	int ret = slice_ticks;
    44ce:	4b0e      	ldr	r3, [pc, #56]	; (4508 <sliceable+0x40>)
    44d0:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    44d2:	b17b      	cbz	r3, 44f4 <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    44d4:	f990 200e 	ldrsb.w	r2, [r0, #14]
    44d8:	4b0c      	ldr	r3, [pc, #48]	; (450c <sliceable+0x44>)
    44da:	681b      	ldr	r3, [r3, #0]
    44dc:	429a      	cmp	r2, r3
    44de:	db0c      	blt.n	44fa <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
    44e0:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    44e2:	f013 0f1f 	tst.w	r3, #31
    44e6:	d10a      	bne.n	44fe <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
    44e8:	4b09      	ldr	r3, [pc, #36]	; (4510 <sliceable+0x48>)
    44ea:	4298      	cmp	r0, r3
    44ec:	d009      	beq.n	4502 <sliceable+0x3a>
    44ee:	2301      	movs	r3, #1
    44f0:	e000      	b.n	44f4 <sliceable+0x2c>
    44f2:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    44f4:	f003 0001 	and.w	r0, r3, #1
    44f8:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    44fa:	2300      	movs	r3, #0
    44fc:	e7fa      	b.n	44f4 <sliceable+0x2c>
    44fe:	2300      	movs	r3, #0
    4500:	e7f8      	b.n	44f4 <sliceable+0x2c>
    4502:	2300      	movs	r3, #0
    4504:	e7f6      	b.n	44f4 <sliceable+0x2c>
    4506:	bf00      	nop
    4508:	20001af8 	.word	0x20001af8
    450c:	20001af4 	.word	0x20001af4
    4510:	20000228 	.word	0x20000228

00004514 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    4514:	4b04      	ldr	r3, [pc, #16]	; (4528 <slice_timeout+0x14>)
    4516:	1ac0      	subs	r0, r0, r3
    4518:	10c0      	asrs	r0, r0, #3
    451a:	4b04      	ldr	r3, [pc, #16]	; (452c <slice_timeout+0x18>)
    451c:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
    4520:	4b03      	ldr	r3, [pc, #12]	; (4530 <slice_timeout+0x1c>)
    4522:	2201      	movs	r2, #1
    4524:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    4526:	4770      	bx	lr
    4528:	20000388 	.word	0x20000388
    452c:	aaaaaaab 	.word	0xaaaaaaab
    4530:	20001af0 	.word	0x20001af0

00004534 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4534:	f1b3 3fff 	cmp.w	r3, #4294967295
    4538:	bf08      	it	eq
    453a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    453e:	d100      	bne.n	4542 <add_thread_timeout+0xe>
    4540:	4770      	bx	lr
{
    4542:	b508      	push	{r3, lr}
    4544:	4902      	ldr	r1, [pc, #8]	; (4550 <add_thread_timeout+0x1c>)
    4546:	3018      	adds	r0, #24
    4548:	f000 fbbe 	bl	4cc8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    454c:	bd08      	pop	{r3, pc}
    454e:	bf00      	nop
    4550:	0000707b 	.word	0x0000707b

00004554 <z_reset_time_slice>:
{
    4554:	b570      	push	{r4, r5, r6, lr}
    4556:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
    4558:	4b0d      	ldr	r3, [pc, #52]	; (4590 <z_reset_time_slice+0x3c>)
    455a:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    455c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    4560:	4c0c      	ldr	r4, [pc, #48]	; (4594 <z_reset_time_slice+0x40>)
    4562:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    4566:	4620      	mov	r0, r4
    4568:	f002 fe33 	bl	71d2 <z_abort_timeout>
	slice_expired[cpu] = false;
    456c:	4b0a      	ldr	r3, [pc, #40]	; (4598 <z_reset_time_slice+0x44>)
    456e:	2200      	movs	r2, #0
    4570:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    4572:	4628      	mov	r0, r5
    4574:	f7ff ffa8 	bl	44c8 <sliceable>
    4578:	b900      	cbnz	r0, 457c <z_reset_time_slice+0x28>
}
    457a:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
    457c:	4b07      	ldr	r3, [pc, #28]	; (459c <z_reset_time_slice+0x48>)
    457e:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
    4580:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    4582:	17d3      	asrs	r3, r2, #31
    4584:	4906      	ldr	r1, [pc, #24]	; (45a0 <z_reset_time_slice+0x4c>)
    4586:	4620      	mov	r0, r4
    4588:	f000 fb9e 	bl	4cc8 <z_add_timeout>
}
    458c:	e7f5      	b.n	457a <z_reset_time_slice+0x26>
    458e:	bf00      	nop
    4590:	20001ac4 	.word	0x20001ac4
    4594:	20000388 	.word	0x20000388
    4598:	20001af0 	.word	0x20001af0
    459c:	20001af8 	.word	0x20001af8
    45a0:	00004515 	.word	0x00004515

000045a4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    45a4:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    45a6:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    45a8:	b959      	cbnz	r1, 45c2 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    45aa:	f3ef 8205 	mrs	r2, IPSR
    45ae:	b942      	cbnz	r2, 45c2 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    45b0:	4a06      	ldr	r2, [pc, #24]	; (45cc <z_reschedule+0x28>)
    45b2:	6990      	ldr	r0, [r2, #24]
	return new_thread != _current;
    45b4:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    45b6:	4290      	cmp	r0, r2
    45b8:	d003      	beq.n	45c2 <z_reschedule+0x1e>
	ret = arch_swap(key);
    45ba:	4608      	mov	r0, r1
    45bc:	f7fd f930 	bl	1820 <arch_swap>
		z_swap(lock, key);
    45c0:	e003      	b.n	45ca <z_reschedule+0x26>
    45c2:	f383 8811 	msr	BASEPRI, r3
    45c6:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    45ca:	bd08      	pop	{r3, pc}
    45cc:	20001ac4 	.word	0x20001ac4

000045d0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    45d0:	2300      	movs	r3, #0
	__asm__ volatile(
    45d2:	f04f 0220 	mov.w	r2, #32
    45d6:	f3ef 8111 	mrs	r1, BASEPRI
    45da:	f382 8812 	msr	BASEPRI_MAX, r2
    45de:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    45e2:	e009      	b.n	45f8 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    45e4:	4b06      	ldr	r3, [pc, #24]	; (4600 <k_sched_lock+0x30>)
    45e6:	689a      	ldr	r2, [r3, #8]
    45e8:	7bd3      	ldrb	r3, [r2, #15]
    45ea:	3b01      	subs	r3, #1
    45ec:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    45ee:	f381 8811 	msr	BASEPRI, r1
    45f2:	f3bf 8f6f 	isb	sy
    45f6:	2301      	movs	r3, #1
    45f8:	2b00      	cmp	r3, #0
    45fa:	d0f3      	beq.n	45e4 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    45fc:	4770      	bx	lr
    45fe:	bf00      	nop
    4600:	20001ac4 	.word	0x20001ac4

00004604 <update_cache>:
{
    4604:	b538      	push	{r3, r4, r5, lr}
    4606:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    4608:	4810      	ldr	r0, [pc, #64]	; (464c <update_cache+0x48>)
    460a:	f002 fce9 	bl	6fe0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    460e:	4605      	mov	r5, r0
    4610:	b170      	cbz	r0, 4630 <update_cache+0x2c>
	if (preempt_ok != 0) {
    4612:	b984      	cbnz	r4, 4636 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    4614:	4b0e      	ldr	r3, [pc, #56]	; (4650 <update_cache+0x4c>)
    4616:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4618:	7b5a      	ldrb	r2, [r3, #13]
    461a:	f012 0f1f 	tst.w	r2, #31
    461e:	d10a      	bne.n	4636 <update_cache+0x32>
	return node->next != NULL;
    4620:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4622:	b942      	cbnz	r2, 4636 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4624:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    4626:	2a7f      	cmp	r2, #127	; 0x7f
    4628:	d905      	bls.n	4636 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    462a:	4a09      	ldr	r2, [pc, #36]	; (4650 <update_cache+0x4c>)
    462c:	6193      	str	r3, [r2, #24]
    462e:	e00b      	b.n	4648 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4630:	4b07      	ldr	r3, [pc, #28]	; (4650 <update_cache+0x4c>)
    4632:	68dd      	ldr	r5, [r3, #12]
    4634:	e7ed      	b.n	4612 <update_cache+0xe>
		if (thread != _current) {
    4636:	4b06      	ldr	r3, [pc, #24]	; (4650 <update_cache+0x4c>)
    4638:	689b      	ldr	r3, [r3, #8]
    463a:	42ab      	cmp	r3, r5
    463c:	d002      	beq.n	4644 <update_cache+0x40>
			z_reset_time_slice(thread);
    463e:	4628      	mov	r0, r5
    4640:	f7ff ff88 	bl	4554 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4644:	4b02      	ldr	r3, [pc, #8]	; (4650 <update_cache+0x4c>)
    4646:	619d      	str	r5, [r3, #24]
}
    4648:	bd38      	pop	{r3, r4, r5, pc}
    464a:	bf00      	nop
    464c:	20001ae0 	.word	0x20001ae0
    4650:	20001ac4 	.word	0x20001ac4

00004654 <move_thread_to_end_of_prio_q>:
{
    4654:	b538      	push	{r3, r4, r5, lr}
    4656:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4658:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    465a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    465e:	2b00      	cmp	r3, #0
    4660:	db0a      	blt.n	4678 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    4662:	7b6b      	ldrb	r3, [r5, #13]
    4664:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4668:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    466a:	4b1b      	ldr	r3, [pc, #108]	; (46d8 <move_thread_to_end_of_prio_q+0x84>)
    466c:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4670:	429c      	cmp	r4, r3
    4672:	d110      	bne.n	4696 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4674:	2400      	movs	r4, #0
    4676:	e00e      	b.n	4696 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4678:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    467c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    467e:	4601      	mov	r1, r0
    4680:	4816      	ldr	r0, [pc, #88]	; (46dc <move_thread_to_end_of_prio_q+0x88>)
    4682:	f002 fc97 	bl	6fb4 <z_priq_dumb_remove>
}
    4686:	e7ec      	b.n	4662 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4688:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    468a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    468c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    468e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4690:	6065      	str	r5, [r4, #4]
}
    4692:	e017      	b.n	46c4 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4694:	2400      	movs	r4, #0
    4696:	b16c      	cbz	r4, 46b4 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4698:	4621      	mov	r1, r4
    469a:	4628      	mov	r0, r5
    469c:	f002 fc66 	bl	6f6c <z_sched_prio_cmp>
    46a0:	2800      	cmp	r0, #0
    46a2:	dcf1      	bgt.n	4688 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    46a4:	2c00      	cmp	r4, #0
    46a6:	d0f6      	beq.n	4696 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    46a8:	4b0b      	ldr	r3, [pc, #44]	; (46d8 <move_thread_to_end_of_prio_q+0x84>)
    46aa:	6a1b      	ldr	r3, [r3, #32]
    46ac:	429c      	cmp	r4, r3
    46ae:	d0f1      	beq.n	4694 <move_thread_to_end_of_prio_q+0x40>
    46b0:	6824      	ldr	r4, [r4, #0]
    46b2:	e7f0      	b.n	4696 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    46b4:	4b08      	ldr	r3, [pc, #32]	; (46d8 <move_thread_to_end_of_prio_q+0x84>)
    46b6:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    46b8:	f103 011c 	add.w	r1, r3, #28
    46bc:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    46be:	606a      	str	r2, [r5, #4]
	tail->next = node;
    46c0:	6015      	str	r5, [r2, #0]
	list->tail = node;
    46c2:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
    46c4:	4b04      	ldr	r3, [pc, #16]	; (46d8 <move_thread_to_end_of_prio_q+0x84>)
    46c6:	6898      	ldr	r0, [r3, #8]
    46c8:	42a8      	cmp	r0, r5
    46ca:	bf14      	ite	ne
    46cc:	2000      	movne	r0, #0
    46ce:	2001      	moveq	r0, #1
    46d0:	f7ff ff98 	bl	4604 <update_cache>
}
    46d4:	bd38      	pop	{r3, r4, r5, pc}
    46d6:	bf00      	nop
    46d8:	20001ac4 	.word	0x20001ac4
    46dc:	20001ae0 	.word	0x20001ae0

000046e0 <z_time_slice>:
{
    46e0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    46e2:	f04f 0220 	mov.w	r2, #32
    46e6:	f3ef 8311 	mrs	r3, BASEPRI
    46ea:	f382 8812 	msr	BASEPRI_MAX, r2
    46ee:	f3bf 8f6f 	isb	sy
    46f2:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
    46f4:	4b14      	ldr	r3, [pc, #80]	; (4748 <z_time_slice+0x68>)
    46f6:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    46f8:	4b14      	ldr	r3, [pc, #80]	; (474c <z_time_slice+0x6c>)
    46fa:	681b      	ldr	r3, [r3, #0]
    46fc:	42a3      	cmp	r3, r4
    46fe:	d017      	beq.n	4730 <z_time_slice+0x50>
	pending_current = NULL;
    4700:	4b12      	ldr	r3, [pc, #72]	; (474c <z_time_slice+0x6c>)
    4702:	2200      	movs	r2, #0
    4704:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    4706:	4b10      	ldr	r3, [pc, #64]	; (4748 <z_time_slice+0x68>)
    4708:	7c1b      	ldrb	r3, [r3, #16]
    470a:	4a11      	ldr	r2, [pc, #68]	; (4750 <z_time_slice+0x70>)
    470c:	5cd3      	ldrb	r3, [r2, r3]
    470e:	b153      	cbz	r3, 4726 <z_time_slice+0x46>
    4710:	4620      	mov	r0, r4
    4712:	f7ff fed9 	bl	44c8 <sliceable>
    4716:	b130      	cbz	r0, 4726 <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
    4718:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
    471a:	f013 0f1f 	tst.w	r3, #31
    471e:	d00f      	beq.n	4740 <z_time_slice+0x60>
		z_reset_time_slice(curr);
    4720:	4620      	mov	r0, r4
    4722:	f7ff ff17 	bl	4554 <z_reset_time_slice>
	__asm__ volatile(
    4726:	f385 8811 	msr	BASEPRI, r5
    472a:	f3bf 8f6f 	isb	sy
}
    472e:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
    4730:	4620      	mov	r0, r4
    4732:	f7ff ff0f 	bl	4554 <z_reset_time_slice>
    4736:	f385 8811 	msr	BASEPRI, r5
    473a:	f3bf 8f6f 	isb	sy
		return;
    473e:	e7f6      	b.n	472e <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
    4740:	4620      	mov	r0, r4
    4742:	f7ff ff87 	bl	4654 <move_thread_to_end_of_prio_q>
    4746:	e7eb      	b.n	4720 <z_time_slice+0x40>
    4748:	20001ac4 	.word	0x20001ac4
    474c:	20001aec 	.word	0x20001aec
    4750:	20001af0 	.word	0x20001af0

00004754 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    4754:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4756:	f990 300d 	ldrsb.w	r3, [r0, #13]
    475a:	2b00      	cmp	r3, #0
    475c:	db33      	blt.n	47c6 <ready_thread+0x72>
{
    475e:	b570      	push	{r4, r5, r6, lr}
    4760:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4762:	f012 0f1f 	tst.w	r2, #31
    4766:	d101      	bne.n	476c <ready_thread+0x18>
	return node->next != NULL;
    4768:	6986      	ldr	r6, [r0, #24]
    476a:	b106      	cbz	r6, 476e <ready_thread+0x1a>
}
    476c:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    476e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4772:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    4774:	4b14      	ldr	r3, [pc, #80]	; (47c8 <ready_thread+0x74>)
    4776:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    477a:	429d      	cmp	r5, r3
    477c:	d108      	bne.n	4790 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    477e:	4635      	mov	r5, r6
    4780:	e006      	b.n	4790 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    4782:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4784:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4786:	6025      	str	r5, [r4, #0]
	prev->next = node;
    4788:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    478a:	606c      	str	r4, [r5, #4]
}
    478c:	e017      	b.n	47be <ready_thread+0x6a>
    478e:	4635      	mov	r5, r6
    4790:	b16d      	cbz	r5, 47ae <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4792:	4629      	mov	r1, r5
    4794:	4620      	mov	r0, r4
    4796:	f002 fbe9 	bl	6f6c <z_sched_prio_cmp>
    479a:	2800      	cmp	r0, #0
    479c:	dcf1      	bgt.n	4782 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    479e:	2d00      	cmp	r5, #0
    47a0:	d0f6      	beq.n	4790 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    47a2:	4b09      	ldr	r3, [pc, #36]	; (47c8 <ready_thread+0x74>)
    47a4:	6a1b      	ldr	r3, [r3, #32]
    47a6:	429d      	cmp	r5, r3
    47a8:	d0f1      	beq.n	478e <ready_thread+0x3a>
    47aa:	682d      	ldr	r5, [r5, #0]
    47ac:	e7f0      	b.n	4790 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    47ae:	4b06      	ldr	r3, [pc, #24]	; (47c8 <ready_thread+0x74>)
    47b0:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    47b2:	f103 011c 	add.w	r1, r3, #28
    47b6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    47b8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    47ba:	6014      	str	r4, [r2, #0]
	list->tail = node;
    47bc:	621c      	str	r4, [r3, #32]
		update_cache(0);
    47be:	2000      	movs	r0, #0
    47c0:	f7ff ff20 	bl	4604 <update_cache>
}
    47c4:	e7d2      	b.n	476c <ready_thread+0x18>
    47c6:	4770      	bx	lr
    47c8:	20001ac4 	.word	0x20001ac4

000047cc <z_sched_start>:
{
    47cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    47ce:	f04f 0320 	mov.w	r3, #32
    47d2:	f3ef 8411 	mrs	r4, BASEPRI
    47d6:	f383 8812 	msr	BASEPRI_MAX, r3
    47da:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    47de:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    47e0:	f013 0f04 	tst.w	r3, #4
    47e4:	d104      	bne.n	47f0 <z_sched_start+0x24>
	__asm__ volatile(
    47e6:	f384 8811 	msr	BASEPRI, r4
    47ea:	f3bf 8f6f 	isb	sy
}
    47ee:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    47f0:	f023 0304 	bic.w	r3, r3, #4
    47f4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    47f6:	f7ff ffad 	bl	4754 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    47fa:	4621      	mov	r1, r4
    47fc:	4801      	ldr	r0, [pc, #4]	; (4804 <z_sched_start+0x38>)
    47fe:	f7ff fed1 	bl	45a4 <z_reschedule>
    4802:	e7f4      	b.n	47ee <z_sched_start+0x22>
    4804:	20001afc 	.word	0x20001afc

00004808 <unready_thread>:
{
    4808:	b510      	push	{r4, lr}
    480a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    480c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    480e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4812:	2b00      	cmp	r3, #0
    4814:	db08      	blt.n	4828 <unready_thread+0x20>
	update_cache(thread == _current);
    4816:	4b08      	ldr	r3, [pc, #32]	; (4838 <unready_thread+0x30>)
    4818:	6898      	ldr	r0, [r3, #8]
    481a:	42a0      	cmp	r0, r4
    481c:	bf14      	ite	ne
    481e:	2000      	movne	r0, #0
    4820:	2001      	moveq	r0, #1
    4822:	f7ff feef 	bl	4604 <update_cache>
}
    4826:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4828:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    482c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    482e:	4601      	mov	r1, r0
    4830:	4802      	ldr	r0, [pc, #8]	; (483c <unready_thread+0x34>)
    4832:	f002 fbbf 	bl	6fb4 <z_priq_dumb_remove>
}
    4836:	e7ee      	b.n	4816 <unready_thread+0xe>
    4838:	20001ac4 	.word	0x20001ac4
    483c:	20001ae0 	.word	0x20001ae0

00004840 <z_pend_curr>:
{
    4840:	b510      	push	{r4, lr}
    4842:	460c      	mov	r4, r1
    4844:	4611      	mov	r1, r2
	pending_current = _current;
    4846:	480a      	ldr	r0, [pc, #40]	; (4870 <z_pend_curr+0x30>)
    4848:	6882      	ldr	r2, [r0, #8]
    484a:	4b0a      	ldr	r3, [pc, #40]	; (4874 <z_pend_curr+0x34>)
    484c:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    484e:	f04f 0220 	mov.w	r2, #32
    4852:	f3ef 8311 	mrs	r3, BASEPRI
    4856:	f382 8812 	msr	BASEPRI_MAX, r2
    485a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    485e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4862:	6880      	ldr	r0, [r0, #8]
    4864:	f002 fc4f 	bl	7106 <pend_locked>
    4868:	4620      	mov	r0, r4
    486a:	f7fc ffd9 	bl	1820 <arch_swap>
}
    486e:	bd10      	pop	{r4, pc}
    4870:	20001ac4 	.word	0x20001ac4
    4874:	20001aec 	.word	0x20001aec

00004878 <z_set_prio>:
{
    4878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    487c:	4605      	mov	r5, r0
    487e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    4880:	2300      	movs	r3, #0
    4882:	f04f 0220 	mov.w	r2, #32
    4886:	f3ef 8611 	mrs	r6, BASEPRI
    488a:	f382 8812 	msr	BASEPRI_MAX, r2
    488e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    4892:	4618      	mov	r0, r3
    4894:	e029      	b.n	48ea <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    4896:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4898:	606b      	str	r3, [r5, #4]
	node->next = successor;
    489a:	602c      	str	r4, [r5, #0]
	prev->next = node;
    489c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    489e:	6065      	str	r5, [r4, #4]
}
    48a0:	e017      	b.n	48d2 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    48a2:	4644      	mov	r4, r8
    48a4:	b16c      	cbz	r4, 48c2 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    48a6:	4621      	mov	r1, r4
    48a8:	4628      	mov	r0, r5
    48aa:	f002 fb5f 	bl	6f6c <z_sched_prio_cmp>
    48ae:	2800      	cmp	r0, #0
    48b0:	dcf1      	bgt.n	4896 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    48b2:	2c00      	cmp	r4, #0
    48b4:	d0f6      	beq.n	48a4 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    48b6:	4b1d      	ldr	r3, [pc, #116]	; (492c <z_set_prio+0xb4>)
    48b8:	6a1b      	ldr	r3, [r3, #32]
    48ba:	429c      	cmp	r4, r3
    48bc:	d0f1      	beq.n	48a2 <z_set_prio+0x2a>
    48be:	6824      	ldr	r4, [r4, #0]
    48c0:	e7f0      	b.n	48a4 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    48c2:	4b1a      	ldr	r3, [pc, #104]	; (492c <z_set_prio+0xb4>)
    48c4:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    48c6:	f103 011c 	add.w	r1, r3, #28
    48ca:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    48cc:	606a      	str	r2, [r5, #4]
	tail->next = node;
    48ce:	6015      	str	r5, [r2, #0]
	list->tail = node;
    48d0:	621d      	str	r5, [r3, #32]
			update_cache(1);
    48d2:	2001      	movs	r0, #1
    48d4:	f7ff fe96 	bl	4604 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    48d8:	2001      	movs	r0, #1
    48da:	e001      	b.n	48e0 <z_set_prio+0x68>
			thread->base.prio = prio;
    48dc:	73af      	strb	r7, [r5, #14]
    48de:	2000      	movs	r0, #0
	__asm__ volatile(
    48e0:	f386 8811 	msr	BASEPRI, r6
    48e4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    48e8:	2301      	movs	r3, #1
    48ea:	b9e3      	cbnz	r3, 4926 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    48ec:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    48ee:	f013 0f1f 	tst.w	r3, #31
    48f2:	d1f3      	bne.n	48dc <z_set_prio+0x64>
	return node->next != NULL;
    48f4:	f8d5 8018 	ldr.w	r8, [r5, #24]
    48f8:	f1b8 0f00 	cmp.w	r8, #0
    48fc:	d1ee      	bne.n	48dc <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    48fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4902:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4904:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4930 <z_set_prio+0xb8>
    4908:	4629      	mov	r1, r5
    490a:	4648      	mov	r0, r9
    490c:	f002 fb52 	bl	6fb4 <z_priq_dumb_remove>
				thread->base.prio = prio;
    4910:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4912:	7b6b      	ldrb	r3, [r5, #13]
    4914:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4918:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    491a:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    491e:	454c      	cmp	r4, r9
    4920:	d1c0      	bne.n	48a4 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4922:	4644      	mov	r4, r8
    4924:	e7be      	b.n	48a4 <z_set_prio+0x2c>
}
    4926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    492a:	bf00      	nop
    492c:	20001ac4 	.word	0x20001ac4
    4930:	20001ae0 	.word	0x20001ae0

00004934 <z_impl_k_thread_suspend>:
{
    4934:	b538      	push	{r3, r4, r5, lr}
    4936:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4938:	3018      	adds	r0, #24
    493a:	f002 fc4a 	bl	71d2 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    493e:	2300      	movs	r3, #0
	__asm__ volatile(
    4940:	f04f 0220 	mov.w	r2, #32
    4944:	f3ef 8511 	mrs	r5, BASEPRI
    4948:	f382 8812 	msr	BASEPRI_MAX, r2
    494c:	f3bf 8f6f 	isb	sy
    4950:	e010      	b.n	4974 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4952:	7b63      	ldrb	r3, [r4, #13]
    4954:	f043 0310 	orr.w	r3, r3, #16
    4958:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    495a:	4b11      	ldr	r3, [pc, #68]	; (49a0 <z_impl_k_thread_suspend+0x6c>)
    495c:	6898      	ldr	r0, [r3, #8]
    495e:	42a0      	cmp	r0, r4
    4960:	bf14      	ite	ne
    4962:	2000      	movne	r0, #0
    4964:	2001      	moveq	r0, #1
    4966:	f7ff fe4d 	bl	4604 <update_cache>
	__asm__ volatile(
    496a:	f385 8811 	msr	BASEPRI, r5
    496e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4972:	2301      	movs	r3, #1
    4974:	b963      	cbnz	r3, 4990 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    4976:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    4978:	f994 300d 	ldrsb.w	r3, [r4, #13]
    497c:	2b00      	cmp	r3, #0
    497e:	dae8      	bge.n	4952 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4980:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4984:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4986:	4621      	mov	r1, r4
    4988:	4806      	ldr	r0, [pc, #24]	; (49a4 <z_impl_k_thread_suspend+0x70>)
    498a:	f002 fb13 	bl	6fb4 <z_priq_dumb_remove>
}
    498e:	e7e0      	b.n	4952 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    4990:	4b03      	ldr	r3, [pc, #12]	; (49a0 <z_impl_k_thread_suspend+0x6c>)
    4992:	689b      	ldr	r3, [r3, #8]
    4994:	42a3      	cmp	r3, r4
    4996:	d000      	beq.n	499a <z_impl_k_thread_suspend+0x66>
}
    4998:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    499a:	f002 faff 	bl	6f9c <z_reschedule_unlocked>
}
    499e:	e7fb      	b.n	4998 <z_impl_k_thread_suspend+0x64>
    49a0:	20001ac4 	.word	0x20001ac4
    49a4:	20001ae0 	.word	0x20001ae0

000049a8 <k_sched_unlock>:

void k_sched_unlock(void)
{
    49a8:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    49aa:	2300      	movs	r3, #0
	__asm__ volatile(
    49ac:	f04f 0220 	mov.w	r2, #32
    49b0:	f3ef 8411 	mrs	r4, BASEPRI
    49b4:	f382 8812 	msr	BASEPRI_MAX, r2
    49b8:	f3bf 8f6f 	isb	sy
    49bc:	e00c      	b.n	49d8 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    49be:	4b09      	ldr	r3, [pc, #36]	; (49e4 <k_sched_unlock+0x3c>)
    49c0:	689a      	ldr	r2, [r3, #8]
    49c2:	7bd3      	ldrb	r3, [r2, #15]
    49c4:	3301      	adds	r3, #1
    49c6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    49c8:	2000      	movs	r0, #0
    49ca:	f7ff fe1b 	bl	4604 <update_cache>
	__asm__ volatile(
    49ce:	f384 8811 	msr	BASEPRI, r4
    49d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    49d6:	2301      	movs	r3, #1
    49d8:	2b00      	cmp	r3, #0
    49da:	d0f0      	beq.n	49be <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    49dc:	f002 fade 	bl	6f9c <z_reschedule_unlocked>
}
    49e0:	bd10      	pop	{r4, pc}
    49e2:	bf00      	nop
    49e4:	20001ac4 	.word	0x20001ac4

000049e8 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    49e8:	7b43      	ldrb	r3, [r0, #13]
    49ea:	f013 0f08 	tst.w	r3, #8
    49ee:	d12a      	bne.n	4a46 <end_thread+0x5e>
{
    49f0:	b510      	push	{r4, lr}
    49f2:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    49f4:	f043 0208 	orr.w	r2, r3, #8
    49f8:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    49fa:	f023 0220 	bic.w	r2, r3, #32
    49fe:	f042 0208 	orr.w	r2, r2, #8
    4a02:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    4a04:	f012 0f80 	tst.w	r2, #128	; 0x80
    4a08:	d113      	bne.n	4a32 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    4a0a:	68a3      	ldr	r3, [r4, #8]
    4a0c:	b113      	cbz	r3, 4a14 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    4a0e:	4620      	mov	r0, r4
    4a10:	f002 fad8 	bl	6fc4 <unpend_thread_no_timeout>
    4a14:	f104 0018 	add.w	r0, r4, #24
    4a18:	f002 fbdb 	bl	71d2 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    4a1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    4a20:	f002 fb31 	bl	7086 <unpend_all>
		update_cache(1);
    4a24:	2001      	movs	r0, #1
    4a26:	f7ff fded 	bl	4604 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    4a2a:	4620      	mov	r0, r4
    4a2c:	f7ff fa8a 	bl	3f44 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    4a30:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4a32:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4a36:	f043 0308 	orr.w	r3, r3, #8
    4a3a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4a3c:	4601      	mov	r1, r0
    4a3e:	4802      	ldr	r0, [pc, #8]	; (4a48 <end_thread+0x60>)
    4a40:	f002 fab8 	bl	6fb4 <z_priq_dumb_remove>
}
    4a44:	e7e1      	b.n	4a0a <end_thread+0x22>
    4a46:	4770      	bx	lr
    4a48:	20001ae0 	.word	0x20001ae0

00004a4c <z_sched_init>:
{
    4a4c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    4a4e:	4802      	ldr	r0, [pc, #8]	; (4a58 <z_sched_init+0xc>)
    4a50:	f002 fb87 	bl	7162 <init_ready_q>
}
    4a54:	bd08      	pop	{r3, pc}
    4a56:	bf00      	nop
    4a58:	20001adc 	.word	0x20001adc

00004a5c <z_impl_k_yield>:
{
    4a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4a5e:	f04f 0320 	mov.w	r3, #32
    4a62:	f3ef 8611 	mrs	r6, BASEPRI
    4a66:	f383 8812 	msr	BASEPRI_MAX, r3
    4a6a:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    4a6e:	4c1d      	ldr	r4, [pc, #116]	; (4ae4 <z_impl_k_yield+0x88>)
    4a70:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4a72:	7b4b      	ldrb	r3, [r1, #13]
    4a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4a78:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4a7a:	f104 071c 	add.w	r7, r4, #28
    4a7e:	4638      	mov	r0, r7
    4a80:	f002 fa98 	bl	6fb4 <z_priq_dumb_remove>
	queue_thread(_current);
    4a84:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4a86:	7b6b      	ldrb	r3, [r5, #13]
    4a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4a8c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4a8e:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a90:	42bc      	cmp	r4, r7
    4a92:	d108      	bne.n	4aa6 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4a94:	2400      	movs	r4, #0
    4a96:	e006      	b.n	4aa6 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    4a98:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4a9a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4a9c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4a9e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4aa0:	6065      	str	r5, [r4, #4]
}
    4aa2:	e017      	b.n	4ad4 <z_impl_k_yield+0x78>
    4aa4:	2400      	movs	r4, #0
    4aa6:	b16c      	cbz	r4, 4ac4 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4aa8:	4621      	mov	r1, r4
    4aaa:	4628      	mov	r0, r5
    4aac:	f002 fa5e 	bl	6f6c <z_sched_prio_cmp>
    4ab0:	2800      	cmp	r0, #0
    4ab2:	dcf1      	bgt.n	4a98 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ab4:	2c00      	cmp	r4, #0
    4ab6:	d0f6      	beq.n	4aa6 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    4ab8:	4b0a      	ldr	r3, [pc, #40]	; (4ae4 <z_impl_k_yield+0x88>)
    4aba:	6a1b      	ldr	r3, [r3, #32]
    4abc:	429c      	cmp	r4, r3
    4abe:	d0f1      	beq.n	4aa4 <z_impl_k_yield+0x48>
    4ac0:	6824      	ldr	r4, [r4, #0]
    4ac2:	e7f0      	b.n	4aa6 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    4ac4:	4b07      	ldr	r3, [pc, #28]	; (4ae4 <z_impl_k_yield+0x88>)
    4ac6:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    4ac8:	f103 011c 	add.w	r1, r3, #28
    4acc:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4ace:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4ad0:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4ad2:	621d      	str	r5, [r3, #32]
	update_cache(1);
    4ad4:	2001      	movs	r0, #1
    4ad6:	f7ff fd95 	bl	4604 <update_cache>
    4ada:	4630      	mov	r0, r6
    4adc:	f7fc fea0 	bl	1820 <arch_swap>
}
    4ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ae2:	bf00      	nop
    4ae4:	20001ac4 	.word	0x20001ac4

00004ae8 <z_tick_sleep>:
{
    4ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    4aec:	ea50 0301 	orrs.w	r3, r0, r1
    4af0:	d038      	beq.n	4b64 <z_tick_sleep+0x7c>
    4af2:	4604      	mov	r4, r0
    4af4:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    4af6:	f06f 0301 	mvn.w	r3, #1
    4afa:	1a1b      	subs	r3, r3, r0
    4afc:	f04f 32ff 	mov.w	r2, #4294967295
    4b00:	eb62 0201 	sbc.w	r2, r2, r1
    4b04:	2b01      	cmp	r3, #1
    4b06:	f172 0200 	sbcs.w	r2, r2, #0
    4b0a:	db2f      	blt.n	4b6c <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4b0c:	f06f 0501 	mvn.w	r5, #1
    4b10:	1a2d      	subs	r5, r5, r0
    4b12:	f04f 0320 	mov.w	r3, #32
    4b16:	f3ef 8811 	mrs	r8, BASEPRI
    4b1a:	f383 8812 	msr	BASEPRI_MAX, r3
    4b1e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4b22:	4f14      	ldr	r7, [pc, #80]	; (4b74 <z_tick_sleep+0x8c>)
    4b24:	68b8      	ldr	r0, [r7, #8]
    4b26:	4b14      	ldr	r3, [pc, #80]	; (4b78 <z_tick_sleep+0x90>)
    4b28:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4b2a:	f7ff fe6d 	bl	4808 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4b2e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4b30:	4622      	mov	r2, r4
    4b32:	4633      	mov	r3, r6
    4b34:	4911      	ldr	r1, [pc, #68]	; (4b7c <z_tick_sleep+0x94>)
    4b36:	3018      	adds	r0, #24
    4b38:	f000 f8c6 	bl	4cc8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4b3c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4b3e:	7b53      	ldrb	r3, [r2, #13]
    4b40:	f043 0310 	orr.w	r3, r3, #16
    4b44:	7353      	strb	r3, [r2, #13]
    4b46:	4640      	mov	r0, r8
    4b48:	f7fc fe6a 	bl	1820 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4b4c:	f002 fb76 	bl	723c <sys_clock_tick_get_32>
    4b50:	1a28      	subs	r0, r5, r0
    4b52:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4b56:	2801      	cmp	r0, #1
    4b58:	f173 0300 	sbcs.w	r3, r3, #0
    4b5c:	da00      	bge.n	4b60 <z_tick_sleep+0x78>
	return 0;
    4b5e:	2000      	movs	r0, #0
}
    4b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    4b64:	f7ff ff7a 	bl	4a5c <z_impl_k_yield>
		return 0;
    4b68:	2000      	movs	r0, #0
    4b6a:	e7f9      	b.n	4b60 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4b6c:	f002 fb66 	bl	723c <sys_clock_tick_get_32>
    4b70:	1905      	adds	r5, r0, r4
    4b72:	e7ce      	b.n	4b12 <z_tick_sleep+0x2a>
    4b74:	20001ac4 	.word	0x20001ac4
    4b78:	20001aec 	.word	0x20001aec
    4b7c:	0000707b 	.word	0x0000707b

00004b80 <z_impl_k_sleep>:
{
    4b80:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4b82:	f1b1 3fff 	cmp.w	r1, #4294967295
    4b86:	bf08      	it	eq
    4b88:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    4b8c:	d018      	beq.n	4bc0 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    4b8e:	f7ff ffab 	bl	4ae8 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    4b92:	17c2      	asrs	r2, r0, #31
    4b94:	0151      	lsls	r1, r2, #5
    4b96:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    4b9a:	0143      	lsls	r3, r0, #5
    4b9c:	1a1b      	subs	r3, r3, r0
    4b9e:	eb61 0102 	sbc.w	r1, r1, r2
    4ba2:	0089      	lsls	r1, r1, #2
    4ba4:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    4ba8:	009b      	lsls	r3, r3, #2
    4baa:	181b      	adds	r3, r3, r0
    4bac:	eb42 0201 	adc.w	r2, r2, r1
    4bb0:	00d2      	lsls	r2, r2, #3
    4bb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    4bb6:	f3c3 3310 	ubfx	r3, r3, #12, #17
    4bba:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    4bbe:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    4bc0:	4b03      	ldr	r3, [pc, #12]	; (4bd0 <z_impl_k_sleep+0x50>)
    4bc2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4bc4:	f7ff feb6 	bl	4934 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4bc8:	f04f 30ff 	mov.w	r0, #4294967295
    4bcc:	e7f7      	b.n	4bbe <z_impl_k_sleep+0x3e>
    4bce:	bf00      	nop
    4bd0:	20001ac4 	.word	0x20001ac4

00004bd4 <z_impl_z_current_get>:
}
    4bd4:	4b01      	ldr	r3, [pc, #4]	; (4bdc <z_impl_z_current_get+0x8>)
    4bd6:	6898      	ldr	r0, [r3, #8]
    4bd8:	4770      	bx	lr
    4bda:	bf00      	nop
    4bdc:	20001ac4 	.word	0x20001ac4

00004be0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    4be0:	b570      	push	{r4, r5, r6, lr}
    4be2:	f04f 0320 	mov.w	r3, #32
    4be6:	f3ef 8511 	mrs	r5, BASEPRI
    4bea:	f383 8812 	msr	BASEPRI_MAX, r3
    4bee:	f3bf 8f6f 	isb	sy
    4bf2:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    4bf4:	7b03      	ldrb	r3, [r0, #12]
    4bf6:	f013 0f01 	tst.w	r3, #1
    4bfa:	d109      	bne.n	4c10 <z_thread_abort+0x30>
    4bfc:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4bfe:	7b43      	ldrb	r3, [r0, #13]
    4c00:	f013 0f08 	tst.w	r3, #8
    4c04:	d00f      	beq.n	4c26 <z_thread_abort+0x46>
	__asm__ volatile(
    4c06:	f385 8811 	msr	BASEPRI, r5
    4c0a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    4c0e:	e009      	b.n	4c24 <z_thread_abort+0x44>
    4c10:	f385 8811 	msr	BASEPRI, r5
    4c14:	f3bf 8f6f 	isb	sy
		k_panic();
    4c18:	4040      	eors	r0, r0
    4c1a:	f380 8811 	msr	BASEPRI, r0
    4c1e:	f04f 0004 	mov.w	r0, #4
    4c22:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4c24:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    4c26:	f7ff fedf 	bl	49e8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    4c2a:	4b08      	ldr	r3, [pc, #32]	; (4c4c <z_thread_abort+0x6c>)
    4c2c:	689b      	ldr	r3, [r3, #8]
    4c2e:	42a3      	cmp	r3, r4
    4c30:	d004      	beq.n	4c3c <z_thread_abort+0x5c>
    4c32:	f386 8811 	msr	BASEPRI, r6
    4c36:	f3bf 8f6f 	isb	sy
    4c3a:	e7f3      	b.n	4c24 <z_thread_abort+0x44>
    4c3c:	f3ef 8305 	mrs	r3, IPSR
    4c40:	2b00      	cmp	r3, #0
    4c42:	d1f6      	bne.n	4c32 <z_thread_abort+0x52>
    4c44:	4628      	mov	r0, r5
    4c46:	f7fc fdeb 	bl	1820 <arch_swap>
	return ret;
    4c4a:	e7f2      	b.n	4c32 <z_thread_abort+0x52>
    4c4c:	20001ac4 	.word	0x20001ac4

00004c50 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4c50:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4c52:	4806      	ldr	r0, [pc, #24]	; (4c6c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4c54:	4a06      	ldr	r2, [pc, #24]	; (4c70 <z_data_copy+0x20>)
    4c56:	1a12      	subs	r2, r2, r0
    4c58:	4906      	ldr	r1, [pc, #24]	; (4c74 <z_data_copy+0x24>)
    4c5a:	f002 f8e0 	bl	6e1e <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4c5e:	4a06      	ldr	r2, [pc, #24]	; (4c78 <z_data_copy+0x28>)
    4c60:	4906      	ldr	r1, [pc, #24]	; (4c7c <z_data_copy+0x2c>)
    4c62:	4807      	ldr	r0, [pc, #28]	; (4c80 <z_data_copy+0x30>)
    4c64:	f002 f8db 	bl	6e1e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4c68:	bd08      	pop	{r3, pc}
    4c6a:	bf00      	nop
    4c6c:	20000000 	.word	0x20000000
    4c70:	20000208 	.word	0x20000208
    4c74:	00007e4c 	.word	0x00007e4c
    4c78:	00000000 	.word	0x00000000
    4c7c:	00007e4c 	.word	0x00007e4c
    4c80:	20000000 	.word	0x20000000

00004c84 <first>:
	return list->head == list;
    4c84:	4b03      	ldr	r3, [pc, #12]	; (4c94 <first+0x10>)
    4c86:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c88:	4298      	cmp	r0, r3
    4c8a:	d000      	beq.n	4c8e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4c8c:	4770      	bx	lr
    4c8e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4c90:	e7fc      	b.n	4c8c <first+0x8>
    4c92:	bf00      	nop
    4c94:	2000011c 	.word	0x2000011c

00004c98 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4c98:	b130      	cbz	r0, 4ca8 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    4c9a:	4a04      	ldr	r2, [pc, #16]	; (4cac <next+0x14>)
    4c9c:	6852      	ldr	r2, [r2, #4]
    4c9e:	4290      	cmp	r0, r2
    4ca0:	d001      	beq.n	4ca6 <next+0xe>
    4ca2:	6800      	ldr	r0, [r0, #0]
    4ca4:	4770      	bx	lr
    4ca6:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4ca8:	4770      	bx	lr
    4caa:	bf00      	nop
    4cac:	2000011c 	.word	0x2000011c

00004cb0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    4cb0:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4cb2:	4b04      	ldr	r3, [pc, #16]	; (4cc4 <elapsed+0x14>)
    4cb4:	681b      	ldr	r3, [r3, #0]
    4cb6:	b10b      	cbz	r3, 4cbc <elapsed+0xc>
    4cb8:	2000      	movs	r0, #0
}
    4cba:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4cbc:	f7fe f950 	bl	2f60 <sys_clock_elapsed>
    4cc0:	e7fb      	b.n	4cba <elapsed+0xa>
    4cc2:	bf00      	nop
    4cc4:	20001afc 	.word	0x20001afc

00004cc8 <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
    4ccc:	bf08      	it	eq
    4cce:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4cd2:	d074      	beq.n	4dbe <z_add_timeout+0xf6>
{
    4cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4cd8:	4604      	mov	r4, r0
    4cda:	4692      	mov	sl, r2
    4cdc:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4cde:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    4ce0:	2300      	movs	r3, #0
	__asm__ volatile(
    4ce2:	f04f 0220 	mov.w	r2, #32
    4ce6:	f3ef 8711 	mrs	r7, BASEPRI
    4cea:	f382 8812 	msr	BASEPRI_MAX, r2
    4cee:	f3bf 8f6f 	isb	sy
    4cf2:	e026      	b.n	4d42 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4cf4:	f11a 0801 	adds.w	r8, sl, #1
    4cf8:	f145 0900 	adc.w	r9, r5, #0
    4cfc:	f7ff ffd8 	bl	4cb0 <elapsed>
    4d00:	eb18 0300 	adds.w	r3, r8, r0
    4d04:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    4d08:	6123      	str	r3, [r4, #16]
    4d0a:	6160      	str	r0, [r4, #20]
    4d0c:	e03b      	b.n	4d86 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    4d0e:	1a52      	subs	r2, r2, r1
    4d10:	eb66 0303 	sbc.w	r3, r6, r3
    4d14:	6102      	str	r2, [r0, #16]
    4d16:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    4d18:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    4d1a:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4d1c:	6020      	str	r0, [r4, #0]
	prev->next = node;
    4d1e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4d20:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    4d22:	e005      	b.n	4d30 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    4d24:	4b26      	ldr	r3, [pc, #152]	; (4dc0 <z_add_timeout+0xf8>)
    4d26:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4d28:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    4d2a:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4d2c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4d2e:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4d30:	f7ff ffa8 	bl	4c84 <first>
    4d34:	4284      	cmp	r4, r0
    4d36:	d03a      	beq.n	4dae <z_add_timeout+0xe6>
	__asm__ volatile(
    4d38:	f387 8811 	msr	BASEPRI, r7
    4d3c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4d40:	2301      	movs	r3, #1
    4d42:	2b00      	cmp	r3, #0
    4d44:	d139      	bne.n	4dba <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4d46:	4653      	mov	r3, sl
    4d48:	f06f 0101 	mvn.w	r1, #1
    4d4c:	ebb1 010a 	subs.w	r1, r1, sl
    4d50:	f04f 30ff 	mov.w	r0, #4294967295
    4d54:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4d58:	2a00      	cmp	r2, #0
    4d5a:	dbcb      	blt.n	4cf4 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4d5c:	4a19      	ldr	r2, [pc, #100]	; (4dc4 <z_add_timeout+0xfc>)
    4d5e:	6811      	ldr	r1, [r2, #0]
    4d60:	6852      	ldr	r2, [r2, #4]
    4d62:	185b      	adds	r3, r3, r1
    4d64:	eb42 0205 	adc.w	r2, r2, r5
    4d68:	f06f 0101 	mvn.w	r1, #1
    4d6c:	1ac9      	subs	r1, r1, r3
    4d6e:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    4d72:	4608      	mov	r0, r1
    4d74:	461a      	mov	r2, r3
    4d76:	2901      	cmp	r1, #1
    4d78:	f173 0300 	sbcs.w	r3, r3, #0
    4d7c:	da01      	bge.n	4d82 <z_add_timeout+0xba>
    4d7e:	2001      	movs	r0, #1
    4d80:	2200      	movs	r2, #0
    4d82:	6120      	str	r0, [r4, #16]
    4d84:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4d86:	f7ff ff7d 	bl	4c84 <first>
    4d8a:	2800      	cmp	r0, #0
    4d8c:	d0ca      	beq.n	4d24 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    4d8e:	6902      	ldr	r2, [r0, #16]
    4d90:	6946      	ldr	r6, [r0, #20]
    4d92:	6921      	ldr	r1, [r4, #16]
    4d94:	6963      	ldr	r3, [r4, #20]
    4d96:	4291      	cmp	r1, r2
    4d98:	eb73 0e06 	sbcs.w	lr, r3, r6
    4d9c:	dbb7      	blt.n	4d0e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    4d9e:	1a89      	subs	r1, r1, r2
    4da0:	eb63 0306 	sbc.w	r3, r3, r6
    4da4:	6121      	str	r1, [r4, #16]
    4da6:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4da8:	f7ff ff76 	bl	4c98 <next>
    4dac:	e7ed      	b.n	4d8a <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
    4dae:	f002 f9f3 	bl	7198 <next_timeout>
    4db2:	2100      	movs	r1, #0
    4db4:	f7fe f898 	bl	2ee8 <sys_clock_set_timeout>
    4db8:	e7be      	b.n	4d38 <z_add_timeout+0x70>
		}
	}
}
    4dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4dbe:	4770      	bx	lr
    4dc0:	2000011c 	.word	0x2000011c
    4dc4:	200003a0 	.word	0x200003a0

00004dc8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    4dc8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    4dca:	f04f 0320 	mov.w	r3, #32
    4dce:	f3ef 8611 	mrs	r6, BASEPRI
    4dd2:	f383 8812 	msr	BASEPRI_MAX, r3
    4dd6:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4dda:	4b2b      	ldr	r3, [pc, #172]	; (4e88 <sys_clock_announce+0xc0>)
    4ddc:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
    4dde:	f7ff ff51 	bl	4c84 <first>
    4de2:	4604      	mov	r4, r0

	for (t = first();
    4de4:	e024      	b.n	4e30 <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    4de6:	4a29      	ldr	r2, [pc, #164]	; (4e8c <sys_clock_announce+0xc4>)
    4de8:	6813      	ldr	r3, [r2, #0]
    4dea:	6851      	ldr	r1, [r2, #4]
    4dec:	195b      	adds	r3, r3, r5
    4dee:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    4df2:	6013      	str	r3, [r2, #0]
    4df4:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    4df6:	2200      	movs	r2, #0
    4df8:	2300      	movs	r3, #0
    4dfa:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4dfe:	4620      	mov	r0, r4
    4e00:	f002 f9b3 	bl	716a <remove_timeout>
	__asm__ volatile(
    4e04:	f386 8811 	msr	BASEPRI, r6
    4e08:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4e0c:	68a3      	ldr	r3, [r4, #8]
    4e0e:	4620      	mov	r0, r4
    4e10:	4798      	blx	r3
	__asm__ volatile(
    4e12:	f04f 0320 	mov.w	r3, #32
    4e16:	f3ef 8611 	mrs	r6, BASEPRI
    4e1a:	f383 8812 	msr	BASEPRI_MAX, r3
    4e1e:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    4e22:	4a19      	ldr	r2, [pc, #100]	; (4e88 <sys_clock_announce+0xc0>)
    4e24:	6813      	ldr	r3, [r2, #0]
    4e26:	1b5b      	subs	r3, r3, r5
    4e28:	6013      	str	r3, [r2, #0]
	     t = first()) {
    4e2a:	f7ff ff2b 	bl	4c84 <first>
    4e2e:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
    4e30:	b13c      	cbz	r4, 4e42 <sys_clock_announce+0x7a>
    4e32:	6925      	ldr	r5, [r4, #16]
    4e34:	6961      	ldr	r1, [r4, #20]
    4e36:	4b14      	ldr	r3, [pc, #80]	; (4e88 <sys_clock_announce+0xc0>)
    4e38:	681a      	ldr	r2, [r3, #0]
    4e3a:	17d3      	asrs	r3, r2, #31
    4e3c:	42aa      	cmp	r2, r5
    4e3e:	418b      	sbcs	r3, r1
    4e40:	dad1      	bge.n	4de6 <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
    4e42:	b144      	cbz	r4, 4e56 <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
    4e44:	6923      	ldr	r3, [r4, #16]
    4e46:	6962      	ldr	r2, [r4, #20]
    4e48:	490f      	ldr	r1, [pc, #60]	; (4e88 <sys_clock_announce+0xc0>)
    4e4a:	6809      	ldr	r1, [r1, #0]
    4e4c:	1a5b      	subs	r3, r3, r1
    4e4e:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    4e52:	6123      	str	r3, [r4, #16]
    4e54:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    4e56:	4a0d      	ldr	r2, [pc, #52]	; (4e8c <sys_clock_announce+0xc4>)
    4e58:	4d0b      	ldr	r5, [pc, #44]	; (4e88 <sys_clock_announce+0xc0>)
    4e5a:	6828      	ldr	r0, [r5, #0]
    4e5c:	6813      	ldr	r3, [r2, #0]
    4e5e:	6851      	ldr	r1, [r2, #4]
    4e60:	181b      	adds	r3, r3, r0
    4e62:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    4e66:	6013      	str	r3, [r2, #0]
    4e68:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    4e6a:	2400      	movs	r4, #0
    4e6c:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4e6e:	f002 f993 	bl	7198 <next_timeout>
    4e72:	4621      	mov	r1, r4
    4e74:	f7fe f838 	bl	2ee8 <sys_clock_set_timeout>
	__asm__ volatile(
    4e78:	f386 8811 	msr	BASEPRI, r6
    4e7c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
    4e80:	f7ff fc2e 	bl	46e0 <z_time_slice>
#endif
}
    4e84:	bd70      	pop	{r4, r5, r6, pc}
    4e86:	bf00      	nop
    4e88:	20001afc 	.word	0x20001afc
    4e8c:	200003a0 	.word	0x200003a0

00004e90 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4e90:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    4e92:	2200      	movs	r2, #0
	__asm__ volatile(
    4e94:	f04f 0320 	mov.w	r3, #32
    4e98:	f3ef 8411 	mrs	r4, BASEPRI
    4e9c:	f383 8812 	msr	BASEPRI_MAX, r3
    4ea0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    4ea4:	4613      	mov	r3, r2
    4ea6:	4611      	mov	r1, r2
    4ea8:	e00c      	b.n	4ec4 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    4eaa:	f7ff ff01 	bl	4cb0 <elapsed>
    4eae:	4a07      	ldr	r2, [pc, #28]	; (4ecc <sys_clock_tick_get+0x3c>)
    4eb0:	6813      	ldr	r3, [r2, #0]
    4eb2:	6851      	ldr	r1, [r2, #4]
    4eb4:	18c3      	adds	r3, r0, r3
    4eb6:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    4eba:	f384 8811 	msr	BASEPRI, r4
    4ebe:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4ec2:	2201      	movs	r2, #1
    4ec4:	2a00      	cmp	r2, #0
    4ec6:	d0f0      	beq.n	4eaa <sys_clock_tick_get+0x1a>
	}
	return t;
}
    4ec8:	4618      	mov	r0, r3
    4eca:	bd10      	pop	{r4, pc}
    4ecc:	200003a0 	.word	0x200003a0

00004ed0 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    4ed0:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    4ed2:	4802      	ldr	r0, [pc, #8]	; (4edc <boot_banner+0xc>)
    4ed4:	f000 fa3d 	bl	5352 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    4ed8:	bd08      	pop	{r3, pc}
    4eda:	bf00      	nop
    4edc:	00007d94 	.word	0x00007d94

00004ee0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    4ee0:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    4ee2:	4c06      	ldr	r4, [pc, #24]	; (4efc <statics_init+0x1c>)
    4ee4:	e005      	b.n	4ef2 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    4ee6:	68a2      	ldr	r2, [r4, #8]
    4ee8:	6861      	ldr	r1, [r4, #4]
    4eea:	4620      	mov	r0, r4
    4eec:	f002 f9b0 	bl	7250 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    4ef0:	3414      	adds	r4, #20
    4ef2:	4b03      	ldr	r3, [pc, #12]	; (4f00 <statics_init+0x20>)
    4ef4:	429c      	cmp	r4, r3
    4ef6:	d3f6      	bcc.n	4ee6 <statics_init+0x6>
		}
	}
	return 0;
}
    4ef8:	2000      	movs	r0, #0
    4efa:	bd10      	pop	{r4, pc}
    4efc:	2000018e 	.word	0x2000018e
    4f00:	2000018e 	.word	0x2000018e

00004f04 <nrf_cc3xx_platform_init_no_rng>:
    4f04:	b510      	push	{r4, lr}
    4f06:	4c0a      	ldr	r4, [pc, #40]	; (4f30 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4f08:	6823      	ldr	r3, [r4, #0]
    4f0a:	b11b      	cbz	r3, 4f14 <nrf_cc3xx_platform_init_no_rng+0x10>
    4f0c:	2301      	movs	r3, #1
    4f0e:	6023      	str	r3, [r4, #0]
    4f10:	2000      	movs	r0, #0
    4f12:	bd10      	pop	{r4, pc}
    4f14:	f000 f8ea 	bl	50ec <CC_LibInitNoRng>
    4f18:	2800      	cmp	r0, #0
    4f1a:	d0f7      	beq.n	4f0c <nrf_cc3xx_platform_init_no_rng+0x8>
    4f1c:	3801      	subs	r0, #1
    4f1e:	2806      	cmp	r0, #6
    4f20:	d803      	bhi.n	4f2a <nrf_cc3xx_platform_init_no_rng+0x26>
    4f22:	4b04      	ldr	r3, [pc, #16]	; (4f34 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4f24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4f28:	bd10      	pop	{r4, pc}
    4f2a:	4803      	ldr	r0, [pc, #12]	; (4f38 <nrf_cc3xx_platform_init_no_rng+0x34>)
    4f2c:	bd10      	pop	{r4, pc}
    4f2e:	bf00      	nop
    4f30:	20001b00 	.word	0x20001b00
    4f34:	00007dc4 	.word	0x00007dc4
    4f38:	ffff8ffe 	.word	0xffff8ffe

00004f3c <nrf_cc3xx_platform_abort>:
    4f3c:	f3bf 8f4f 	dsb	sy
    4f40:	4905      	ldr	r1, [pc, #20]	; (4f58 <nrf_cc3xx_platform_abort+0x1c>)
    4f42:	4b06      	ldr	r3, [pc, #24]	; (4f5c <nrf_cc3xx_platform_abort+0x20>)
    4f44:	68ca      	ldr	r2, [r1, #12]
    4f46:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4f4a:	4313      	orrs	r3, r2
    4f4c:	60cb      	str	r3, [r1, #12]
    4f4e:	f3bf 8f4f 	dsb	sy
    4f52:	bf00      	nop
    4f54:	e7fd      	b.n	4f52 <nrf_cc3xx_platform_abort+0x16>
    4f56:	bf00      	nop
    4f58:	e000ed00 	.word	0xe000ed00
    4f5c:	05fa0004 	.word	0x05fa0004

00004f60 <CC_PalAbort>:
    4f60:	b410      	push	{r4}
    4f62:	4b09      	ldr	r3, [pc, #36]	; (4f88 <CC_PalAbort+0x28>)
    4f64:	4909      	ldr	r1, [pc, #36]	; (4f8c <CC_PalAbort+0x2c>)
    4f66:	4c0a      	ldr	r4, [pc, #40]	; (4f90 <CC_PalAbort+0x30>)
    4f68:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    4f6c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4f70:	6849      	ldr	r1, [r1, #4]
    4f72:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4f76:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4f7a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4f7e:	2300      	movs	r3, #0
    4f80:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    4f84:	bc10      	pop	{r4}
    4f86:	4708      	bx	r1
    4f88:	5002b000 	.word	0x5002b000
    4f8c:	20000124 	.word	0x20000124
    4f90:	5002a000 	.word	0x5002a000

00004f94 <nrf_cc3xx_platform_set_abort>:
    4f94:	e9d0 1200 	ldrd	r1, r2, [r0]
    4f98:	4b01      	ldr	r3, [pc, #4]	; (4fa0 <nrf_cc3xx_platform_set_abort+0xc>)
    4f9a:	e9c3 1200 	strd	r1, r2, [r3]
    4f9e:	4770      	bx	lr
    4fa0:	20000124 	.word	0x20000124

00004fa4 <mutex_free>:
    4fa4:	b510      	push	{r4, lr}
    4fa6:	4604      	mov	r4, r0
    4fa8:	b150      	cbz	r0, 4fc0 <mutex_free+0x1c>
    4faa:	6863      	ldr	r3, [r4, #4]
    4fac:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4fb0:	d005      	beq.n	4fbe <mutex_free+0x1a>
    4fb2:	4a06      	ldr	r2, [pc, #24]	; (4fcc <mutex_free+0x28>)
    4fb4:	4293      	cmp	r3, r2
    4fb6:	d002      	beq.n	4fbe <mutex_free+0x1a>
    4fb8:	2300      	movs	r3, #0
    4fba:	6023      	str	r3, [r4, #0]
    4fbc:	6062      	str	r2, [r4, #4]
    4fbe:	bd10      	pop	{r4, pc}
    4fc0:	4b03      	ldr	r3, [pc, #12]	; (4fd0 <mutex_free+0x2c>)
    4fc2:	4804      	ldr	r0, [pc, #16]	; (4fd4 <mutex_free+0x30>)
    4fc4:	685b      	ldr	r3, [r3, #4]
    4fc6:	4798      	blx	r3
    4fc8:	e7ef      	b.n	4faa <mutex_free+0x6>
    4fca:	bf00      	nop
    4fcc:	a95c5f2c 	.word	0xa95c5f2c
    4fd0:	20000124 	.word	0x20000124
    4fd4:	00007de0 	.word	0x00007de0

00004fd8 <mutex_lock>:
    4fd8:	b1c8      	cbz	r0, 500e <mutex_lock+0x36>
    4fda:	6843      	ldr	r3, [r0, #4]
    4fdc:	4a0d      	ldr	r2, [pc, #52]	; (5014 <mutex_lock+0x3c>)
    4fde:	4293      	cmp	r3, r2
    4fe0:	d013      	beq.n	500a <mutex_lock+0x32>
    4fe2:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4fe6:	d00e      	beq.n	5006 <mutex_lock+0x2e>
    4fe8:	2301      	movs	r3, #1
    4fea:	e850 2f00 	ldrex	r2, [r0]
    4fee:	4619      	mov	r1, r3
    4ff0:	e840 1c00 	strex	ip, r1, [r0]
    4ff4:	f09c 0f00 	teq	ip, #0
    4ff8:	d1f7      	bne.n	4fea <mutex_lock+0x12>
    4ffa:	2a01      	cmp	r2, #1
    4ffc:	d0f5      	beq.n	4fea <mutex_lock+0x12>
    4ffe:	f3bf 8f5f 	dmb	sy
    5002:	2000      	movs	r0, #0
    5004:	4770      	bx	lr
    5006:	4804      	ldr	r0, [pc, #16]	; (5018 <mutex_lock+0x40>)
    5008:	4770      	bx	lr
    500a:	4804      	ldr	r0, [pc, #16]	; (501c <mutex_lock+0x44>)
    500c:	4770      	bx	lr
    500e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5012:	4770      	bx	lr
    5014:	a95c5f2c 	.word	0xa95c5f2c
    5018:	ffff8fe9 	.word	0xffff8fe9
    501c:	ffff8fea 	.word	0xffff8fea

00005020 <mutex_unlock>:
    5020:	b180      	cbz	r0, 5044 <mutex_unlock+0x24>
    5022:	6843      	ldr	r3, [r0, #4]
    5024:	4a09      	ldr	r2, [pc, #36]	; (504c <mutex_unlock+0x2c>)
    5026:	4293      	cmp	r3, r2
    5028:	d00a      	beq.n	5040 <mutex_unlock+0x20>
    502a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    502e:	d005      	beq.n	503c <mutex_unlock+0x1c>
    5030:	f3bf 8f5f 	dmb	sy
    5034:	2300      	movs	r3, #0
    5036:	6003      	str	r3, [r0, #0]
    5038:	4618      	mov	r0, r3
    503a:	4770      	bx	lr
    503c:	4804      	ldr	r0, [pc, #16]	; (5050 <mutex_unlock+0x30>)
    503e:	4770      	bx	lr
    5040:	4804      	ldr	r0, [pc, #16]	; (5054 <mutex_unlock+0x34>)
    5042:	4770      	bx	lr
    5044:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5048:	4770      	bx	lr
    504a:	bf00      	nop
    504c:	a95c5f2c 	.word	0xa95c5f2c
    5050:	ffff8fe9 	.word	0xffff8fe9
    5054:	ffff8fea 	.word	0xffff8fea

00005058 <mutex_init>:
    5058:	b510      	push	{r4, lr}
    505a:	4604      	mov	r4, r0
    505c:	b120      	cbz	r0, 5068 <mutex_init+0x10>
    505e:	4b04      	ldr	r3, [pc, #16]	; (5070 <mutex_init+0x18>)
    5060:	6063      	str	r3, [r4, #4]
    5062:	2200      	movs	r2, #0
    5064:	6022      	str	r2, [r4, #0]
    5066:	bd10      	pop	{r4, pc}
    5068:	4802      	ldr	r0, [pc, #8]	; (5074 <mutex_init+0x1c>)
    506a:	f7ff ff79 	bl	4f60 <CC_PalAbort>
    506e:	e7f6      	b.n	505e <mutex_init+0x6>
    5070:	3a00003a 	.word	0x3a00003a
    5074:	00007e08 	.word	0x00007e08

00005078 <nrf_cc3xx_platform_set_mutexes>:
    5078:	b570      	push	{r4, r5, r6, lr}
    507a:	e9d0 2300 	ldrd	r2, r3, [r0]
    507e:	4c17      	ldr	r4, [pc, #92]	; (50dc <nrf_cc3xx_platform_set_mutexes+0x64>)
    5080:	4d17      	ldr	r5, [pc, #92]	; (50e0 <nrf_cc3xx_platform_set_mutexes+0x68>)
    5082:	6063      	str	r3, [r4, #4]
    5084:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    5088:	e9c4 3002 	strd	r3, r0, [r4, #8]
    508c:	6022      	str	r2, [r4, #0]
    508e:	6848      	ldr	r0, [r1, #4]
    5090:	f8d1 c000 	ldr.w	ip, [r1]
    5094:	4b13      	ldr	r3, [pc, #76]	; (50e4 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    5096:	e9c3 c000 	strd	ip, r0, [r3]
    509a:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    509e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    50a2:	f8c3 c008 	str.w	ip, [r3, #8]
    50a6:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    50aa:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    50ae:	6909      	ldr	r1, [r1, #16]
    50b0:	f8c3 c00c 	str.w	ip, [r3, #12]
    50b4:	6119      	str	r1, [r3, #16]
    50b6:	d010      	beq.n	50da <nrf_cc3xx_platform_set_mutexes+0x62>
    50b8:	490b      	ldr	r1, [pc, #44]	; (50e8 <nrf_cc3xx_platform_set_mutexes+0x70>)
    50ba:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    50be:	2300      	movs	r3, #0
    50c0:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    50c4:	f505 708a 	add.w	r0, r5, #276	; 0x114
    50c8:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    50cc:	4790      	blx	r2
    50ce:	6823      	ldr	r3, [r4, #0]
    50d0:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    50d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50d8:	4718      	bx	r3
    50da:	bd70      	pop	{r4, r5, r6, pc}
    50dc:	20000140 	.word	0x20000140
    50e0:	20001b18 	.word	0x20001b18
    50e4:	2000012c 	.word	0x2000012c
    50e8:	a95c5f2c 	.word	0xa95c5f2c

000050ec <CC_LibInitNoRng>:
    50ec:	b538      	push	{r3, r4, r5, lr}
    50ee:	f000 f82f 	bl	5150 <CC_HalInit>
    50f2:	b120      	cbz	r0, 50fe <CC_LibInitNoRng+0x12>
    50f4:	2403      	movs	r4, #3
    50f6:	f000 f863 	bl	51c0 <CC_PalTerminate>
    50fa:	4620      	mov	r0, r4
    50fc:	bd38      	pop	{r3, r4, r5, pc}
    50fe:	f000 f831 	bl	5164 <CC_PalInit>
    5102:	b998      	cbnz	r0, 512c <CC_LibInitNoRng+0x40>
    5104:	f000 f8ac 	bl	5260 <CC_PalPowerSaveModeSelect>
    5108:	b998      	cbnz	r0, 5132 <CC_LibInitNoRng+0x46>
    510a:	4d0f      	ldr	r5, [pc, #60]	; (5148 <CC_LibInitNoRng+0x5c>)
    510c:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    5110:	0e1b      	lsrs	r3, r3, #24
    5112:	2bf0      	cmp	r3, #240	; 0xf0
    5114:	d108      	bne.n	5128 <CC_LibInitNoRng+0x3c>
    5116:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    511a:	4b0c      	ldr	r3, [pc, #48]	; (514c <CC_LibInitNoRng+0x60>)
    511c:	429a      	cmp	r2, r3
    511e:	d00a      	beq.n	5136 <CC_LibInitNoRng+0x4a>
    5120:	2407      	movs	r4, #7
    5122:	f000 f817 	bl	5154 <CC_HalTerminate>
    5126:	e7e6      	b.n	50f6 <CC_LibInitNoRng+0xa>
    5128:	2406      	movs	r4, #6
    512a:	e7fa      	b.n	5122 <CC_LibInitNoRng+0x36>
    512c:	2404      	movs	r4, #4
    512e:	4620      	mov	r0, r4
    5130:	bd38      	pop	{r3, r4, r5, pc}
    5132:	2400      	movs	r4, #0
    5134:	e7f5      	b.n	5122 <CC_LibInitNoRng+0x36>
    5136:	2001      	movs	r0, #1
    5138:	f000 f892 	bl	5260 <CC_PalPowerSaveModeSelect>
    513c:	4604      	mov	r4, r0
    513e:	2800      	cmp	r0, #0
    5140:	d1f7      	bne.n	5132 <CC_LibInitNoRng+0x46>
    5142:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5146:	e7d8      	b.n	50fa <CC_LibInitNoRng+0xe>
    5148:	5002b000 	.word	0x5002b000
    514c:	20e00000 	.word	0x20e00000

00005150 <CC_HalInit>:
    5150:	2000      	movs	r0, #0
    5152:	4770      	bx	lr

00005154 <CC_HalTerminate>:
    5154:	2000      	movs	r0, #0
    5156:	4770      	bx	lr

00005158 <CC_HalMaskInterrupt>:
    5158:	4b01      	ldr	r3, [pc, #4]	; (5160 <CC_HalMaskInterrupt+0x8>)
    515a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    515e:	4770      	bx	lr
    5160:	5002b000 	.word	0x5002b000

00005164 <CC_PalInit>:
    5164:	b510      	push	{r4, lr}
    5166:	4811      	ldr	r0, [pc, #68]	; (51ac <CC_PalInit+0x48>)
    5168:	f000 f848 	bl	51fc <CC_PalMutexCreate>
    516c:	b100      	cbz	r0, 5170 <CC_PalInit+0xc>
    516e:	bd10      	pop	{r4, pc}
    5170:	480f      	ldr	r0, [pc, #60]	; (51b0 <CC_PalInit+0x4c>)
    5172:	f000 f843 	bl	51fc <CC_PalMutexCreate>
    5176:	2800      	cmp	r0, #0
    5178:	d1f9      	bne.n	516e <CC_PalInit+0xa>
    517a:	4c0e      	ldr	r4, [pc, #56]	; (51b4 <CC_PalInit+0x50>)
    517c:	4620      	mov	r0, r4
    517e:	f000 f83d 	bl	51fc <CC_PalMutexCreate>
    5182:	2800      	cmp	r0, #0
    5184:	d1f3      	bne.n	516e <CC_PalInit+0xa>
    5186:	4b0c      	ldr	r3, [pc, #48]	; (51b8 <CC_PalInit+0x54>)
    5188:	480c      	ldr	r0, [pc, #48]	; (51bc <CC_PalInit+0x58>)
    518a:	601c      	str	r4, [r3, #0]
    518c:	f000 f836 	bl	51fc <CC_PalMutexCreate>
    5190:	4601      	mov	r1, r0
    5192:	2800      	cmp	r0, #0
    5194:	d1eb      	bne.n	516e <CC_PalInit+0xa>
    5196:	f000 f82d 	bl	51f4 <CC_PalDmaInit>
    519a:	4604      	mov	r4, r0
    519c:	b108      	cbz	r0, 51a2 <CC_PalInit+0x3e>
    519e:	4620      	mov	r0, r4
    51a0:	bd10      	pop	{r4, pc}
    51a2:	f000 f83f 	bl	5224 <CC_PalPowerSaveModeInit>
    51a6:	4620      	mov	r0, r4
    51a8:	e7fa      	b.n	51a0 <CC_PalInit+0x3c>
    51aa:	bf00      	nop
    51ac:	20000180 	.word	0x20000180
    51b0:	2000017c 	.word	0x2000017c
    51b4:	20000178 	.word	0x20000178
    51b8:	20000170 	.word	0x20000170
    51bc:	20000174 	.word	0x20000174

000051c0 <CC_PalTerminate>:
    51c0:	b508      	push	{r3, lr}
    51c2:	4808      	ldr	r0, [pc, #32]	; (51e4 <CC_PalTerminate+0x24>)
    51c4:	f000 f824 	bl	5210 <CC_PalMutexDestroy>
    51c8:	4807      	ldr	r0, [pc, #28]	; (51e8 <CC_PalTerminate+0x28>)
    51ca:	f000 f821 	bl	5210 <CC_PalMutexDestroy>
    51ce:	4807      	ldr	r0, [pc, #28]	; (51ec <CC_PalTerminate+0x2c>)
    51d0:	f000 f81e 	bl	5210 <CC_PalMutexDestroy>
    51d4:	4806      	ldr	r0, [pc, #24]	; (51f0 <CC_PalTerminate+0x30>)
    51d6:	f000 f81b 	bl	5210 <CC_PalMutexDestroy>
    51da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    51de:	f000 b80b 	b.w	51f8 <CC_PalDmaTerminate>
    51e2:	bf00      	nop
    51e4:	20000180 	.word	0x20000180
    51e8:	2000017c 	.word	0x2000017c
    51ec:	20000178 	.word	0x20000178
    51f0:	20000174 	.word	0x20000174

000051f4 <CC_PalDmaInit>:
    51f4:	2000      	movs	r0, #0
    51f6:	4770      	bx	lr

000051f8 <CC_PalDmaTerminate>:
    51f8:	4770      	bx	lr
    51fa:	bf00      	nop

000051fc <CC_PalMutexCreate>:
    51fc:	b508      	push	{r3, lr}
    51fe:	4b03      	ldr	r3, [pc, #12]	; (520c <CC_PalMutexCreate+0x10>)
    5200:	6802      	ldr	r2, [r0, #0]
    5202:	681b      	ldr	r3, [r3, #0]
    5204:	6810      	ldr	r0, [r2, #0]
    5206:	4798      	blx	r3
    5208:	2000      	movs	r0, #0
    520a:	bd08      	pop	{r3, pc}
    520c:	20000140 	.word	0x20000140

00005210 <CC_PalMutexDestroy>:
    5210:	b508      	push	{r3, lr}
    5212:	4b03      	ldr	r3, [pc, #12]	; (5220 <CC_PalMutexDestroy+0x10>)
    5214:	6802      	ldr	r2, [r0, #0]
    5216:	685b      	ldr	r3, [r3, #4]
    5218:	6810      	ldr	r0, [r2, #0]
    521a:	4798      	blx	r3
    521c:	2000      	movs	r0, #0
    521e:	bd08      	pop	{r3, pc}
    5220:	20000140 	.word	0x20000140

00005224 <CC_PalPowerSaveModeInit>:
    5224:	b570      	push	{r4, r5, r6, lr}
    5226:	4c09      	ldr	r4, [pc, #36]	; (524c <CC_PalPowerSaveModeInit+0x28>)
    5228:	4d09      	ldr	r5, [pc, #36]	; (5250 <CC_PalPowerSaveModeInit+0x2c>)
    522a:	6920      	ldr	r0, [r4, #16]
    522c:	68ab      	ldr	r3, [r5, #8]
    522e:	4798      	blx	r3
    5230:	b118      	cbz	r0, 523a <CC_PalPowerSaveModeInit+0x16>
    5232:	4b08      	ldr	r3, [pc, #32]	; (5254 <CC_PalPowerSaveModeInit+0x30>)
    5234:	4808      	ldr	r0, [pc, #32]	; (5258 <CC_PalPowerSaveModeInit+0x34>)
    5236:	685b      	ldr	r3, [r3, #4]
    5238:	4798      	blx	r3
    523a:	4a08      	ldr	r2, [pc, #32]	; (525c <CC_PalPowerSaveModeInit+0x38>)
    523c:	68eb      	ldr	r3, [r5, #12]
    523e:	6920      	ldr	r0, [r4, #16]
    5240:	2100      	movs	r1, #0
    5242:	6011      	str	r1, [r2, #0]
    5244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5248:	4718      	bx	r3
    524a:	bf00      	nop
    524c:	2000012c 	.word	0x2000012c
    5250:	20000140 	.word	0x20000140
    5254:	20000124 	.word	0x20000124
    5258:	00007e2c 	.word	0x00007e2c
    525c:	20001b14 	.word	0x20001b14

00005260 <CC_PalPowerSaveModeSelect>:
    5260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5262:	4d1a      	ldr	r5, [pc, #104]	; (52cc <CC_PalPowerSaveModeSelect+0x6c>)
    5264:	4e1a      	ldr	r6, [pc, #104]	; (52d0 <CC_PalPowerSaveModeSelect+0x70>)
    5266:	4604      	mov	r4, r0
    5268:	68b2      	ldr	r2, [r6, #8]
    526a:	6928      	ldr	r0, [r5, #16]
    526c:	4790      	blx	r2
    526e:	b9e8      	cbnz	r0, 52ac <CC_PalPowerSaveModeSelect+0x4c>
    5270:	4f18      	ldr	r7, [pc, #96]	; (52d4 <CC_PalPowerSaveModeSelect+0x74>)
    5272:	683b      	ldr	r3, [r7, #0]
    5274:	b14c      	cbz	r4, 528a <CC_PalPowerSaveModeSelect+0x2a>
    5276:	b1a3      	cbz	r3, 52a2 <CC_PalPowerSaveModeSelect+0x42>
    5278:	2b01      	cmp	r3, #1
    527a:	d019      	beq.n	52b0 <CC_PalPowerSaveModeSelect+0x50>
    527c:	3b01      	subs	r3, #1
    527e:	603b      	str	r3, [r7, #0]
    5280:	6928      	ldr	r0, [r5, #16]
    5282:	68f3      	ldr	r3, [r6, #12]
    5284:	4798      	blx	r3
    5286:	2000      	movs	r0, #0
    5288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    528a:	b943      	cbnz	r3, 529e <CC_PalPowerSaveModeSelect+0x3e>
    528c:	4a12      	ldr	r2, [pc, #72]	; (52d8 <CC_PalPowerSaveModeSelect+0x78>)
    528e:	2101      	movs	r1, #1
    5290:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    5294:	4911      	ldr	r1, [pc, #68]	; (52dc <CC_PalPowerSaveModeSelect+0x7c>)
    5296:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    529a:	2a00      	cmp	r2, #0
    529c:	d1fb      	bne.n	5296 <CC_PalPowerSaveModeSelect+0x36>
    529e:	3301      	adds	r3, #1
    52a0:	603b      	str	r3, [r7, #0]
    52a2:	68f3      	ldr	r3, [r6, #12]
    52a4:	6928      	ldr	r0, [r5, #16]
    52a6:	4798      	blx	r3
    52a8:	2000      	movs	r0, #0
    52aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52ac:	480c      	ldr	r0, [pc, #48]	; (52e0 <CC_PalPowerSaveModeSelect+0x80>)
    52ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52b0:	4a0a      	ldr	r2, [pc, #40]	; (52dc <CC_PalPowerSaveModeSelect+0x7c>)
    52b2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    52b6:	2b00      	cmp	r3, #0
    52b8:	d1fb      	bne.n	52b2 <CC_PalPowerSaveModeSelect+0x52>
    52ba:	4a07      	ldr	r2, [pc, #28]	; (52d8 <CC_PalPowerSaveModeSelect+0x78>)
    52bc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    52c0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    52c4:	f7ff ff48 	bl	5158 <CC_HalMaskInterrupt>
    52c8:	683b      	ldr	r3, [r7, #0]
    52ca:	e7d7      	b.n	527c <CC_PalPowerSaveModeSelect+0x1c>
    52cc:	2000012c 	.word	0x2000012c
    52d0:	20000140 	.word	0x20000140
    52d4:	20001b14 	.word	0x20001b14
    52d8:	5002a000 	.word	0x5002a000
    52dc:	5002b000 	.word	0x5002b000
    52e0:	ffff8fe9 	.word	0xffff8fe9

000052e4 <uart_irq_callback_user_data_set>:
{
    52e4:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    52e6:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    52e8:	b123      	cbz	r3, 52f4 <uart_irq_callback_user_data_set+0x10>
    52ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    52ec:	b12b      	cbz	r3, 52fa <uart_irq_callback_user_data_set+0x16>
		api->irq_callback_set(dev, cb, user_data);
    52ee:	4798      	blx	r3
		return 0;
    52f0:	2000      	movs	r0, #0
}
    52f2:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    52f4:	f06f 0057 	mvn.w	r0, #87	; 0x57
    52f8:	e7fb      	b.n	52f2 <uart_irq_callback_user_data_set+0xe>
    52fa:	f06f 0057 	mvn.w	r0, #87	; 0x57
    52fe:	e7f8      	b.n	52f2 <uart_irq_callback_user_data_set+0xe>

00005300 <uart_configure>:

extern int z_impl_uart_configure(const struct device * dev, const struct uart_config * cfg);

__pinned_func
static inline int uart_configure(const struct device * dev, const struct uart_config * cfg)
{
    5300:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    5302:	6883      	ldr	r3, [r0, #8]
	if (api->configure == NULL) {
    5304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5306:	b10b      	cbz	r3, 530c <uart_configure+0xc>
	return api->configure(dev, cfg);
    5308:	4798      	blx	r3
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_UART_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_configure(dev, cfg);
}
    530a:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    530c:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_configure(dev, cfg);
    5310:	e7fb      	b.n	530a <uart_configure+0xa>

00005312 <uart_config_get>:

extern int z_impl_uart_config_get(const struct device * dev, struct uart_config * cfg);

__pinned_func
static inline int uart_config_get(const struct device * dev, struct uart_config * cfg)
{
    5312:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    5314:	6883      	ldr	r3, [r0, #8]
	if (api->config_get == NULL) {
    5316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5318:	b10b      	cbz	r3, 531e <uart_config_get+0xc>
	return api->config_get(dev, cfg);
    531a:	4798      	blx	r3
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_UART_CONFIG_GET);
	}
#endif
	compiler_barrier();
	return z_impl_uart_config_get(dev, cfg);
}
    531c:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    531e:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_config_get(dev, cfg);
    5322:	e7fb      	b.n	531c <uart_config_get+0xa>

00005324 <uart_irq_rx_enable>:

extern void z_impl_uart_irq_rx_enable(const struct device * dev);

__pinned_func
static inline void uart_irq_rx_enable(const struct device * dev)
{
    5324:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    5326:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
    5328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    532a:	b103      	cbz	r3, 532e <uart_irq_rx_enable+0xa>
		api->irq_rx_enable(dev);
    532c:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
    532e:	bd08      	pop	{r3, pc}

00005330 <uart_irq_rx_disable>:

extern void z_impl_uart_irq_rx_disable(const struct device * dev);

__pinned_func
static inline void uart_irq_rx_disable(const struct device * dev)
{
    5330:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    5332:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
    5334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5336:	b103      	cbz	r3, 533a <uart_irq_rx_disable+0xa>
		api->irq_rx_disable(dev);
    5338:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
}
    533a:	bd08      	pop	{r3, pc}

0000533c <uart_irq_update>:

extern int z_impl_uart_irq_update(const struct device * dev);

__pinned_func
static inline int uart_irq_update(const struct device * dev)
{
    533c:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    533e:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
    5340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    5342:	b10b      	cbz	r3, 5348 <uart_irq_update+0xc>
	return api->irq_update(dev);
    5344:	4798      	blx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_UPDATE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_irq_update(dev);
}
    5346:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    5348:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_irq_update(dev);
    534c:	e7fb      	b.n	5346 <uart_irq_update+0xa>

0000534e <arch_printk_char_out>:
}
    534e:	2000      	movs	r0, #0
    5350:	4770      	bx	lr

00005352 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5352:	b40f      	push	{r0, r1, r2, r3}
    5354:	b500      	push	{lr}
    5356:	b083      	sub	sp, #12
    5358:	a904      	add	r1, sp, #16
    535a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    535e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    5360:	f7fb fb88 	bl	a74 <vprintk>

	va_end(ap);
}
    5364:	b003      	add	sp, #12
    5366:	f85d eb04 	ldr.w	lr, [sp], #4
    536a:	b004      	add	sp, #16
    536c:	4770      	bx	lr

0000536e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    536e:	b508      	push	{r3, lr}
    5370:	4604      	mov	r4, r0
    5372:	4608      	mov	r0, r1
    5374:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    5376:	461a      	mov	r2, r3
    5378:	47a0      	blx	r4
	return z_impl_z_current_get();
    537a:	f7ff fc2b 	bl	4bd4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    537e:	f7fc fd51 	bl	1e24 <z_impl_k_thread_abort>

00005382 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    5382:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    5384:	1d13      	adds	r3, r2, #4
    5386:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    538a:	b974      	cbnz	r4, 53aa <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
    538c:	68c3      	ldr	r3, [r0, #12]
    538e:	2401      	movs	r4, #1
    5390:	4094      	lsls	r4, r2
    5392:	4323      	orrs	r3, r4
    5394:	60c3      	str	r3, [r0, #12]
		b->next = c;
    5396:	3204      	adds	r2, #4
    5398:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    539c:	00cb      	lsls	r3, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    539e:	1d1a      	adds	r2, r3, #4
    53a0:	b289      	uxth	r1, r1
    53a2:	5281      	strh	r1, [r0, r2]
    53a4:	3306      	adds	r3, #6
    53a6:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    53a8:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    53aa:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    53ac:	3204      	adds	r2, #4
    53ae:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    53b0:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    53b4:	f10c 0e04 	add.w	lr, ip, #4
    53b8:	f820 300e 	strh.w	r3, [r0, lr]
    53bc:	f10c 0c06 	add.w	ip, ip, #6
    53c0:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    53c4:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    53c6:	3306      	adds	r3, #6
    53c8:	b289      	uxth	r1, r1
    53ca:	52c1      	strh	r1, [r0, r3]
    53cc:	5281      	strh	r1, [r0, r2]
    53ce:	e7eb      	b.n	53a8 <free_list_add_bidx+0x26>

000053d0 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    53d0:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    53d2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    53d6:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    53d8:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    53da:	fab2 f282 	clz	r2, r2
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
    53de:	f1c2 021f 	rsb	r2, r2, #31
    53e2:	f7ff ffce 	bl	5382 <free_list_add_bidx>
	}
}
    53e6:	bd08      	pop	{r3, pc}

000053e8 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    53e8:	b570      	push	{r4, r5, r6, lr}
    53ea:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    53ec:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    53ee:	1dc8      	adds	r0, r1, #7
    53f0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    53f4:	440a      	add	r2, r1
    53f6:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    53fa:	1a12      	subs	r2, r2, r0
    53fc:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    53fe:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    5400:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
    5402:	2300      	movs	r3, #0
    5404:	60c3      	str	r3, [r0, #12]
    5406:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    540a:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    540e:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    5412:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    5414:	1dce      	adds	r6, r1, #7
    5416:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    5418:	e005      	b.n	5426 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
    541a:	f103 0c04 	add.w	ip, r3, #4
    541e:	2400      	movs	r4, #0
    5420:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    5424:	3301      	adds	r3, #1
    5426:	4573      	cmp	r3, lr
    5428:	dbf7      	blt.n	541a <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    542a:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
    542c:	b2a4      	uxth	r4, r4
    542e:	8044      	strh	r4, [r0, #2]
    5430:	f04f 0c00 	mov.w	ip, #0
    5434:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    5438:	f044 0401 	orr.w	r4, r4, #1
    543c:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    543e:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    5440:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
    5444:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
    5448:	1ca5      	adds	r5, r4, #2
    544a:	f820 e005 	strh.w	lr, [r0, r5]
    544e:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
    5450:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
    5454:	1c95      	adds	r5, r2, #2
    5456:	f820 c005 	strh.w	ip, [r0, r5]
    545a:	4402      	add	r2, r0
    545c:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    545e:	8853      	ldrh	r3, [r2, #2]
    5460:	f043 0301 	orr.w	r3, r3, #1
    5464:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    5466:	f7ff ffb3 	bl	53d0 <free_list_add>
}
    546a:	bd70      	pop	{r4, r5, r6, pc}

0000546c <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    546c:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5470:	8b03      	ldrh	r3, [r0, #24]
    5472:	f023 0307 	bic.w	r3, r3, #7
    5476:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    5478:	8303      	strh	r3, [r0, #24]
}
    547a:	4770      	bx	lr

0000547c <notify_monitors>:
{
    547c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5480:	4606      	mov	r6, r0
    5482:	460f      	mov	r7, r1
    5484:	4690      	mov	r8, r2
	return list->head;
    5486:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5488:	b121      	cbz	r1, 5494 <notify_monitors+0x18>
	return node->next;
    548a:	680c      	ldr	r4, [r1, #0]
    548c:	b13c      	cbz	r4, 549e <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    548e:	b931      	cbnz	r1, 549e <notify_monitors+0x22>
    5490:	460c      	mov	r4, r1
    5492:	e004      	b.n	549e <notify_monitors+0x22>
    5494:	460c      	mov	r4, r1
    5496:	e002      	b.n	549e <notify_monitors+0x22>
    5498:	4623      	mov	r3, r4
    549a:	4621      	mov	r1, r4
    549c:	461c      	mov	r4, r3
    549e:	b169      	cbz	r1, 54bc <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    54a0:	684d      	ldr	r5, [r1, #4]
    54a2:	4643      	mov	r3, r8
    54a4:	463a      	mov	r2, r7
    54a6:	4630      	mov	r0, r6
    54a8:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    54aa:	2c00      	cmp	r4, #0
    54ac:	d0f4      	beq.n	5498 <notify_monitors+0x1c>
	return node->next;
    54ae:	6823      	ldr	r3, [r4, #0]
    54b0:	2b00      	cmp	r3, #0
    54b2:	d0f2      	beq.n	549a <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    54b4:	2c00      	cmp	r4, #0
    54b6:	d1f0      	bne.n	549a <notify_monitors+0x1e>
    54b8:	4623      	mov	r3, r4
    54ba:	e7ee      	b.n	549a <notify_monitors+0x1e>
}
    54bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000054c0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    54c0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    54c2:	f013 0307 	ands.w	r3, r3, #7
    54c6:	d103      	bne.n	54d0 <process_recheck+0x10>
	return list->head;
    54c8:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    54ca:	b10a      	cbz	r2, 54d0 <process_recheck+0x10>
		evt = EVT_START;
    54cc:	2003      	movs	r0, #3
    54ce:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    54d0:	2b02      	cmp	r3, #2
    54d2:	d003      	beq.n	54dc <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    54d4:	2b01      	cmp	r3, #1
    54d6:	d006      	beq.n	54e6 <process_recheck+0x26>
	int evt = EVT_NOP;
    54d8:	2000      	movs	r0, #0
    54da:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    54dc:	8b42      	ldrh	r2, [r0, #26]
    54de:	2a00      	cmp	r2, #0
    54e0:	d1f8      	bne.n	54d4 <process_recheck+0x14>
		evt = EVT_STOP;
    54e2:	2004      	movs	r0, #4
    54e4:	4770      	bx	lr
    54e6:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    54e8:	b10b      	cbz	r3, 54ee <process_recheck+0x2e>
		evt = EVT_RESET;
    54ea:	2005      	movs	r0, #5
}
    54ec:	4770      	bx	lr
	int evt = EVT_NOP;
    54ee:	2000      	movs	r0, #0
    54f0:	4770      	bx	lr

000054f2 <process_complete>:
{
    54f2:	b510      	push	{r4, lr}
    54f4:	4604      	mov	r4, r0
    54f6:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    54f8:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    54fa:	2a00      	cmp	r2, #0
    54fc:	db07      	blt.n	550e <process_complete+0x1c>
    54fe:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    5502:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    5504:	2a01      	cmp	r2, #1
    5506:	d90e      	bls.n	5526 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    5508:	2b04      	cmp	r3, #4
    550a:	d036      	beq.n	557a <process_complete+0x88>
}
    550c:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    550e:	e9d0 0100 	ldrd	r0, r1, [r0]
    5512:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    5516:	2300      	movs	r3, #0
    5518:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    551a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    551c:	2101      	movs	r1, #1
    551e:	4620      	mov	r0, r4
    5520:	f7ff ffa4 	bl	546c <set_state>
    5524:	e7f2      	b.n	550c <process_complete+0x1a>
		*clients = mgr->clients;
    5526:	e9d0 0100 	ldrd	r0, r1, [r0]
    552a:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    552e:	2200      	movs	r2, #0
    5530:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    5532:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    5534:	2b06      	cmp	r3, #6
    5536:	d11b      	bne.n	5570 <process_complete+0x7e>
	return list->head;
    5538:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    553c:	b153      	cbz	r3, 5554 <process_complete+0x62>
				mgr->refs += 1U;
    553e:	8b62      	ldrh	r2, [r4, #26]
    5540:	3201      	adds	r2, #1
    5542:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5544:	461a      	mov	r2, r3
	return node->next;
    5546:	681b      	ldr	r3, [r3, #0]
    5548:	2b00      	cmp	r3, #0
    554a:	d0f7      	beq.n	553c <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    554c:	2a00      	cmp	r2, #0
    554e:	d1f5      	bne.n	553c <process_complete+0x4a>
    5550:	4613      	mov	r3, r2
    5552:	e7f3      	b.n	553c <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    5554:	2102      	movs	r1, #2
    5556:	4620      	mov	r0, r4
    5558:	f7ff ff88 	bl	546c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    555c:	4620      	mov	r0, r4
    555e:	f7ff ffaf 	bl	54c0 <process_recheck>
    5562:	2800      	cmp	r0, #0
    5564:	d0d2      	beq.n	550c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5566:	8b23      	ldrh	r3, [r4, #24]
    5568:	f043 0320 	orr.w	r3, r3, #32
    556c:	8323      	strh	r3, [r4, #24]
    556e:	e7cd      	b.n	550c <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    5570:	2100      	movs	r1, #0
    5572:	4620      	mov	r0, r4
    5574:	f7ff ff7a 	bl	546c <set_state>
    5578:	e7f0      	b.n	555c <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    557a:	2100      	movs	r1, #0
    557c:	f7ff ff76 	bl	546c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5580:	4620      	mov	r0, r4
    5582:	f7ff ff9d 	bl	54c0 <process_recheck>
    5586:	2800      	cmp	r0, #0
    5588:	d0c0      	beq.n	550c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    558a:	8b23      	ldrh	r3, [r4, #24]
    558c:	f043 0320 	orr.w	r3, r3, #32
    5590:	8323      	strh	r3, [r4, #24]
}
    5592:	e7bb      	b.n	550c <process_complete+0x1a>

00005594 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    5594:	b150      	cbz	r0, 55ac <validate_args+0x18>
{
    5596:	b510      	push	{r4, lr}
    5598:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    559a:	b151      	cbz	r1, 55b2 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    559c:	1d08      	adds	r0, r1, #4
    559e:	f000 f8c4 	bl	572a <sys_notify_validate>
	if ((rv == 0)
    55a2:	b910      	cbnz	r0, 55aa <validate_args+0x16>
	    && ((cli->notify.flags
    55a4:	68a3      	ldr	r3, [r4, #8]
    55a6:	2b03      	cmp	r3, #3
    55a8:	d806      	bhi.n	55b8 <validate_args+0x24>
}
    55aa:	bd10      	pop	{r4, pc}
		return -EINVAL;
    55ac:	f06f 0015 	mvn.w	r0, #21
}
    55b0:	4770      	bx	lr
		return -EINVAL;
    55b2:	f06f 0015 	mvn.w	r0, #21
    55b6:	e7f8      	b.n	55aa <validate_args+0x16>
		rv = -EINVAL;
    55b8:	f06f 0015 	mvn.w	r0, #21
    55bc:	e7f5      	b.n	55aa <validate_args+0x16>

000055be <notify_one>:
{
    55be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55c2:	4607      	mov	r7, r0
    55c4:	460c      	mov	r4, r1
    55c6:	4616      	mov	r6, r2
    55c8:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    55ca:	4619      	mov	r1, r3
    55cc:	1d20      	adds	r0, r4, #4
    55ce:	f000 f8c3 	bl	5758 <sys_notify_finalize>
	if (cb) {
    55d2:	b128      	cbz	r0, 55e0 <notify_one+0x22>
    55d4:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    55d6:	462b      	mov	r3, r5
    55d8:	4632      	mov	r2, r6
    55da:	4621      	mov	r1, r4
    55dc:	4638      	mov	r0, r7
    55de:	47c0      	blx	r8
}
    55e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000055e4 <notify_all>:
{
    55e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55e8:	4680      	mov	r8, r0
    55ea:	460c      	mov	r4, r1
    55ec:	4617      	mov	r7, r2
    55ee:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    55f0:	e004      	b.n	55fc <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    55f2:	4633      	mov	r3, r6
    55f4:	463a      	mov	r2, r7
    55f6:	4640      	mov	r0, r8
    55f8:	f7ff ffe1 	bl	55be <notify_one>
	return list->head;
    55fc:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    55fe:	b131      	cbz	r1, 560e <notify_all+0x2a>
	return node->next;
    5600:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    5602:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5604:	6863      	ldr	r3, [r4, #4]
    5606:	428b      	cmp	r3, r1
    5608:	d1f3      	bne.n	55f2 <notify_all+0xe>
	list->tail = node;
    560a:	6065      	str	r5, [r4, #4]
}
    560c:	e7f1      	b.n	55f2 <notify_all+0xe>
}
    560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005612 <transition_complete>:
{
    5612:	b508      	push	{r3, lr}
	__asm__ volatile(
    5614:	f04f 0c20 	mov.w	ip, #32
    5618:	f3ef 8211 	mrs	r2, BASEPRI
    561c:	f38c 8812 	msr	BASEPRI_MAX, ip
    5620:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5624:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    5626:	2101      	movs	r1, #1
    5628:	f7fb fa32 	bl	a90 <process_event>
}
    562c:	bd08      	pop	{r3, pc}

0000562e <onoff_manager_init>:
	if ((mgr == NULL)
    562e:	4603      	mov	r3, r0
    5630:	b170      	cbz	r0, 5650 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    5632:	b181      	cbz	r1, 5656 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    5634:	680a      	ldr	r2, [r1, #0]
    5636:	b18a      	cbz	r2, 565c <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    5638:	684a      	ldr	r2, [r1, #4]
    563a:	b192      	cbz	r2, 5662 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    563c:	2000      	movs	r0, #0
    563e:	6018      	str	r0, [r3, #0]
    5640:	6058      	str	r0, [r3, #4]
    5642:	6098      	str	r0, [r3, #8]
    5644:	60d8      	str	r0, [r3, #12]
    5646:	6118      	str	r0, [r3, #16]
    5648:	6158      	str	r0, [r3, #20]
    564a:	6198      	str	r0, [r3, #24]
    564c:	6119      	str	r1, [r3, #16]
	return 0;
    564e:	4770      	bx	lr
		return -EINVAL;
    5650:	f06f 0015 	mvn.w	r0, #21
    5654:	4770      	bx	lr
    5656:	f06f 0015 	mvn.w	r0, #21
    565a:	4770      	bx	lr
    565c:	f06f 0015 	mvn.w	r0, #21
    5660:	4770      	bx	lr
    5662:	f06f 0015 	mvn.w	r0, #21
}
    5666:	4770      	bx	lr

00005668 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5668:	b570      	push	{r4, r5, r6, lr}
    566a:	4605      	mov	r5, r0
    566c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    566e:	f7ff ff91 	bl	5594 <validate_args>

	if (rv < 0) {
    5672:	1e04      	subs	r4, r0, #0
    5674:	db30      	blt.n	56d8 <onoff_request+0x70>
    5676:	f04f 0320 	mov.w	r3, #32
    567a:	f3ef 8211 	mrs	r2, BASEPRI
    567e:	f383 8812 	msr	BASEPRI_MAX, r3
    5682:	f3bf 8f6f 	isb	sy
    5686:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5688:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    568c:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5690:	8b6b      	ldrh	r3, [r5, #26]
    5692:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5696:	428b      	cmp	r3, r1
    5698:	d02c      	beq.n	56f4 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    569a:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    569c:	f1bc 0f02 	cmp.w	ip, #2
    56a0:	d008      	beq.n	56b4 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    56a2:	f1bc 0f06 	cmp.w	ip, #6
    56a6:	d819      	bhi.n	56dc <onoff_request+0x74>
    56a8:	e8df f00c 	tbb	[pc, ip]
    56ac:	1818181e 	.word	0x1818181e
    56b0:	2a1e      	.short	0x2a1e
    56b2:	1e          	.byte	0x1e
    56b3:	00          	.byte	0x00
		mgr->refs += 1U;
    56b4:	3301      	adds	r3, #1
    56b6:	836b      	strh	r3, [r5, #26]
		notify = true;
    56b8:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    56ba:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    56bc:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    56be:	b128      	cbz	r0, 56cc <onoff_request+0x64>
	parent->next = child;
    56c0:	2000      	movs	r0, #0
    56c2:	6030      	str	r0, [r6, #0]
	return list->tail;
    56c4:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    56c6:	b308      	cbz	r0, 570c <onoff_request+0xa4>
	parent->next = child;
    56c8:	6006      	str	r6, [r0, #0]
	list->tail = node;
    56ca:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    56cc:	bb09      	cbnz	r1, 5712 <onoff_request+0xaa>
	__asm__ volatile(
    56ce:	f38e 8811 	msr	BASEPRI, lr
    56d2:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    56d6:	bb0b      	cbnz	r3, 571c <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    56d8:	4620      	mov	r0, r4
    56da:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    56dc:	f06f 0404 	mvn.w	r4, #4
    56e0:	2300      	movs	r3, #0
    56e2:	4619      	mov	r1, r3
    56e4:	4618      	mov	r0, r3
    56e6:	e7ea      	b.n	56be <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    56e8:	fabc f18c 	clz	r1, ip
    56ec:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    56ee:	2300      	movs	r3, #0
		add_client = true;
    56f0:	2001      	movs	r0, #1
    56f2:	e7e4      	b.n	56be <onoff_request+0x56>
		rv = -EAGAIN;
    56f4:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    56f8:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    56fa:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    56fc:	4618      	mov	r0, r3
    56fe:	e7de      	b.n	56be <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    5700:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5704:	2300      	movs	r3, #0
    5706:	4619      	mov	r1, r3
    5708:	4618      	mov	r0, r3
    570a:	e7d8      	b.n	56be <onoff_request+0x56>
    570c:	606e      	str	r6, [r5, #4]
	list->head = node;
    570e:	602e      	str	r6, [r5, #0]
}
    5710:	e7dc      	b.n	56cc <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    5712:	2102      	movs	r1, #2
    5714:	4628      	mov	r0, r5
    5716:	f7fb f9bb 	bl	a90 <process_event>
    571a:	e7dd      	b.n	56d8 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    571c:	2300      	movs	r3, #0
    571e:	4662      	mov	r2, ip
    5720:	4631      	mov	r1, r6
    5722:	4628      	mov	r0, r5
    5724:	f7ff ff4b 	bl	55be <notify_one>
    5728:	e7d6      	b.n	56d8 <onoff_request+0x70>

0000572a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    572a:	4602      	mov	r2, r0
    572c:	b158      	cbz	r0, 5746 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    572e:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5730:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5734:	2b01      	cmp	r3, #1
    5736:	d003      	beq.n	5740 <sys_notify_validate+0x16>
    5738:	2b03      	cmp	r3, #3
    573a:	d107      	bne.n	574c <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    573c:	6803      	ldr	r3, [r0, #0]
    573e:	b143      	cbz	r3, 5752 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5740:	2000      	movs	r0, #0
    5742:	6090      	str	r0, [r2, #8]
    5744:	4770      	bx	lr
		return -EINVAL;
    5746:	f06f 0015 	mvn.w	r0, #21
    574a:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    574c:	f06f 0015 	mvn.w	r0, #21
    5750:	4770      	bx	lr
			rv = -EINVAL;
    5752:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5756:	4770      	bx	lr

00005758 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5758:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    575a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    575c:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5760:	6081      	str	r1, [r0, #8]
	switch (method) {
    5762:	2a03      	cmp	r2, #3
    5764:	d103      	bne.n	576e <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5766:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5768:	2200      	movs	r2, #0
    576a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    576c:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    576e:	2000      	movs	r0, #0
    5770:	e7fa      	b.n	5768 <sys_notify_finalize+0x10>

00005772 <extract_decimal>:
{
    5772:	4684      	mov	ip, r0
	const char *sp = *str;
    5774:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    5776:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    5778:	e006      	b.n	5788 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    577a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    577e:	3201      	adds	r2, #1
    5780:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    5784:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    5788:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    578a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    578e:	2909      	cmp	r1, #9
    5790:	d9f3      	bls.n	577a <extract_decimal+0x8>
	*str = sp;
    5792:	f8cc 2000 	str.w	r2, [ip]
}
    5796:	4770      	bx	lr

00005798 <extract_width>:
{
    5798:	b530      	push	{r4, r5, lr}
    579a:	b083      	sub	sp, #12
    579c:	4604      	mov	r4, r0
    579e:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    57a0:	7803      	ldrb	r3, [r0, #0]
    57a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    57a6:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    57a8:	460d      	mov	r5, r1
    57aa:	780b      	ldrb	r3, [r1, #0]
    57ac:	2b2a      	cmp	r3, #42	; 0x2a
    57ae:	d018      	beq.n	57e2 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    57b0:	a801      	add	r0, sp, #4
    57b2:	f7ff ffde 	bl	5772 <extract_decimal>
	if (sp != wp) {
    57b6:	9b01      	ldr	r3, [sp, #4]
    57b8:	429d      	cmp	r5, r3
    57ba:	d00f      	beq.n	57dc <extract_width+0x44>
		conv->width_present = true;
    57bc:	7823      	ldrb	r3, [r4, #0]
    57be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    57c2:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    57c4:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    57c6:	b2db      	uxtb	r3, r3
    57c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    57cc:	2800      	cmp	r0, #0
    57ce:	db10      	blt.n	57f2 <extract_width+0x5a>
    57d0:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    57d2:	4313      	orrs	r3, r2
    57d4:	7822      	ldrb	r2, [r4, #0]
    57d6:	f363 0241 	bfi	r2, r3, #1, #1
    57da:	7022      	strb	r2, [r4, #0]
	return sp;
    57dc:	9801      	ldr	r0, [sp, #4]
}
    57de:	b003      	add	sp, #12
    57e0:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    57e2:	7843      	ldrb	r3, [r0, #1]
    57e4:	f043 0301 	orr.w	r3, r3, #1
    57e8:	7043      	strb	r3, [r0, #1]
		return ++sp;
    57ea:	4608      	mov	r0, r1
    57ec:	3001      	adds	r0, #1
    57ee:	9001      	str	r0, [sp, #4]
    57f0:	e7f5      	b.n	57de <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    57f2:	2201      	movs	r2, #1
    57f4:	e7ed      	b.n	57d2 <extract_width+0x3a>

000057f6 <extract_prec>:
{
    57f6:	b510      	push	{r4, lr}
    57f8:	b082      	sub	sp, #8
    57fa:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    57fc:	780b      	ldrb	r3, [r1, #0]
    57fe:	2b2e      	cmp	r3, #46	; 0x2e
    5800:	bf14      	ite	ne
    5802:	2300      	movne	r3, #0
    5804:	2301      	moveq	r3, #1
    5806:	7842      	ldrb	r2, [r0, #1]
    5808:	f363 0241 	bfi	r2, r3, #1, #1
    580c:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    580e:	b1c3      	cbz	r3, 5842 <extract_prec+0x4c>
    5810:	4604      	mov	r4, r0
	++sp;
    5812:	9b01      	ldr	r3, [sp, #4]
    5814:	1c5a      	adds	r2, r3, #1
    5816:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    5818:	785b      	ldrb	r3, [r3, #1]
    581a:	2b2a      	cmp	r3, #42	; 0x2a
    581c:	d013      	beq.n	5846 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    581e:	a801      	add	r0, sp, #4
    5820:	f7ff ffa7 	bl	5772 <extract_decimal>
	conv->prec_value = prec;
    5824:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    5826:	7823      	ldrb	r3, [r4, #0]
    5828:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    582c:	2800      	cmp	r0, #0
    582e:	db12      	blt.n	5856 <extract_prec+0x60>
    5830:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    5832:	4313      	orrs	r3, r2
    5834:	7822      	ldrb	r2, [r4, #0]
    5836:	f363 0241 	bfi	r2, r3, #1, #1
    583a:	7022      	strb	r2, [r4, #0]
	return sp;
    583c:	9801      	ldr	r0, [sp, #4]
}
    583e:	b002      	add	sp, #8
    5840:	bd10      	pop	{r4, pc}
		return sp;
    5842:	4608      	mov	r0, r1
    5844:	e7fb      	b.n	583e <extract_prec+0x48>
		conv->prec_star = true;
    5846:	7843      	ldrb	r3, [r0, #1]
    5848:	f043 0304 	orr.w	r3, r3, #4
    584c:	7043      	strb	r3, [r0, #1]
		return ++sp;
    584e:	4610      	mov	r0, r2
    5850:	3001      	adds	r0, #1
    5852:	9001      	str	r0, [sp, #4]
    5854:	e7f3      	b.n	583e <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    5856:	2201      	movs	r2, #1
    5858:	e7eb      	b.n	5832 <extract_prec+0x3c>

0000585a <extract_length>:
{
    585a:	4602      	mov	r2, r0
	switch (*sp) {
    585c:	780b      	ldrb	r3, [r1, #0]
    585e:	3b4c      	subs	r3, #76	; 0x4c
    5860:	2b2e      	cmp	r3, #46	; 0x2e
    5862:	d85b      	bhi.n	591c <extract_length+0xc2>
    5864:	e8df f003 	tbb	[pc, r3]
    5868:	5a5a5a4f 	.word	0x5a5a5a4f
    586c:	5a5a5a5a 	.word	0x5a5a5a5a
    5870:	5a5a5a5a 	.word	0x5a5a5a5a
    5874:	5a5a5a5a 	.word	0x5a5a5a5a
    5878:	5a5a5a5a 	.word	0x5a5a5a5a
    587c:	5a5a5a5a 	.word	0x5a5a5a5a
    5880:	5a5a5a5a 	.word	0x5a5a5a5a
    5884:	5a3a5a18 	.word	0x5a3a5a18
    5888:	5a5a5a29 	.word	0x5a5a5a29
    588c:	5a5a5a5a 	.word	0x5a5a5a5a
    5890:	5a5a5a48 	.word	0x5a5a5a48
    5894:	5a5a      	.short	0x5a5a
    5896:	41          	.byte	0x41
    5897:	00          	.byte	0x00
		if (*++sp == 'h') {
    5898:	1c48      	adds	r0, r1, #1
    589a:	784b      	ldrb	r3, [r1, #1]
    589c:	2b68      	cmp	r3, #104	; 0x68
    589e:	d005      	beq.n	58ac <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    58a0:	7853      	ldrb	r3, [r2, #1]
    58a2:	2102      	movs	r1, #2
    58a4:	f361 03c6 	bfi	r3, r1, #3, #4
    58a8:	7053      	strb	r3, [r2, #1]
    58aa:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    58ac:	7853      	ldrb	r3, [r2, #1]
    58ae:	2001      	movs	r0, #1
    58b0:	f360 03c6 	bfi	r3, r0, #3, #4
    58b4:	7053      	strb	r3, [r2, #1]
			++sp;
    58b6:	1c88      	adds	r0, r1, #2
    58b8:	4770      	bx	lr
		if (*++sp == 'l') {
    58ba:	1c48      	adds	r0, r1, #1
    58bc:	784b      	ldrb	r3, [r1, #1]
    58be:	2b6c      	cmp	r3, #108	; 0x6c
    58c0:	d005      	beq.n	58ce <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    58c2:	7853      	ldrb	r3, [r2, #1]
    58c4:	2103      	movs	r1, #3
    58c6:	f361 03c6 	bfi	r3, r1, #3, #4
    58ca:	7053      	strb	r3, [r2, #1]
    58cc:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    58ce:	7853      	ldrb	r3, [r2, #1]
    58d0:	2004      	movs	r0, #4
    58d2:	f360 03c6 	bfi	r3, r0, #3, #4
    58d6:	7053      	strb	r3, [r2, #1]
			++sp;
    58d8:	1c88      	adds	r0, r1, #2
    58da:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    58dc:	7853      	ldrb	r3, [r2, #1]
    58de:	2005      	movs	r0, #5
    58e0:	f360 03c6 	bfi	r3, r0, #3, #4
    58e4:	7053      	strb	r3, [r2, #1]
		++sp;
    58e6:	1c48      	adds	r0, r1, #1
		break;
    58e8:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    58ea:	7853      	ldrb	r3, [r2, #1]
    58ec:	2006      	movs	r0, #6
    58ee:	f360 03c6 	bfi	r3, r0, #3, #4
    58f2:	7053      	strb	r3, [r2, #1]
		++sp;
    58f4:	1c48      	adds	r0, r1, #1
		break;
    58f6:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    58f8:	7853      	ldrb	r3, [r2, #1]
    58fa:	2007      	movs	r0, #7
    58fc:	f360 03c6 	bfi	r3, r0, #3, #4
    5900:	7053      	strb	r3, [r2, #1]
		++sp;
    5902:	1c48      	adds	r0, r1, #1
		break;
    5904:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    5906:	7853      	ldrb	r3, [r2, #1]
    5908:	2008      	movs	r0, #8
    590a:	f360 03c6 	bfi	r3, r0, #3, #4
    590e:	7053      	strb	r3, [r2, #1]
		++sp;
    5910:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    5912:	7813      	ldrb	r3, [r2, #0]
    5914:	f043 0302 	orr.w	r3, r3, #2
    5918:	7013      	strb	r3, [r2, #0]
		break;
    591a:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    591c:	7853      	ldrb	r3, [r2, #1]
    591e:	f36f 03c6 	bfc	r3, #3, #4
    5922:	7053      	strb	r3, [r2, #1]
		break;
    5924:	4608      	mov	r0, r1
}
    5926:	4770      	bx	lr

00005928 <extract_specifier>:
{
    5928:	b500      	push	{lr}
    592a:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    592c:	4608      	mov	r0, r1
    592e:	f810 3b01 	ldrb.w	r3, [r0], #1
    5932:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    5934:	2b78      	cmp	r3, #120	; 0x78
    5936:	d817      	bhi.n	5968 <extract_specifier+0x40>
    5938:	2b6e      	cmp	r3, #110	; 0x6e
    593a:	d229      	bcs.n	5990 <extract_specifier+0x68>
    593c:	2b69      	cmp	r3, #105	; 0x69
    593e:	d813      	bhi.n	5968 <extract_specifier+0x40>
    5940:	2b58      	cmp	r3, #88	; 0x58
    5942:	d317      	bcc.n	5974 <extract_specifier+0x4c>
    5944:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    5948:	fa5f fc8c 	uxtb.w	ip, ip
    594c:	2101      	movs	r1, #1
    594e:	fa01 f10c 	lsl.w	r1, r1, ip
    5952:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    5956:	d114      	bne.n	5982 <extract_specifier+0x5a>
    5958:	f640 0c01 	movw	ip, #2049	; 0x801
    595c:	ea11 0f0c 	tst.w	r1, ip
    5960:	d155      	bne.n	5a0e <extract_specifier+0xe6>
    5962:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    5966:	d13a      	bne.n	59de <extract_specifier+0xb6>
		conv->invalid = true;
    5968:	7813      	ldrb	r3, [r2, #0]
    596a:	f043 0301 	orr.w	r3, r3, #1
    596e:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    5970:	2100      	movs	r1, #0
		break;
    5972:	e042      	b.n	59fa <extract_specifier+0xd2>
	switch (conv->specifier) {
    5974:	2b41      	cmp	r3, #65	; 0x41
    5976:	d004      	beq.n	5982 <extract_specifier+0x5a>
    5978:	d3f6      	bcc.n	5968 <extract_specifier+0x40>
    597a:	3b45      	subs	r3, #69	; 0x45
    597c:	b2db      	uxtb	r3, r3
    597e:	2b02      	cmp	r3, #2
    5980:	d8f2      	bhi.n	5968 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    5982:	7893      	ldrb	r3, [r2, #2]
    5984:	2104      	movs	r1, #4
    5986:	f361 0302 	bfi	r3, r1, #0, #3
    598a:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    598c:	2101      	movs	r1, #1
			break;
    598e:	e034      	b.n	59fa <extract_specifier+0xd2>
	switch (conv->specifier) {
    5990:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    5994:	b2c9      	uxtb	r1, r1
    5996:	f04f 0c01 	mov.w	ip, #1
    599a:	fa0c fc01 	lsl.w	ip, ip, r1
    599e:	f240 4182 	movw	r1, #1154	; 0x482
    59a2:	ea1c 0f01 	tst.w	ip, r1
    59a6:	bf14      	ite	ne
    59a8:	f04f 0e01 	movne.w	lr, #1
    59ac:	f04f 0e00 	moveq.w	lr, #0
    59b0:	d12d      	bne.n	5a0e <extract_specifier+0xe6>
    59b2:	f01c 0f24 	tst.w	ip, #36	; 0x24
    59b6:	bf14      	ite	ne
    59b8:	2101      	movne	r1, #1
    59ba:	2100      	moveq	r1, #0
    59bc:	d139      	bne.n	5a32 <extract_specifier+0x10a>
    59be:	f01c 0c01 	ands.w	ip, ip, #1
    59c2:	d0d1      	beq.n	5968 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    59c4:	7893      	ldrb	r3, [r2, #2]
    59c6:	f04f 0e03 	mov.w	lr, #3
    59ca:	f36e 0302 	bfi	r3, lr, #0, #3
    59ce:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    59d0:	7853      	ldrb	r3, [r2, #1]
    59d2:	f003 0378 	and.w	r3, r3, #120	; 0x78
    59d6:	2b40      	cmp	r3, #64	; 0x40
    59d8:	d10f      	bne.n	59fa <extract_specifier+0xd2>
			unsupported = true;
    59da:	4661      	mov	r1, ip
    59dc:	e00d      	b.n	59fa <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    59de:	7891      	ldrb	r1, [r2, #2]
    59e0:	f04f 0c01 	mov.w	ip, #1
    59e4:	f36c 0102 	bfi	r1, ip, #0, #3
    59e8:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    59ea:	7851      	ldrb	r1, [r2, #1]
    59ec:	f001 0178 	and.w	r1, r1, #120	; 0x78
    59f0:	2940      	cmp	r1, #64	; 0x40
    59f2:	d013      	beq.n	5a1c <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    59f4:	2b63      	cmp	r3, #99	; 0x63
    59f6:	d018      	beq.n	5a2a <extract_specifier+0x102>
	bool unsupported = false;
    59f8:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    59fa:	7813      	ldrb	r3, [r2, #0]
    59fc:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    5a00:	ea41 010c 	orr.w	r1, r1, ip
    5a04:	f361 0341 	bfi	r3, r1, #1, #1
    5a08:	7013      	strb	r3, [r2, #0]
}
    5a0a:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    5a0e:	7891      	ldrb	r1, [r2, #2]
    5a10:	f04f 0c02 	mov.w	ip, #2
    5a14:	f36c 0102 	bfi	r1, ip, #0, #3
    5a18:	7091      	strb	r1, [r2, #2]
    5a1a:	e7e6      	b.n	59ea <extract_specifier+0xc2>
			conv->invalid = true;
    5a1c:	f892 c000 	ldrb.w	ip, [r2]
    5a20:	f04c 0c01 	orr.w	ip, ip, #1
    5a24:	f882 c000 	strb.w	ip, [r2]
    5a28:	e7e4      	b.n	59f4 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    5a2a:	3900      	subs	r1, #0
    5a2c:	bf18      	it	ne
    5a2e:	2101      	movne	r1, #1
    5a30:	e7e3      	b.n	59fa <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    5a32:	7893      	ldrb	r3, [r2, #2]
    5a34:	f04f 0c03 	mov.w	ip, #3
    5a38:	f36c 0302 	bfi	r3, ip, #0, #3
    5a3c:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    5a3e:	7853      	ldrb	r3, [r2, #1]
    5a40:	f013 0f78 	tst.w	r3, #120	; 0x78
    5a44:	d1d9      	bne.n	59fa <extract_specifier+0xd2>
	bool unsupported = false;
    5a46:	4671      	mov	r1, lr
    5a48:	e7d7      	b.n	59fa <extract_specifier+0xd2>

00005a4a <extract_conversion>:
{
    5a4a:	b510      	push	{r4, lr}
    5a4c:	4604      	mov	r4, r0
    5a4e:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    5a50:	2300      	movs	r3, #0
    5a52:	6023      	str	r3, [r4, #0]
    5a54:	6063      	str	r3, [r4, #4]
    5a56:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    5a58:	784b      	ldrb	r3, [r1, #1]
    5a5a:	2b25      	cmp	r3, #37	; 0x25
    5a5c:	d014      	beq.n	5a88 <extract_conversion+0x3e>
    5a5e:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    5a60:	4620      	mov	r0, r4
    5a62:	f7fb f8cb 	bl	bfc <extract_flags>
    5a66:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    5a68:	4620      	mov	r0, r4
    5a6a:	f7ff fe95 	bl	5798 <extract_width>
    5a6e:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    5a70:	4620      	mov	r0, r4
    5a72:	f7ff fec0 	bl	57f6 <extract_prec>
    5a76:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    5a78:	4620      	mov	r0, r4
    5a7a:	f7ff feee 	bl	585a <extract_length>
    5a7e:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    5a80:	4620      	mov	r0, r4
    5a82:	f7ff ff51 	bl	5928 <extract_specifier>
}
    5a86:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    5a88:	3002      	adds	r0, #2
    5a8a:	70e3      	strb	r3, [r4, #3]
		return sp;
    5a8c:	e7fb      	b.n	5a86 <extract_conversion+0x3c>

00005a8e <conversion_radix>:
	switch (specifier) {
    5a8e:	286f      	cmp	r0, #111	; 0x6f
    5a90:	d00c      	beq.n	5aac <conversion_radix+0x1e>
    5a92:	d905      	bls.n	5aa0 <conversion_radix+0x12>
    5a94:	2870      	cmp	r0, #112	; 0x70
    5a96:	d00b      	beq.n	5ab0 <conversion_radix+0x22>
    5a98:	2878      	cmp	r0, #120	; 0x78
    5a9a:	d10b      	bne.n	5ab4 <conversion_radix+0x26>
		return 16;
    5a9c:	2010      	movs	r0, #16
    5a9e:	4770      	bx	lr
	switch (specifier) {
    5aa0:	2858      	cmp	r0, #88	; 0x58
    5aa2:	d001      	beq.n	5aa8 <conversion_radix+0x1a>
    5aa4:	200a      	movs	r0, #10
    5aa6:	4770      	bx	lr
		return 16;
    5aa8:	2010      	movs	r0, #16
    5aaa:	4770      	bx	lr
		return 8;
    5aac:	2008      	movs	r0, #8
    5aae:	4770      	bx	lr
		return 16;
    5ab0:	2010      	movs	r0, #16
    5ab2:	4770      	bx	lr
	switch (specifier) {
    5ab4:	200a      	movs	r0, #10
}
    5ab6:	4770      	bx	lr

00005ab8 <encode_uint>:
{
    5ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5abc:	4605      	mov	r5, r0
    5abe:	460c      	mov	r4, r1
    5ac0:	4693      	mov	fp, r2
    5ac2:	4699      	mov	r9, r3
    5ac4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
    5ac6:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5ac8:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    5acc:	f7ff ffdf 	bl	5a8e <conversion_radix>
    5ad0:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    5ad2:	e015      	b.n	5b00 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5ad4:	f1ba 0f19 	cmp.w	sl, #25
    5ad8:	d820      	bhi.n	5b1c <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5ada:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5adc:	3237      	adds	r2, #55	; 0x37
    5ade:	b2d2      	uxtb	r2, r2
    5ae0:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    5ae4:	4632      	mov	r2, r6
    5ae6:	4643      	mov	r3, r8
    5ae8:	4628      	mov	r0, r5
    5aea:	4621      	mov	r1, r4
    5aec:	f7fa fb08 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    5af0:	42b5      	cmp	r5, r6
    5af2:	f174 0400 	sbcs.w	r4, r4, #0
    5af6:	d315      	bcc.n	5b24 <encode_uint+0x6c>
    5af8:	454f      	cmp	r7, r9
    5afa:	d913      	bls.n	5b24 <encode_uint+0x6c>
		value /= radix;
    5afc:	4605      	mov	r5, r0
    5afe:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    5b00:	f04f 0800 	mov.w	r8, #0
    5b04:	4632      	mov	r2, r6
    5b06:	4643      	mov	r3, r8
    5b08:	4628      	mov	r0, r5
    5b0a:	4621      	mov	r1, r4
    5b0c:	f7fa faf8 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5b10:	2a09      	cmp	r2, #9
    5b12:	d8df      	bhi.n	5ad4 <encode_uint+0x1c>
    5b14:	b2d2      	uxtb	r2, r2
    5b16:	3230      	adds	r2, #48	; 0x30
    5b18:	b2d2      	uxtb	r2, r2
    5b1a:	e7e1      	b.n	5ae0 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5b1c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5b1e:	3257      	adds	r2, #87	; 0x57
    5b20:	b2d2      	uxtb	r2, r2
    5b22:	e7dd      	b.n	5ae0 <encode_uint+0x28>
	if (conv->flag_hash) {
    5b24:	f89b 3000 	ldrb.w	r3, [fp]
    5b28:	f013 0f20 	tst.w	r3, #32
    5b2c:	d003      	beq.n	5b36 <encode_uint+0x7e>
		if (radix == 8) {
    5b2e:	2e08      	cmp	r6, #8
    5b30:	d004      	beq.n	5b3c <encode_uint+0x84>
		} else if (radix == 16) {
    5b32:	2e10      	cmp	r6, #16
    5b34:	d009      	beq.n	5b4a <encode_uint+0x92>
}
    5b36:	4638      	mov	r0, r7
    5b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    5b3c:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5b40:	f043 0308 	orr.w	r3, r3, #8
    5b44:	f88b 3002 	strb.w	r3, [fp, #2]
    5b48:	e7f5      	b.n	5b36 <encode_uint+0x7e>
			conv->altform_0c = true;
    5b4a:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5b4e:	f043 0310 	orr.w	r3, r3, #16
    5b52:	f88b 3002 	strb.w	r3, [fp, #2]
    5b56:	e7ee      	b.n	5b36 <encode_uint+0x7e>

00005b58 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    5b58:	7843      	ldrb	r3, [r0, #1]
    5b5a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    5b5e:	2b07      	cmp	r3, #7
    5b60:	d818      	bhi.n	5b94 <store_count+0x3c>
    5b62:	e8df f003 	tbb	[pc, r3]
    5b66:	0604      	.short	0x0604
    5b68:	100c0a08 	.word	0x100c0a08
    5b6c:	1614      	.short	0x1614
		*(int *)dp = count;
    5b6e:	600a      	str	r2, [r1, #0]
		break;
    5b70:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    5b72:	700a      	strb	r2, [r1, #0]
		break;
    5b74:	4770      	bx	lr
		*(short *)dp = (short)count;
    5b76:	800a      	strh	r2, [r1, #0]
		break;
    5b78:	4770      	bx	lr
		*(long *)dp = (long)count;
    5b7a:	600a      	str	r2, [r1, #0]
		break;
    5b7c:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    5b7e:	17d3      	asrs	r3, r2, #31
    5b80:	600a      	str	r2, [r1, #0]
    5b82:	604b      	str	r3, [r1, #4]
		break;
    5b84:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    5b86:	17d3      	asrs	r3, r2, #31
    5b88:	600a      	str	r2, [r1, #0]
    5b8a:	604b      	str	r3, [r1, #4]
		break;
    5b8c:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    5b8e:	600a      	str	r2, [r1, #0]
		break;
    5b90:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5b92:	600a      	str	r2, [r1, #0]
}
    5b94:	4770      	bx	lr

00005b96 <outs>:
{
    5b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b9a:	4607      	mov	r7, r0
    5b9c:	460e      	mov	r6, r1
    5b9e:	4614      	mov	r4, r2
    5ba0:	4698      	mov	r8, r3
	size_t count = 0;
    5ba2:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5ba4:	e006      	b.n	5bb4 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    5ba6:	4631      	mov	r1, r6
    5ba8:	f814 0b01 	ldrb.w	r0, [r4], #1
    5bac:	47b8      	blx	r7
		if (rc < 0) {
    5bae:	2800      	cmp	r0, #0
    5bb0:	db09      	blt.n	5bc6 <outs+0x30>
		++count;
    5bb2:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5bb4:	4544      	cmp	r4, r8
    5bb6:	d3f6      	bcc.n	5ba6 <outs+0x10>
    5bb8:	f1b8 0f00 	cmp.w	r8, #0
    5bbc:	d102      	bne.n	5bc4 <outs+0x2e>
    5bbe:	7823      	ldrb	r3, [r4, #0]
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	d1f0      	bne.n	5ba6 <outs+0x10>
	return (int)count;
    5bc4:	4628      	mov	r0, r5
}
    5bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005bca <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5bca:	4770      	bx	lr

00005bcc <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    5bcc:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    5bce:	f001 021f 	and.w	r2, r1, #31
    5bd2:	2301      	movs	r3, #1
    5bd4:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5bd6:	0949      	lsrs	r1, r1, #5
    5bd8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5bdc:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5bde:	f3bf 8f5b 	dmb	ish
    5be2:	e850 2f00 	ldrex	r2, [r0]
    5be6:	ea02 0c01 	and.w	ip, r2, r1
    5bea:	e840 ce00 	strex	lr, ip, [r0]
    5bee:	f1be 0f00 	cmp.w	lr, #0
    5bf2:	d1f6      	bne.n	5be2 <atomic_test_and_clear_bit+0x16>
    5bf4:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    5bf8:	4213      	tst	r3, r2
}
    5bfa:	bf14      	ite	ne
    5bfc:	2001      	movne	r0, #1
    5bfe:	2000      	moveq	r0, #0
    5c00:	f85d fb04 	ldr.w	pc, [sp], #4

00005c04 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5c04:	f001 021f 	and.w	r2, r1, #31
    5c08:	2301      	movs	r3, #1
    5c0a:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5c0c:	0949      	lsrs	r1, r1, #5
    5c0e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5c12:	f3bf 8f5b 	dmb	ish
    5c16:	e850 2f00 	ldrex	r2, [r0]
    5c1a:	431a      	orrs	r2, r3
    5c1c:	e840 2100 	strex	r1, r2, [r0]
    5c20:	2900      	cmp	r1, #0
    5c22:	d1f8      	bne.n	5c16 <atomic_set_bit+0x12>
    5c24:	f3bf 8f5b 	dmb	ish
}
    5c28:	4770      	bx	lr

00005c2a <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    5c2a:	2000      	movs	r0, #0
    5c2c:	4770      	bx	lr

00005c2e <abort_function>:
{
    5c2e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5c30:	2000      	movs	r0, #0
    5c32:	f7fb fb11 	bl	1258 <sys_reboot>

00005c36 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5c36:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5c38:	f001 f8d3 	bl	6de2 <z_fatal_error>
}
    5c3c:	bd08      	pop	{r3, pc}

00005c3e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    5c3e:	b508      	push	{r3, lr}
    5c40:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5c42:	6800      	ldr	r0, [r0, #0]
    5c44:	f7ff fff7 	bl	5c36 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    5c48:	bd08      	pop	{r3, pc}

00005c4a <arch_irq_enable>:
{
    5c4a:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    5c4c:	b240      	sxtb	r0, r0
    5c4e:	f7fb fd85 	bl	175c <__NVIC_EnableIRQ>
}
    5c52:	bd08      	pop	{r3, pc}

00005c54 <arch_irq_disable>:
{
    5c54:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
    5c56:	b240      	sxtb	r0, r0
    5c58:	f7fb fd8e 	bl	1778 <__NVIC_DisableIRQ>
}
    5c5c:	bd08      	pop	{r3, pc}

00005c5e <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5c5e:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5c60:	3101      	adds	r1, #1
    5c62:	b240      	sxtb	r0, r0
    5c64:	f7fb fd9a 	bl	179c <__NVIC_SetPriority>
}
    5c68:	bd08      	pop	{r3, pc}

00005c6a <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    5c6a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5c6c:	2100      	movs	r1, #0
    5c6e:	2001      	movs	r0, #1
    5c70:	f7ff ffe1 	bl	5c36 <z_arm_fatal_error>
}
    5c74:	bd08      	pop	{r3, pc}

00005c76 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5c76:	b508      	push	{r3, lr}
	handler();
    5c78:	f7fb fdb2 	bl	17e0 <z_SysNmiOnReset>
	z_arm_int_exit();
    5c7c:	f7fb fea4 	bl	19c8 <z_arm_exc_exit>
}
    5c80:	bd08      	pop	{r3, pc}

00005c82 <memory_fault_recoverable>:
}
    5c82:	2000      	movs	r0, #0
    5c84:	4770      	bx	lr

00005c86 <debug_monitor>:
	*recoverable = false;
    5c86:	2300      	movs	r3, #0
    5c88:	700b      	strb	r3, [r1, #0]
}
    5c8a:	4770      	bx	lr

00005c8c <fault_handle>:
{
    5c8c:	b508      	push	{r3, lr}
	*recoverable = false;
    5c8e:	2300      	movs	r3, #0
    5c90:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    5c92:	1ecb      	subs	r3, r1, #3
    5c94:	2b09      	cmp	r3, #9
    5c96:	d81a      	bhi.n	5cce <fault_handle+0x42>
    5c98:	e8df f003 	tbb	[pc, r3]
    5c9c:	110d0905 	.word	0x110d0905
    5ca0:	19191919 	.word	0x19191919
    5ca4:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    5ca6:	4611      	mov	r1, r2
    5ca8:	f7fb ff9c 	bl	1be4 <hard_fault>
		break;
    5cac:	e010      	b.n	5cd0 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    5cae:	2100      	movs	r1, #0
    5cb0:	f7fb ff2e 	bl	1b10 <mem_manage_fault>
		break;
    5cb4:	e00c      	b.n	5cd0 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    5cb6:	2100      	movs	r1, #0
    5cb8:	f7fb fe94 	bl	19e4 <bus_fault>
		break;
    5cbc:	e008      	b.n	5cd0 <fault_handle+0x44>
		reason = usage_fault(esf);
    5cbe:	f7fb fed7 	bl	1a70 <usage_fault>
		break;
    5cc2:	e005      	b.n	5cd0 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    5cc4:	4611      	mov	r1, r2
    5cc6:	f7ff ffde 	bl	5c86 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5cca:	2000      	movs	r0, #0
		break;
    5ccc:	e000      	b.n	5cd0 <fault_handle+0x44>
	switch (fault) {
    5cce:	2000      	movs	r0, #0
}
    5cd0:	bd08      	pop	{r3, pc}

00005cd2 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    5cd2:	6843      	ldr	r3, [r0, #4]
    5cd4:	1e5a      	subs	r2, r3, #1
		&&
    5cd6:	4213      	tst	r3, r2
    5cd8:	d106      	bne.n	5ce8 <mpu_partition_is_valid+0x16>
		&&
    5cda:	2b1f      	cmp	r3, #31
    5cdc:	d906      	bls.n	5cec <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    5cde:	6803      	ldr	r3, [r0, #0]
		&&
    5ce0:	421a      	tst	r2, r3
    5ce2:	d005      	beq.n	5cf0 <mpu_partition_is_valid+0x1e>
    5ce4:	2000      	movs	r0, #0
    5ce6:	4770      	bx	lr
    5ce8:	2000      	movs	r0, #0
    5cea:	4770      	bx	lr
    5cec:	2000      	movs	r0, #0
    5cee:	4770      	bx	lr
    5cf0:	2001      	movs	r0, #1
}
    5cf2:	4770      	bx	lr

00005cf4 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    5cf4:	2807      	cmp	r0, #7
    5cf6:	d805      	bhi.n	5d04 <region_allocate_and_init+0x10>
{
    5cf8:	b510      	push	{r4, lr}
    5cfa:	4604      	mov	r4, r0
	region_init(index, region_conf);
    5cfc:	f7fc f8cc 	bl	1e98 <region_init>
	return index;
    5d00:	4620      	mov	r0, r4
}
    5d02:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5d04:	f06f 0015 	mvn.w	r0, #21
}
    5d08:	4770      	bx	lr

00005d0a <mpu_configure_region>:
{
    5d0a:	b500      	push	{lr}
    5d0c:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    5d0e:	680b      	ldr	r3, [r1, #0]
    5d10:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
    5d12:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5d14:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    5d16:	2b20      	cmp	r3, #32
    5d18:	d912      	bls.n	5d40 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    5d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5d1e:	d811      	bhi.n	5d44 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    5d20:	3b01      	subs	r3, #1
    5d22:	fab3 f383 	clz	r3, r3
    5d26:	f1c3 031f 	rsb	r3, r3, #31
    5d2a:	005b      	lsls	r3, r3, #1
    5d2c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5d30:	4313      	orrs	r3, r2
    5d32:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    5d34:	a901      	add	r1, sp, #4
    5d36:	f7ff ffdd 	bl	5cf4 <region_allocate_and_init>
}
    5d3a:	b005      	add	sp, #20
    5d3c:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    5d40:	2308      	movs	r3, #8
    5d42:	e7f5      	b.n	5d30 <mpu_configure_region+0x26>
		return REGION_4G;
    5d44:	233e      	movs	r3, #62	; 0x3e
    5d46:	e7f3      	b.n	5d30 <mpu_configure_region+0x26>

00005d48 <mpu_configure_regions>:
{
    5d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5d4c:	4680      	mov	r8, r0
    5d4e:	460f      	mov	r7, r1
    5d50:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    5d52:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    5d54:	2500      	movs	r5, #0
    5d56:	e009      	b.n	5d6c <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    5d58:	4621      	mov	r1, r4
    5d5a:	b2f0      	uxtb	r0, r6
    5d5c:	f7ff ffd5 	bl	5d0a <mpu_configure_region>
    5d60:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    5d62:	f110 0f16 	cmn.w	r0, #22
    5d66:	d014      	beq.n	5d92 <mpu_configure_regions+0x4a>
		reg_index++;
    5d68:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    5d6a:	3501      	adds	r5, #1
    5d6c:	42bd      	cmp	r5, r7
    5d6e:	da10      	bge.n	5d92 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    5d70:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    5d74:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    5d78:	6862      	ldr	r2, [r4, #4]
    5d7a:	2a00      	cmp	r2, #0
    5d7c:	d0f5      	beq.n	5d6a <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    5d7e:	f1b9 0f00 	cmp.w	r9, #0
    5d82:	d0e9      	beq.n	5d58 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    5d84:	4620      	mov	r0, r4
    5d86:	f7ff ffa4 	bl	5cd2 <mpu_partition_is_valid>
		if (do_sanity_check &&
    5d8a:	2800      	cmp	r0, #0
    5d8c:	d1e4      	bne.n	5d58 <mpu_configure_regions+0x10>
			return -EINVAL;
    5d8e:	f06f 0615 	mvn.w	r6, #21
}
    5d92:	4630      	mov	r0, r6
    5d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005d98 <arm_core_mpu_configure_static_mpu_regions>:
{
    5d98:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    5d9a:	f7fc f891 	bl	1ec0 <mpu_configure_static_mpu_regions>
}
    5d9e:	bd08      	pop	{r3, pc}

00005da0 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    5da0:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    5da2:	f7fc f897 	bl	1ed4 <mpu_configure_dynamic_mpu_regions>
}
    5da6:	bd08      	pop	{r3, pc}

00005da8 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
    5da8:	b410      	push	{r4}
    5daa:	4602      	mov	r2, r0
	int n = 0;
	int neg = 0;

	while (isspace((unsigned char)*s) != 0) {
    5dac:	e000      	b.n	5db0 <atoi+0x8>
		s++;
    5dae:	3201      	adds	r2, #1
	while (isspace((unsigned char)*s) != 0) {
    5db0:	7813      	ldrb	r3, [r2, #0]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    5db2:	2b20      	cmp	r3, #32
    5db4:	d0fb      	beq.n	5dae <atoi+0x6>
    5db6:	f1a3 0109 	sub.w	r1, r3, #9
    5dba:	2904      	cmp	r1, #4
    5dbc:	d9f7      	bls.n	5dae <atoi+0x6>
	}
	switch (*s) {
    5dbe:	2b2b      	cmp	r3, #43	; 0x2b
    5dc0:	d004      	beq.n	5dcc <atoi+0x24>
    5dc2:	2b2d      	cmp	r3, #45	; 0x2d
    5dc4:	d114      	bne.n	5df0 <atoi+0x48>
	case '-':
		neg = 1;
		s++;
    5dc6:	3201      	adds	r2, #1
		neg = 1;
    5dc8:	2401      	movs	r4, #1
		break;	/* artifact to quiet coverity warning */
    5dca:	e012      	b.n	5df2 <atoi+0x4a>
	case '+':
		s++;
    5dcc:	3201      	adds	r2, #1
	int neg = 0;
    5dce:	2400      	movs	r4, #0
    5dd0:	e00f      	b.n	5df2 <atoi+0x4a>
		 */
		break;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit((unsigned char)*s) != 0) {
		n = 10*n - (*s++ - '0');
    5dd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5dd6:	3201      	adds	r2, #1
    5dd8:	3b30      	subs	r3, #48	; 0x30
    5dda:	ebc3 0040 	rsb	r0, r3, r0, lsl #1
	while (isdigit((unsigned char)*s) != 0) {
    5dde:	7813      	ldrb	r3, [r2, #0]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5de0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5de4:	2909      	cmp	r1, #9
    5de6:	d9f4      	bls.n	5dd2 <atoi+0x2a>
	}
	return neg ? n : -n;
    5de8:	b904      	cbnz	r4, 5dec <atoi+0x44>
    5dea:	4240      	negs	r0, r0
}
    5dec:	bc10      	pop	{r4}
    5dee:	4770      	bx	lr
	switch (*s) {
    5df0:	2400      	movs	r4, #0
		neg = 1;
    5df2:	2000      	movs	r0, #0
    5df4:	e7f3      	b.n	5dde <atoi+0x36>

00005df6 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    5df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dfa:	4605      	mov	r5, r0
	char c, sc;
	size_t len;

	c = *find++;
    5dfc:	460f      	mov	r7, r1
    5dfe:	f817 6b01 	ldrb.w	r6, [r7], #1
	if (c != 0) {
    5e02:	b916      	cbnz	r6, 5e0a <strstr+0x14>
			} while (sc != c);
		} while (strncmp(s, find, len) != 0);
		s--;
	}
	return (char *)s;
}
    5e04:	4628      	mov	r0, r5
    5e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = strlen(find);
    5e0a:	4638      	mov	r0, r7
    5e0c:	f000 f844 	bl	5e98 <strlen>
    5e10:	4680      	mov	r8, r0
    5e12:	e000      	b.n	5e16 <strstr+0x20>
{
    5e14:	4625      	mov	r5, r4
				sc = *s++;
    5e16:	462c      	mov	r4, r5
    5e18:	f814 3b01 	ldrb.w	r3, [r4], #1
				if (sc == 0) {
    5e1c:	b14b      	cbz	r3, 5e32 <strstr+0x3c>
			} while (sc != c);
    5e1e:	429e      	cmp	r6, r3
    5e20:	d1f8      	bne.n	5e14 <strstr+0x1e>
		} while (strncmp(s, find, len) != 0);
    5e22:	4642      	mov	r2, r8
    5e24:	4639      	mov	r1, r7
    5e26:	4620      	mov	r0, r4
    5e28:	f000 f854 	bl	5ed4 <strncmp>
    5e2c:	2800      	cmp	r0, #0
    5e2e:	d1f1      	bne.n	5e14 <strstr+0x1e>
    5e30:	e7e8      	b.n	5e04 <strstr+0xe>
					return NULL;
    5e32:	2500      	movs	r5, #0
    5e34:	e7e6      	b.n	5e04 <strstr+0xe>

00005e36 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5e36:	4602      	mov	r2, r0
    5e38:	e002      	b.n	5e40 <strcpy+0xa>
		*d = *s;
    5e3a:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    5e3e:	3101      	adds	r1, #1
	while (*s != '\0') {
    5e40:	780b      	ldrb	r3, [r1, #0]
    5e42:	2b00      	cmp	r3, #0
    5e44:	d1f9      	bne.n	5e3a <strcpy+0x4>
	}

	*d = '\0';
    5e46:	7013      	strb	r3, [r2, #0]

	return dest;
}
    5e48:	4770      	bx	lr

00005e4a <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    5e4a:	4603      	mov	r3, r0
    5e4c:	b1a2      	cbz	r2, 5e78 <strncpy+0x2e>
{
    5e4e:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    5e50:	780c      	ldrb	r4, [r1, #0]
    5e52:	b12c      	cbz	r4, 5e60 <strncpy+0x16>
		*d = *s;
    5e54:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    5e58:	3101      	adds	r1, #1
		d++;
		n--;
    5e5a:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    5e5c:	2a00      	cmp	r2, #0
    5e5e:	d1f7      	bne.n	5e50 <strncpy+0x6>
	}

	while (n > 0) {
    5e60:	b122      	cbz	r2, 5e6c <strncpy+0x22>
		*d = '\0';
    5e62:	2100      	movs	r1, #0
    5e64:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    5e68:	3a01      	subs	r2, #1
    5e6a:	e7f9      	b.n	5e60 <strncpy+0x16>
	}

	return dest;
}
    5e6c:	bc10      	pop	{r4}
    5e6e:	4770      	bx	lr
		*d = '\0';
    5e70:	2100      	movs	r1, #0
    5e72:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5e76:	3a01      	subs	r2, #1
	while (n > 0) {
    5e78:	2a00      	cmp	r2, #0
    5e7a:	d1f9      	bne.n	5e70 <strncpy+0x26>
    5e7c:	4770      	bx	lr

00005e7e <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    5e7e:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    5e80:	e000      	b.n	5e84 <strchr+0x6>
		s++;
    5e82:	3001      	adds	r0, #1
	while ((*s != tmp) && (*s != '\0')) {
    5e84:	7803      	ldrb	r3, [r0, #0]
    5e86:	428b      	cmp	r3, r1
    5e88:	d001      	beq.n	5e8e <strchr+0x10>
    5e8a:	2b00      	cmp	r3, #0
    5e8c:	d1f9      	bne.n	5e82 <strchr+0x4>
	}

	return (*s == tmp) ? (char *) s : NULL;
    5e8e:	428b      	cmp	r3, r1
    5e90:	d100      	bne.n	5e94 <strchr+0x16>
}
    5e92:	4770      	bx	lr
	return (*s == tmp) ? (char *) s : NULL;
    5e94:	2000      	movs	r0, #0
    5e96:	e7fc      	b.n	5e92 <strchr+0x14>

00005e98 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5e98:	4603      	mov	r3, r0
	size_t n = 0;
    5e9a:	2000      	movs	r0, #0

	while (*s != '\0') {
    5e9c:	e001      	b.n	5ea2 <strlen+0xa>
		s++;
    5e9e:	3301      	adds	r3, #1
		n++;
    5ea0:	3001      	adds	r0, #1
	while (*s != '\0') {
    5ea2:	781a      	ldrb	r2, [r3, #0]
    5ea4:	2a00      	cmp	r2, #0
    5ea6:	d1fa      	bne.n	5e9e <strlen+0x6>
	}

	return n;
}
    5ea8:	4770      	bx	lr

00005eaa <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5eaa:	4603      	mov	r3, r0
	size_t n = 0;
    5eac:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5eae:	e001      	b.n	5eb4 <strnlen+0xa>
		s++;
    5eb0:	3301      	adds	r3, #1
		n++;
    5eb2:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    5eb4:	781a      	ldrb	r2, [r3, #0]
    5eb6:	b10a      	cbz	r2, 5ebc <strnlen+0x12>
    5eb8:	4288      	cmp	r0, r1
    5eba:	d3f9      	bcc.n	5eb0 <strnlen+0x6>
	}

	return n;
}
    5ebc:	4770      	bx	lr

00005ebe <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5ebe:	e001      	b.n	5ec4 <strcmp+0x6>
		s1++;
    5ec0:	3001      	adds	r0, #1
		s2++;
    5ec2:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5ec4:	7803      	ldrb	r3, [r0, #0]
    5ec6:	780a      	ldrb	r2, [r1, #0]
    5ec8:	4293      	cmp	r3, r2
    5eca:	d101      	bne.n	5ed0 <strcmp+0x12>
    5ecc:	2b00      	cmp	r3, #0
    5ece:	d1f7      	bne.n	5ec0 <strcmp+0x2>
	}

	return *s1 - *s2;
}
    5ed0:	1a98      	subs	r0, r3, r2
    5ed2:	4770      	bx	lr

00005ed4 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    5ed4:	e002      	b.n	5edc <strncmp+0x8>
		s1++;
    5ed6:	3001      	adds	r0, #1
		s2++;
    5ed8:	3101      	adds	r1, #1
		n--;
    5eda:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    5edc:	b132      	cbz	r2, 5eec <strncmp+0x18>
    5ede:	7803      	ldrb	r3, [r0, #0]
    5ee0:	f891 c000 	ldrb.w	ip, [r1]
    5ee4:	4563      	cmp	r3, ip
    5ee6:	d101      	bne.n	5eec <strncmp+0x18>
    5ee8:	2b00      	cmp	r3, #0
    5eea:	d1f4      	bne.n	5ed6 <strncmp+0x2>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    5eec:	b11a      	cbz	r2, 5ef6 <strncmp+0x22>
    5eee:	7800      	ldrb	r0, [r0, #0]
    5ef0:	780b      	ldrb	r3, [r1, #0]
    5ef2:	1ac0      	subs	r0, r0, r3
    5ef4:	4770      	bx	lr
    5ef6:	2000      	movs	r0, #0
}
    5ef8:	4770      	bx	lr

00005efa <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5efa:	ea80 0301 	eor.w	r3, r0, r1
    5efe:	f013 0f03 	tst.w	r3, #3
    5f02:	d001      	beq.n	5f08 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    5f04:	4603      	mov	r3, r0
    5f06:	e023      	b.n	5f50 <memcpy+0x56>
    5f08:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    5f0a:	f013 0f03 	tst.w	r3, #3
    5f0e:	d00f      	beq.n	5f30 <memcpy+0x36>
			if (n == 0) {
    5f10:	b30a      	cbz	r2, 5f56 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    5f12:	f811 cb01 	ldrb.w	ip, [r1], #1
    5f16:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    5f1a:	3a01      	subs	r2, #1
    5f1c:	e7f5      	b.n	5f0a <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    5f1e:	f811 cb01 	ldrb.w	ip, [r1], #1
    5f22:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5f26:	3a01      	subs	r2, #1
	while (n > 0) {
    5f28:	2a00      	cmp	r2, #0
    5f2a:	d1f8      	bne.n	5f1e <memcpy+0x24>
	}

	return d;
}
    5f2c:	bc10      	pop	{r4}
    5f2e:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    5f30:	2a03      	cmp	r2, #3
    5f32:	d90d      	bls.n	5f50 <memcpy+0x56>
{
    5f34:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    5f36:	f851 4b04 	ldr.w	r4, [r1], #4
    5f3a:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    5f3e:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    5f40:	2a03      	cmp	r2, #3
    5f42:	d8f8      	bhi.n	5f36 <memcpy+0x3c>
    5f44:	e7f0      	b.n	5f28 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    5f46:	f811 cb01 	ldrb.w	ip, [r1], #1
    5f4a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5f4e:	3a01      	subs	r2, #1
	while (n > 0) {
    5f50:	2a00      	cmp	r2, #0
    5f52:	d1f8      	bne.n	5f46 <memcpy+0x4c>
    5f54:	4770      	bx	lr
}
    5f56:	4770      	bx	lr

00005f58 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5f58:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5f5c:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5f5e:	e002      	b.n	5f66 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    5f60:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5f64:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5f66:	f013 0f03 	tst.w	r3, #3
    5f6a:	d002      	beq.n	5f72 <memset+0x1a>
		if (n == 0) {
    5f6c:	2a00      	cmp	r2, #0
    5f6e:	d1f7      	bne.n	5f60 <memset+0x8>
    5f70:	e00f      	b.n	5f92 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    5f72:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    5f74:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    5f78:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5f7c:	2a03      	cmp	r2, #3
    5f7e:	d906      	bls.n	5f8e <memset+0x36>
		*(d_word++) = c_word;
    5f80:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    5f84:	3a04      	subs	r2, #4
    5f86:	e7f9      	b.n	5f7c <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    5f88:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5f8c:	3a01      	subs	r2, #1
	while (n > 0) {
    5f8e:	2a00      	cmp	r2, #0
    5f90:	d1fa      	bne.n	5f88 <memset+0x30>
	}

	return buf;
}
    5f92:	4770      	bx	lr

00005f94 <_stdout_hook_default>:
}
    5f94:	f04f 30ff 	mov.w	r0, #4294967295
    5f98:	4770      	bx	lr

00005f9a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    5f9a:	684b      	ldr	r3, [r1, #4]
    5f9c:	2b01      	cmp	r3, #1
    5f9e:	dd07      	ble.n	5fb0 <sprintf_out+0x16>
		*(p->ptr) = c;
    5fa0:	680b      	ldr	r3, [r1, #0]
    5fa2:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    5fa4:	680b      	ldr	r3, [r1, #0]
    5fa6:	3301      	adds	r3, #1
    5fa8:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    5faa:	684b      	ldr	r3, [r1, #4]
    5fac:	3b01      	subs	r3, #1
    5fae:	604b      	str	r3, [r1, #4]
}
    5fb0:	2000      	movs	r0, #0
    5fb2:	4770      	bx	lr

00005fb4 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5fb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5fb8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5fbc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5fc0:	2a08      	cmp	r2, #8
    5fc2:	d001      	beq.n	5fc8 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    5fc4:	2000      	movs	r0, #0
    5fc6:	4770      	bx	lr
                switch(var2)
    5fc8:	2b02      	cmp	r3, #2
    5fca:	d001      	beq.n	5fd0 <nrf52_errata_197+0x1c>
                        return false;
    5fcc:	2000      	movs	r0, #0
    5fce:	4770      	bx	lr
                        return true;
    5fd0:	2001      	movs	r0, #1
    #endif
}
    5fd2:	4770      	bx	lr

00005fd4 <sys_arch_reboot>:
{
    5fd4:	b508      	push	{r3, lr}
    *p_gpregret = val;
    5fd6:	b2c0      	uxtb	r0, r0
    5fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5fdc:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
    5fe0:	f7fb ffec 	bl	1fbc <__NVIC_SystemReset>

00005fe4 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5fe4:	2301      	movs	r3, #1
    5fe6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5fea:	f3bf 8f4f 	dsb	sy
        __WFE();
    5fee:	bf20      	wfe
    while (true)
    5ff0:	e7fd      	b.n	5fee <nrf_power_system_off+0xa>

00005ff2 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    5ff2:	2806      	cmp	r0, #6
    5ff4:	d000      	beq.n	5ff8 <pm_state_set+0x6>
    5ff6:	4770      	bx	lr
{
    5ff8:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
    5ffa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    5ffe:	f7ff fff1 	bl	5fe4 <nrf_power_system_off>

00006002 <pm_state_exit_post_ops>:
    6002:	2300      	movs	r3, #0
    6004:	f383 8811 	msr	BASEPRI, r3
    6008:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    600c:	4770      	bx	lr

0000600e <nrf_clock_is_running>:
    switch (domain)
    600e:	b119      	cbz	r1, 6018 <nrf_clock_is_running+0xa>
    6010:	2901      	cmp	r1, #1
    6012:	d00e      	beq.n	6032 <nrf_clock_is_running+0x24>
    6014:	2000      	movs	r0, #0
    6016:	4770      	bx	lr
            if (p_clk_src != NULL)
    6018:	b122      	cbz	r2, 6024 <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    601a:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    601e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6022:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6024:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6028:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    602c:	d10e      	bne.n	604c <nrf_clock_is_running+0x3e>
    return false;
    602e:	2000      	movs	r0, #0
    6030:	4770      	bx	lr
            if (p_clk_src != NULL)
    6032:	b122      	cbz	r2, 603e <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6034:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6038:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    603c:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    603e:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6042:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6046:	d103      	bne.n	6050 <nrf_clock_is_running+0x42>
    return false;
    6048:	2000      	movs	r0, #0
    604a:	4770      	bx	lr
                return true;
    604c:	2001      	movs	r0, #1
    604e:	4770      	bx	lr
                return true;
    6050:	2001      	movs	r0, #1
}
    6052:	4770      	bx	lr

00006054 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    6054:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6056:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    605a:	0089      	lsls	r1, r1, #2
    605c:	3138      	adds	r1, #56	; 0x38
}
    605e:	4408      	add	r0, r1
    6060:	4770      	bx	lr

00006062 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    6062:	6840      	ldr	r0, [r0, #4]
}
    6064:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    6068:	4770      	bx	lr

0000606a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    606a:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    606c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    6070:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6074:	4770      	bx	lr

00006076 <get_status>:
{
    6076:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6078:	b2c9      	uxtb	r1, r1
    607a:	f7ff ffeb 	bl	6054 <get_sub_data>
    607e:	6880      	ldr	r0, [r0, #8]
}
    6080:	f000 0007 	and.w	r0, r0, #7
    6084:	bd08      	pop	{r3, pc}

00006086 <set_off_state>:
	__asm__ volatile(
    6086:	f04f 0320 	mov.w	r3, #32
    608a:	f3ef 8211 	mrs	r2, BASEPRI
    608e:	f383 8812 	msr	BASEPRI_MAX, r3
    6092:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6096:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6098:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    609c:	d001      	beq.n	60a2 <set_off_state+0x1c>
    609e:	428b      	cmp	r3, r1
    60a0:	d107      	bne.n	60b2 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    60a2:	2301      	movs	r3, #1
    60a4:	6003      	str	r3, [r0, #0]
	int err = 0;
    60a6:	2000      	movs	r0, #0
	__asm__ volatile(
    60a8:	f382 8811 	msr	BASEPRI, r2
    60ac:	f3bf 8f6f 	isb	sy
}
    60b0:	4770      	bx	lr
		err = -EPERM;
    60b2:	f04f 30ff 	mov.w	r0, #4294967295
    60b6:	e7f7      	b.n	60a8 <set_off_state+0x22>

000060b8 <set_starting_state>:
	__asm__ volatile(
    60b8:	f04f 0320 	mov.w	r3, #32
    60bc:	f3ef 8211 	mrs	r2, BASEPRI
    60c0:	f383 8812 	msr	BASEPRI_MAX, r3
    60c4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    60c8:	6803      	ldr	r3, [r0, #0]
    60ca:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    60ce:	f003 0307 	and.w	r3, r3, #7
    60d2:	2b01      	cmp	r3, #1
    60d4:	d008      	beq.n	60e8 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    60d6:	458c      	cmp	ip, r1
    60d8:	d009      	beq.n	60ee <set_starting_state+0x36>
		err = -EPERM;
    60da:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    60de:	f382 8811 	msr	BASEPRI, r2
    60e2:	f3bf 8f6f 	isb	sy
}
    60e6:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    60e8:	6001      	str	r1, [r0, #0]
	int err = 0;
    60ea:	2000      	movs	r0, #0
    60ec:	e7f7      	b.n	60de <set_starting_state+0x26>
		err = -EALREADY;
    60ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
    60f2:	e7f4      	b.n	60de <set_starting_state+0x26>

000060f4 <set_on_state>:
	__asm__ volatile(
    60f4:	f04f 0320 	mov.w	r3, #32
    60f8:	f3ef 8211 	mrs	r2, BASEPRI
    60fc:	f383 8812 	msr	BASEPRI_MAX, r3
    6100:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6104:	6803      	ldr	r3, [r0, #0]
    6106:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    610a:	f043 0302 	orr.w	r3, r3, #2
    610e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6110:	f382 8811 	msr	BASEPRI, r2
    6114:	f3bf 8f6f 	isb	sy
}
    6118:	4770      	bx	lr

0000611a <clkstarted_handle>:
{
    611a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    611c:	4606      	mov	r6, r0
    611e:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    6120:	f7ff ff98 	bl	6054 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    6124:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    6126:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    6128:	2300      	movs	r3, #0
    612a:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    612e:	f7ff ffe1 	bl	60f4 <set_on_state>
	if (callback) {
    6132:	b11d      	cbz	r5, 613c <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    6134:	463a      	mov	r2, r7
    6136:	4621      	mov	r1, r4
    6138:	4630      	mov	r0, r6
    613a:	47a8      	blx	r5
}
    613c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000613e <stop>:
{
    613e:	b570      	push	{r4, r5, r6, lr}
    6140:	4606      	mov	r6, r0
    6142:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6144:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6146:	4621      	mov	r1, r4
    6148:	f7ff ff84 	bl	6054 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    614c:	4629      	mov	r1, r5
    614e:	3008      	adds	r0, #8
    6150:	f7ff ff99 	bl	6086 <set_off_state>
	if (err < 0) {
    6154:	2800      	cmp	r0, #0
    6156:	db06      	blt.n	6166 <stop+0x28>
	get_sub_config(dev, type)->stop();
    6158:	4621      	mov	r1, r4
    615a:	4630      	mov	r0, r6
    615c:	f7ff ff81 	bl	6062 <get_sub_config>
    6160:	6843      	ldr	r3, [r0, #4]
    6162:	4798      	blx	r3
	return 0;
    6164:	2000      	movs	r0, #0
}
    6166:	bd70      	pop	{r4, r5, r6, pc}

00006168 <api_stop>:
{
    6168:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    616a:	2280      	movs	r2, #128	; 0x80
    616c:	f7ff ffe7 	bl	613e <stop>
}
    6170:	bd08      	pop	{r3, pc}

00006172 <async_start>:
{
    6172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6176:	4606      	mov	r6, r0
    6178:	4690      	mov	r8, r2
    617a:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    617c:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    617e:	4629      	mov	r1, r5
    6180:	f7ff ff68 	bl	6054 <get_sub_data>
    6184:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    6186:	9906      	ldr	r1, [sp, #24]
    6188:	3008      	adds	r0, #8
    618a:	f7ff ff95 	bl	60b8 <set_starting_state>
	if (err < 0) {
    618e:	2800      	cmp	r0, #0
    6190:	db09      	blt.n	61a6 <async_start+0x34>
	subdata->cb = cb;
    6192:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    6196:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    6198:	4629      	mov	r1, r5
    619a:	4630      	mov	r0, r6
    619c:	f7ff ff61 	bl	6062 <get_sub_config>
    61a0:	6803      	ldr	r3, [r0, #0]
    61a2:	4798      	blx	r3
	return 0;
    61a4:	2000      	movs	r0, #0
}
    61a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000061aa <api_start>:
{
    61aa:	b510      	push	{r4, lr}
    61ac:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    61ae:	2480      	movs	r4, #128	; 0x80
    61b0:	9400      	str	r4, [sp, #0]
    61b2:	f7ff ffde 	bl	6172 <async_start>
}
    61b6:	b002      	add	sp, #8
    61b8:	bd10      	pop	{r4, pc}

000061ba <onoff_started_callback>:
{
    61ba:	b510      	push	{r4, lr}
    61bc:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    61be:	b2c9      	uxtb	r1, r1
    61c0:	f7ff ff53 	bl	606a <get_onoff_manager>
	notify(mgr, 0);
    61c4:	2100      	movs	r1, #0
    61c6:	47a0      	blx	r4
}
    61c8:	bd10      	pop	{r4, pc}

000061ca <hfclk_start>:
{
    61ca:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    61cc:	2001      	movs	r0, #1
    61ce:	f000 fd23 	bl	6c18 <nrfx_clock_start>
}
    61d2:	bd08      	pop	{r3, pc}

000061d4 <lfclk_start>:
{
    61d4:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    61d6:	2000      	movs	r0, #0
    61d8:	f000 fd1e 	bl	6c18 <nrfx_clock_start>
}
    61dc:	bd08      	pop	{r3, pc}

000061de <hfclk_stop>:
{
    61de:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    61e0:	2001      	movs	r0, #1
    61e2:	f000 fd69 	bl	6cb8 <nrfx_clock_stop>
}
    61e6:	bd08      	pop	{r3, pc}

000061e8 <lfclk_stop>:
{
    61e8:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    61ea:	2000      	movs	r0, #0
    61ec:	f000 fd64 	bl	6cb8 <nrfx_clock_stop>
}
    61f0:	bd08      	pop	{r3, pc}

000061f2 <k_msleep>:
{
    61f2:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    61f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    61f8:	17c1      	asrs	r1, r0, #31
    61fa:	03c9      	lsls	r1, r1, #15
    61fc:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    6200:	03c0      	lsls	r0, r0, #15
    6202:	f240 33e7 	movw	r3, #999	; 0x3e7
    6206:	18c0      	adds	r0, r0, r3
    6208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    620c:	f04f 0300 	mov.w	r3, #0
    6210:	f141 0100 	adc.w	r1, r1, #0
    6214:	f7f9 ff74 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    6218:	f7fe fcb2 	bl	4b80 <z_impl_k_sleep>
}
    621c:	bd08      	pop	{r3, pc}

0000621e <blocking_start_callback>:
{
    621e:	b508      	push	{r3, lr}
    6220:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    6222:	f7fe f905 	bl	4430 <z_impl_k_sem_give>
}
    6226:	bd08      	pop	{r3, pc}

00006228 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    6228:	460b      	mov	r3, r1
    622a:	b139      	cbz	r1, 623c <sys_slist_remove+0x14>
	return node->next;
    622c:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    622e:	6019      	str	r1, [r3, #0]
	return list->tail;
    6230:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    6232:	428a      	cmp	r2, r1
    6234:	d009      	beq.n	624a <sys_slist_remove+0x22>
	parent->next = child;
    6236:	2300      	movs	r3, #0
    6238:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    623a:	4770      	bx	lr
	return node->next;
    623c:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    623e:	6003      	str	r3, [r0, #0]
	return list->tail;
    6240:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    6242:	428a      	cmp	r2, r1
    6244:	d1f7      	bne.n	6236 <sys_slist_remove+0xe>
	list->tail = node;
    6246:	6043      	str	r3, [r0, #4]
}
    6248:	e7f5      	b.n	6236 <sys_slist_remove+0xe>
	list->tail = node;
    624a:	6043      	str	r3, [r0, #4]
}
    624c:	e7f3      	b.n	6236 <sys_slist_remove+0xe>

0000624e <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    624e:	b508      	push	{r3, lr}
    6250:	460a      	mov	r2, r1
	return list->head;
    6252:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6254:	2100      	movs	r1, #0
    6256:	e001      	b.n	625c <sys_slist_find_and_remove+0xe>
    6258:	4619      	mov	r1, r3
    625a:	681b      	ldr	r3, [r3, #0]
    625c:	b12b      	cbz	r3, 626a <sys_slist_find_and_remove+0x1c>
    625e:	4293      	cmp	r3, r2
    6260:	d1fa      	bne.n	6258 <sys_slist_find_and_remove+0xa>
    6262:	f7ff ffe1 	bl	6228 <sys_slist_remove>
    6266:	2001      	movs	r0, #1
    6268:	e000      	b.n	626c <sys_slist_find_and_remove+0x1e>
    626a:	2000      	movs	r0, #0
    626c:	bd08      	pop	{r3, pc}

0000626e <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    626e:	b570      	push	{r4, r5, r6, lr}
    6270:	4604      	mov	r4, r0
    6272:	460d      	mov	r5, r1
    6274:	4616      	mov	r6, r2
	return list->head;
    6276:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    6278:	b133      	cbz	r3, 6288 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    627a:	f7ff ffe8 	bl	624e <sys_slist_find_and_remove>
    627e:	b970      	cbnz	r0, 629e <gpio_manage_callback+0x30>
			if (!set) {
    6280:	b91e      	cbnz	r6, 628a <gpio_manage_callback+0x1c>
				return -EINVAL;
    6282:	f06f 0015 	mvn.w	r0, #21
    6286:	e006      	b.n	6296 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    6288:	b132      	cbz	r2, 6298 <gpio_manage_callback+0x2a>
    628a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    628c:	602b      	str	r3, [r5, #0]
	list->head = node;
    628e:	6025      	str	r5, [r4, #0]
	return list->tail;
    6290:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    6292:	b143      	cbz	r3, 62a6 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    6294:	2000      	movs	r0, #0
}
    6296:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    6298:	f06f 0015 	mvn.w	r0, #21
    629c:	e7fb      	b.n	6296 <gpio_manage_callback+0x28>
	if (set) {
    629e:	2e00      	cmp	r6, #0
    62a0:	d1f3      	bne.n	628a <gpio_manage_callback+0x1c>
	return 0;
    62a2:	2000      	movs	r0, #0
    62a4:	e7f7      	b.n	6296 <gpio_manage_callback+0x28>
	list->tail = node;
    62a6:	6065      	str	r5, [r4, #4]
    62a8:	2000      	movs	r0, #0
}
    62aa:	e7f4      	b.n	6296 <gpio_manage_callback+0x28>

000062ac <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    62ac:	b570      	push	{r4, r5, r6, lr}
    62ae:	460e      	mov	r6, r1
    62b0:	4615      	mov	r5, r2
	return list->head;
    62b2:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    62b4:	b121      	cbz	r1, 62c0 <gpio_fire_callbacks+0x14>
	return node->next;
    62b6:	680c      	ldr	r4, [r1, #0]
    62b8:	b13c      	cbz	r4, 62ca <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    62ba:	b931      	cbnz	r1, 62ca <gpio_fire_callbacks+0x1e>
    62bc:	460c      	mov	r4, r1
    62be:	e004      	b.n	62ca <gpio_fire_callbacks+0x1e>
    62c0:	460c      	mov	r4, r1
    62c2:	e002      	b.n	62ca <gpio_fire_callbacks+0x1e>
    62c4:	4623      	mov	r3, r4
    62c6:	4621      	mov	r1, r4
    62c8:	461c      	mov	r4, r3
    62ca:	b171      	cbz	r1, 62ea <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    62cc:	688a      	ldr	r2, [r1, #8]
    62ce:	402a      	ands	r2, r5
    62d0:	d002      	beq.n	62d8 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    62d2:	684b      	ldr	r3, [r1, #4]
    62d4:	4630      	mov	r0, r6
    62d6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    62d8:	2c00      	cmp	r4, #0
    62da:	d0f3      	beq.n	62c4 <gpio_fire_callbacks+0x18>
	return node->next;
    62dc:	6823      	ldr	r3, [r4, #0]
    62de:	2b00      	cmp	r3, #0
    62e0:	d0f1      	beq.n	62c6 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    62e2:	2c00      	cmp	r4, #0
    62e4:	d1ef      	bne.n	62c6 <gpio_fire_callbacks+0x1a>
    62e6:	4623      	mov	r3, r4
    62e8:	e7ed      	b.n	62c6 <gpio_fire_callbacks+0x1a>
		}
	}
}
    62ea:	bd70      	pop	{r4, r5, r6, pc}

000062ec <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    62ec:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    62f0:	0580      	lsls	r0, r0, #22
    62f2:	0d80      	lsrs	r0, r0, #22
    62f4:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    62f8:	d033      	beq.n	6362 <get_drive+0x76>
    62fa:	d816      	bhi.n	632a <get_drive+0x3e>
    62fc:	2806      	cmp	r0, #6
    62fe:	d02c      	beq.n	635a <get_drive+0x6e>
    6300:	d906      	bls.n	6310 <get_drive+0x24>
    6302:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    6306:	d10d      	bne.n	6324 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    6308:	2301      	movs	r3, #1
    630a:	700b      	strb	r3, [r1, #0]
	return 0;
    630c:	2000      	movs	r0, #0
		break;
    630e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6310:	b300      	cbz	r0, 6354 <get_drive+0x68>
    6312:	2802      	cmp	r0, #2
    6314:	d103      	bne.n	631e <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    6316:	2304      	movs	r3, #4
    6318:	700b      	strb	r3, [r1, #0]
	return 0;
    631a:	2000      	movs	r0, #0
		break;
    631c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    631e:	f06f 0015 	mvn.w	r0, #21
    6322:	4770      	bx	lr
    6324:	f06f 0015 	mvn.w	r0, #21
    6328:	4770      	bx	lr
    632a:	f240 2302 	movw	r3, #514	; 0x202
    632e:	4298      	cmp	r0, r3
    6330:	d01b      	beq.n	636a <get_drive+0x7e>
    6332:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    6336:	d103      	bne.n	6340 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    6338:	2303      	movs	r3, #3
    633a:	700b      	strb	r3, [r1, #0]
	return 0;
    633c:	2000      	movs	r0, #0
		break;
    633e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6340:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    6344:	d103      	bne.n	634e <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    6346:	2302      	movs	r3, #2
    6348:	700b      	strb	r3, [r1, #0]
	return 0;
    634a:	2000      	movs	r0, #0
		break;
    634c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    634e:	f06f 0015 	mvn.w	r0, #21
    6352:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    6354:	2000      	movs	r0, #0
    6356:	7008      	strb	r0, [r1, #0]
		break;
    6358:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    635a:	2306      	movs	r3, #6
    635c:	700b      	strb	r3, [r1, #0]
	return 0;
    635e:	2000      	movs	r0, #0
		break;
    6360:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    6362:	2307      	movs	r3, #7
    6364:	700b      	strb	r3, [r1, #0]
	return 0;
    6366:	2000      	movs	r0, #0
		break;
    6368:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    636a:	2305      	movs	r3, #5
    636c:	700b      	strb	r3, [r1, #0]
	return 0;
    636e:	2000      	movs	r0, #0
}
    6370:	4770      	bx	lr

00006372 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    6372:	f010 0f10 	tst.w	r0, #16
    6376:	d104      	bne.n	6382 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    6378:	f010 0f20 	tst.w	r0, #32
    637c:	d103      	bne.n	6386 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    637e:	2000      	movs	r0, #0
    6380:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    6382:	2003      	movs	r0, #3
    6384:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    6386:	2001      	movs	r0, #1
}
    6388:	4770      	bx	lr

0000638a <gpio_nrfx_port_get_raw>:
	return port->config;
    638a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    638c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    638e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6392:	600b      	str	r3, [r1, #0]
}
    6394:	2000      	movs	r0, #0
    6396:	4770      	bx	lr

00006398 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    6398:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    639a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    639c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    63a0:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    63a4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    63a8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    63ac:	2000      	movs	r0, #0
    63ae:	4770      	bx	lr

000063b0 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    63b0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    63b2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    63b4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    63b8:	2000      	movs	r0, #0
    63ba:	4770      	bx	lr

000063bc <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    63bc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    63be:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    63c0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    63c4:	2000      	movs	r0, #0
    63c6:	4770      	bx	lr

000063c8 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    63c8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    63ca:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    63cc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    63d0:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    63d4:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    63d6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    63da:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    63de:	2000      	movs	r0, #0
    63e0:	4770      	bx	lr

000063e2 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    63e2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    63e6:	d007      	beq.n	63f8 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    63e8:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    63ec:	d00d      	beq.n	640a <get_trigger+0x28>
    63ee:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    63f2:	d008      	beq.n	6406 <get_trigger+0x24>
    63f4:	2001      	movs	r0, #1
}
    63f6:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    63f8:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    63fc:	d001      	beq.n	6402 <get_trigger+0x20>
    63fe:	2005      	movs	r0, #5
    6400:	4770      	bx	lr
    6402:	2004      	movs	r0, #4
    6404:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6406:	2002      	movs	r0, #2
    6408:	4770      	bx	lr
    640a:	2003      	movs	r0, #3
    640c:	4770      	bx	lr

0000640e <gpio_nrfx_manage_callback>:
{
    640e:	b508      	push	{r3, lr}
	return port->data;
    6410:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6412:	3004      	adds	r0, #4
    6414:	f7ff ff2b 	bl	626e <gpio_manage_callback>
}
    6418:	bd08      	pop	{r3, pc}

0000641a <nrfx_gpio_handler>:
{
    641a:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    641c:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    6420:	0940      	lsrs	r0, r0, #5
    6422:	f7fb ffc1 	bl	23a8 <get_dev>
	if (port == NULL) {
    6426:	b130      	cbz	r0, 6436 <nrfx_gpio_handler+0x1c>
    6428:	4601      	mov	r1, r0
	return port->data;
    642a:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    642c:	2201      	movs	r2, #1
    642e:	40a2      	lsls	r2, r4
    6430:	3004      	adds	r0, #4
    6432:	f7ff ff3b 	bl	62ac <gpio_fire_callbacks>
}
    6436:	bd10      	pop	{r4, pc}

00006438 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6438:	b500      	push	{lr}
	*state = &config->states[0];
    643a:	6843      	ldr	r3, [r0, #4]
    643c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    643e:	e001      	b.n	6444 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    6440:	3308      	adds	r3, #8
    6442:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    6444:	6813      	ldr	r3, [r2, #0]
    6446:	f890 c008 	ldrb.w	ip, [r0, #8]
    644a:	f8d0 e004 	ldr.w	lr, [r0, #4]
    644e:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
    6452:	4563      	cmp	r3, ip
    6454:	d205      	bcs.n	6462 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
    6456:	f893 c005 	ldrb.w	ip, [r3, #5]
    645a:	458c      	cmp	ip, r1
    645c:	d1f0      	bne.n	6440 <pinctrl_lookup_state+0x8>
			return 0;
    645e:	2000      	movs	r0, #0
    6460:	e001      	b.n	6466 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
    6462:	f06f 0001 	mvn.w	r0, #1
}
    6466:	f85d fb04 	ldr.w	pc, [sp], #4

0000646a <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    646a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    646c:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    646e:	f04f 0120 	mov.w	r1, #32
    6472:	f3ef 8311 	mrs	r3, BASEPRI
    6476:	f381 8812 	msr	BASEPRI_MAX, r1
    647a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    647e:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6482:	b131      	cbz	r1, 6492 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6484:	2100      	movs	r1, #0
    6486:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    648a:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    648e:	2101      	movs	r1, #1
    6490:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    6492:	f383 8811 	msr	BASEPRI, r3
    6496:	f3bf 8f6f 	isb	sy
}
    649a:	4770      	bx	lr

0000649c <uarte_nrfx_isr_int>:
{
    649c:	b570      	push	{r4, r5, r6, lr}
    649e:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    64a0:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    64a2:	6835      	ldr	r5, [r6, #0]
    return p_reg->INTENSET & mask;
    64a4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    64a8:	f413 7f80 	tst.w	r3, #256	; 0x100
    64ac:	d003      	beq.n	64b6 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    64ae:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    64b2:	2b00      	cmp	r3, #0
    64b4:	d138      	bne.n	6528 <uarte_nrfx_isr_int+0x8c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    64b6:	6873      	ldr	r3, [r6, #4]
    64b8:	f013 0f10 	tst.w	r3, #16
    64bc:	d01a      	beq.n	64f4 <uarte_nrfx_isr_int+0x58>
	__asm__ volatile(
    64be:	f04f 0220 	mov.w	r2, #32
    64c2:	f3ef 8311 	mrs	r3, BASEPRI
    64c6:	f382 8812 	msr	BASEPRI_MAX, r2
    64ca:	f3bf 8f6f 	isb	sy
    64ce:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    64d2:	b112      	cbz	r2, 64da <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    64d4:	2200      	movs	r2, #0
    64d6:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
		struct uarte_nrfx_data *data = dev->data;
    64da:	6922      	ldr	r2, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    64dc:	68d2      	ldr	r2, [r2, #12]
    64de:	b10a      	cbz	r2, 64e4 <uarte_nrfx_isr_int+0x48>
    64e0:	6912      	ldr	r2, [r2, #16]
    64e2:	b91a      	cbnz	r2, 64ec <uarte_nrfx_isr_int+0x50>
    p_reg->INTENCLR = mask;
    64e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    64e8:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    64ec:	f383 8811 	msr	BASEPRI, r3
    64f0:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
    64f4:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
    64f6:	68da      	ldr	r2, [r3, #12]
    64f8:	b1aa      	cbz	r2, 6526 <uarte_nrfx_isr_int+0x8a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    64fa:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    64fe:	b121      	cbz	r1, 650a <uarte_nrfx_isr_int+0x6e>
		data->int_driven->fifo_fill_lock = 0;
    6500:	2100      	movs	r1, #0
    6502:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    6504:	68da      	ldr	r2, [r3, #12]
    6506:	7b92      	ldrb	r2, [r2, #14]
    6508:	b98a      	cbnz	r2, 652e <uarte_nrfx_isr_int+0x92>
    650a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    650e:	b122      	cbz	r2, 651a <uarte_nrfx_isr_int+0x7e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6510:	2200      	movs	r2, #0
    6512:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
    6516:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
    651a:	68da      	ldr	r2, [r3, #12]
    651c:	6813      	ldr	r3, [r2, #0]
    651e:	b113      	cbz	r3, 6526 <uarte_nrfx_isr_int+0x8a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6520:	6851      	ldr	r1, [r2, #4]
    6522:	4620      	mov	r0, r4
    6524:	4798      	blx	r3
}
    6526:	bd70      	pop	{r4, r5, r6, pc}
		endtx_isr(dev);
    6528:	f7ff ff9f 	bl	646a <endtx_isr>
    652c:	e7c3      	b.n	64b6 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
    652e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6532:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    6536:	68db      	ldr	r3, [r3, #12]
    6538:	7399      	strb	r1, [r3, #14]
			return;
    653a:	e7f4      	b.n	6526 <uarte_nrfx_isr_int+0x8a>

0000653c <uarte_nrfx_configure>:
{
    653c:	b570      	push	{r4, r5, r6, lr}
    653e:	b082      	sub	sp, #8
    6540:	4606      	mov	r6, r0
    6542:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    6544:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    6546:	794b      	ldrb	r3, [r1, #5]
    6548:	2b01      	cmp	r3, #1
    654a:	d006      	beq.n	655a <uarte_nrfx_configure+0x1e>
    654c:	2b03      	cmp	r3, #3
    654e:	d011      	beq.n	6574 <uarte_nrfx_configure+0x38>
    6550:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    6554:	4618      	mov	r0, r3
    6556:	b002      	add	sp, #8
    6558:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    655a:	2300      	movs	r3, #0
    655c:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    6560:	79a3      	ldrb	r3, [r4, #6]
    6562:	2b03      	cmp	r3, #3
    6564:	d137      	bne.n	65d6 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    6566:	79e3      	ldrb	r3, [r4, #7]
    6568:	b143      	cbz	r3, 657c <uarte_nrfx_configure+0x40>
    656a:	2b01      	cmp	r3, #1
    656c:	d010      	beq.n	6590 <uarte_nrfx_configure+0x54>
    656e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    6572:	e7ef      	b.n	6554 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    6574:	2310      	movs	r3, #16
    6576:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    657a:	e7f1      	b.n	6560 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    657c:	2300      	movs	r3, #0
    657e:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    6582:	7923      	ldrb	r3, [r4, #4]
    6584:	b143      	cbz	r3, 6598 <uarte_nrfx_configure+0x5c>
    6586:	2b02      	cmp	r3, #2
    6588:	d021      	beq.n	65ce <uarte_nrfx_configure+0x92>
    658a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    658e:	e7e1      	b.n	6554 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    6590:	2301      	movs	r3, #1
    6592:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    6596:	e7f4      	b.n	6582 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    6598:	2300      	movs	r3, #0
    659a:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    659e:	6821      	ldr	r1, [r4, #0]
    65a0:	4630      	mov	r0, r6
    65a2:	f7fc f97f 	bl	28a4 <baudrate_set>
    65a6:	4603      	mov	r3, r0
    65a8:	b9c0      	cbnz	r0, 65dc <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    65aa:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    65ac:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    65ae:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    65b2:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    65b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    65ba:	4331      	orrs	r1, r6
    65bc:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    65be:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    65c2:	3504      	adds	r5, #4
    65c4:	e894 0003 	ldmia.w	r4, {r0, r1}
    65c8:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    65cc:	e7c2      	b.n	6554 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    65ce:	230e      	movs	r3, #14
    65d0:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    65d4:	e7e3      	b.n	659e <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    65d6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    65da:	e7bb      	b.n	6554 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    65dc:	f06f 0385 	mvn.w	r3, #133	; 0x85
    65e0:	e7b8      	b.n	6554 <uarte_nrfx_configure+0x18>

000065e2 <uarte_nrfx_config_get>:
{
    65e2:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    65e4:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    65e6:	3304      	adds	r3, #4
    65e8:	e893 0003 	ldmia.w	r3, {r0, r1}
    65ec:	e882 0003 	stmia.w	r2, {r0, r1}
}
    65f0:	2000      	movs	r0, #0
    65f2:	4770      	bx	lr

000065f4 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    65f4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    65f6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    65f8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    65fc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6600:	4770      	bx	lr

00006602 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    6602:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6604:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6606:	685b      	ldr	r3, [r3, #4]
    6608:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    660c:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6610:	b929      	cbnz	r1, 661e <is_tx_ready+0x1c>
    6612:	b933      	cbnz	r3, 6622 <is_tx_ready+0x20>
    6614:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    6618:	b92b      	cbnz	r3, 6626 <is_tx_ready+0x24>
    661a:	2000      	movs	r0, #0
    661c:	4770      	bx	lr
    661e:	2001      	movs	r0, #1
    6620:	4770      	bx	lr
    6622:	2000      	movs	r0, #0
    6624:	4770      	bx	lr
    6626:	2001      	movs	r0, #1
}
    6628:	4770      	bx	lr

0000662a <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    662a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    662c:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    662e:	2208      	movs	r2, #8
    6630:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    6634:	4770      	bx	lr

00006636 <tx_start>:
{
    6636:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    6638:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    663a:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    663c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6640:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6644:	2200      	movs	r2, #0
    6646:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    664a:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    664e:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    6652:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6656:	685b      	ldr	r3, [r3, #4]
    6658:	f013 0f10 	tst.w	r3, #16
    665c:	d102      	bne.n	6664 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    665e:	2301      	movs	r3, #1
    6660:	60a3      	str	r3, [r4, #8]
}
    6662:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    6664:	2101      	movs	r1, #1
    6666:	f7ff ffe0 	bl	662a <uarte_enable>
    p_reg->INTENSET = mask;
    666a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    666e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    6672:	e7f4      	b.n	665e <tx_start+0x28>

00006674 <uarte_nrfx_poll_in>:
{
    6674:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    6676:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    6678:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    667a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    667c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6680:	b15a      	cbz	r2, 669a <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    6682:	69a2      	ldr	r2, [r4, #24]
    6684:	7812      	ldrb	r2, [r2, #0]
    6686:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6688:	2000      	movs	r0, #0
    668a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    668e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6692:	2201      	movs	r2, #1
    6694:	601a      	str	r2, [r3, #0]
}
    6696:	bc10      	pop	{r4}
    6698:	4770      	bx	lr
		return -1;
    669a:	f04f 30ff 	mov.w	r0, #4294967295
    669e:	e7fa      	b.n	6696 <uarte_nrfx_poll_in+0x22>

000066a0 <uarte_nrfx_fifo_read>:
	const struct uarte_nrfx_config *config = dev->config;
    66a0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    66a2:	681b      	ldr	r3, [r3, #0]
	const struct uarte_nrfx_data *data = dev->data;
    66a4:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    66a6:	2a00      	cmp	r2, #0
    66a8:	dd0d      	ble.n	66c6 <uarte_nrfx_fifo_read+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    66aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    66ae:	b162      	cbz	r2, 66ca <uarte_nrfx_fifo_read+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    66b0:	2200      	movs	r2, #0
    66b2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    66b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
    66ba:	6982      	ldr	r2, [r0, #24]
    66bc:	7812      	ldrb	r2, [r2, #0]
    66be:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66c0:	2001      	movs	r0, #1
    66c2:	6018      	str	r0, [r3, #0]
}
    66c4:	4770      	bx	lr
	int num_rx = 0;
    66c6:	2000      	movs	r0, #0
    66c8:	4770      	bx	lr
    66ca:	2000      	movs	r0, #0
}
    66cc:	4770      	bx	lr

000066ce <uarte_nrfx_irq_tx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    66ce:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    66d0:	681a      	ldr	r2, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    66d2:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
    66d4:	f04f 0020 	mov.w	r0, #32
    66d8:	f3ef 8311 	mrs	r3, BASEPRI
    66dc:	f380 8812 	msr	BASEPRI_MAX, r0
    66e0:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    66e4:	68c9      	ldr	r1, [r1, #12]
    66e6:	2000      	movs	r0, #0
    66e8:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    66ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    66ee:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    66f2:	f383 8811 	msr	BASEPRI, r3
    66f6:	f3bf 8f6f 	isb	sy
}
    66fa:	4770      	bx	lr

000066fc <uarte_nrfx_irq_tx_disable>:
	struct uarte_nrfx_data *data = dev->data;
    66fc:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
    66fe:	68db      	ldr	r3, [r3, #12]
    6700:	2201      	movs	r2, #1
    6702:	739a      	strb	r2, [r3, #14]
}
    6704:	4770      	bx	lr

00006706 <uarte_nrfx_irq_tx_ready_complete>:
	const struct uarte_nrfx_config *config = dev->config;
    6706:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6708:	6819      	ldr	r1, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    670a:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
    670c:	68db      	ldr	r3, [r3, #12]
    670e:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6710:	b95a      	cbnz	r2, 672a <uarte_nrfx_irq_tx_ready_complete+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6712:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    6716:	b152      	cbz	r2, 672e <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    6718:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    671c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    6720:	d007      	beq.n	6732 <uarte_nrfx_irq_tx_ready_complete+0x2c>
		data->int_driven->fifo_fill_lock = 0;
    6722:	2200      	movs	r2, #0
    6724:	611a      	str	r2, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6726:	2001      	movs	r0, #1
    6728:	4770      	bx	lr
    672a:	2000      	movs	r0, #0
    672c:	4770      	bx	lr
    672e:	2000      	movs	r0, #0
    6730:	4770      	bx	lr
    6732:	2000      	movs	r0, #0
}
    6734:	4770      	bx	lr

00006736 <uarte_nrfx_irq_rx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    6736:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6738:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    673a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    673e:	3800      	subs	r0, #0
    6740:	bf18      	it	ne
    6742:	2001      	movne	r0, #1
    6744:	4770      	bx	lr

00006746 <uarte_nrfx_irq_rx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    6746:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6748:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    674a:	2210      	movs	r2, #16
    674c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6750:	4770      	bx	lr

00006752 <uarte_nrfx_irq_rx_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    6752:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6754:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    6756:	2210      	movs	r2, #16
    6758:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    675c:	4770      	bx	lr

0000675e <uarte_nrfx_irq_err_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    675e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6760:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6762:	f44f 7200 	mov.w	r2, #512	; 0x200
    6766:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    676a:	4770      	bx	lr

0000676c <uarte_nrfx_irq_err_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    676c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    676e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    6770:	f44f 7200 	mov.w	r2, #512	; 0x200
    6774:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6778:	4770      	bx	lr

0000677a <uarte_nrfx_irq_is_pending>:
{
    677a:	b538      	push	{r3, r4, r5, lr}
    677c:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    677e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6780:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    6782:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    6786:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    678a:	d106      	bne.n	679a <uarte_nrfx_irq_is_pending+0x20>
    678c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    6790:	f013 0f10 	tst.w	r3, #16
    6794:	d107      	bne.n	67a6 <uarte_nrfx_irq_is_pending+0x2c>
    6796:	2000      	movs	r0, #0
}
    6798:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    679a:	f7ff ffb4 	bl	6706 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    679e:	2800      	cmp	r0, #0
    67a0:	d0f4      	beq.n	678c <uarte_nrfx_irq_is_pending+0x12>
		||
    67a2:	2001      	movs	r0, #1
    67a4:	e7f8      	b.n	6798 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    67a6:	4620      	mov	r0, r4
    67a8:	f7ff ffc5 	bl	6736 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    67ac:	2800      	cmp	r0, #0
    67ae:	d0f3      	beq.n	6798 <uarte_nrfx_irq_is_pending+0x1e>
		||
    67b0:	2001      	movs	r0, #1
    67b2:	e7f1      	b.n	6798 <uarte_nrfx_irq_is_pending+0x1e>

000067b4 <uarte_nrfx_irq_update>:
}
    67b4:	2001      	movs	r0, #1
    67b6:	4770      	bx	lr

000067b8 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    67b8:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    67ba:	68d8      	ldr	r0, [r3, #12]
    67bc:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    67be:	68db      	ldr	r3, [r3, #12]
    67c0:	605a      	str	r2, [r3, #4]
}
    67c2:	4770      	bx	lr

000067c4 <uarte_nrfx_fifo_fill>:
{
    67c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67c6:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
    67c8:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    67ca:	68fb      	ldr	r3, [r7, #12]
    67cc:	899c      	ldrh	r4, [r3, #12]
    67ce:	4294      	cmp	r4, r2
    67d0:	bfa8      	it	ge
    67d2:	4614      	movge	r4, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    67d4:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    67d6:	2201      	movs	r2, #1
    67d8:	f3bf 8f5b 	dmb	ish
    67dc:	e853 0f00 	ldrex	r0, [r3]
    67e0:	2800      	cmp	r0, #0
    67e2:	d103      	bne.n	67ec <uarte_nrfx_fifo_fill+0x28>
    67e4:	e843 2500 	strex	r5, r2, [r3]
    67e8:	2d00      	cmp	r5, #0
    67ea:	d1f7      	bne.n	67dc <uarte_nrfx_fifo_fill+0x18>
    67ec:	f3bf 8f5b 	dmb	ish
    67f0:	d120      	bne.n	6834 <uarte_nrfx_fifo_fill+0x70>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
    67f2:	68fb      	ldr	r3, [r7, #12]
    67f4:	4622      	mov	r2, r4
    67f6:	6898      	ldr	r0, [r3, #8]
    67f8:	f7ff fb7f 	bl	5efa <memcpy>
	__asm__ volatile(
    67fc:	f04f 0320 	mov.w	r3, #32
    6800:	f3ef 8511 	mrs	r5, BASEPRI
    6804:	f383 8812 	msr	BASEPRI_MAX, r3
    6808:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    680c:	4630      	mov	r0, r6
    680e:	f7ff fef8 	bl	6602 <is_tx_ready>
    6812:	b940      	cbnz	r0, 6826 <uarte_nrfx_fifo_fill+0x62>
		data->int_driven->fifo_fill_lock = 0;
    6814:	68fb      	ldr	r3, [r7, #12]
    6816:	2400      	movs	r4, #0
    6818:	611c      	str	r4, [r3, #16]
	__asm__ volatile(
    681a:	f385 8811 	msr	BASEPRI, r5
    681e:	f3bf 8f6f 	isb	sy
}
    6822:	4620      	mov	r0, r4
    6824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    6826:	68fb      	ldr	r3, [r7, #12]
    6828:	4622      	mov	r2, r4
    682a:	6899      	ldr	r1, [r3, #8]
    682c:	4630      	mov	r0, r6
    682e:	f7ff ff02 	bl	6636 <tx_start>
    6832:	e7f2      	b.n	681a <uarte_nrfx_fifo_fill+0x56>
		return 0;
    6834:	2400      	movs	r4, #0
    6836:	e7f4      	b.n	6822 <uarte_nrfx_fifo_fill+0x5e>

00006838 <k_msleep>:
{
    6838:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    683a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    683e:	17c1      	asrs	r1, r0, #31
    6840:	03c9      	lsls	r1, r1, #15
    6842:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    6846:	03c0      	lsls	r0, r0, #15
    6848:	f240 33e7 	movw	r3, #999	; 0x3e7
    684c:	18c0      	adds	r0, r0, r3
    684e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6852:	f04f 0300 	mov.w	r3, #0
    6856:	f141 0100 	adc.w	r1, r1, #0
    685a:	f7f9 fc51 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    685e:	f7fe f98f 	bl	4b80 <z_impl_k_sleep>
}
    6862:	bd08      	pop	{r3, pc}

00006864 <wait_tx_ready>:
{
    6864:	b570      	push	{r4, r5, r6, lr}
    6866:	4606      	mov	r6, r0
    6868:	e013      	b.n	6892 <wait_tx_ready+0x2e>
		if (res) {
    686a:	b17d      	cbz	r5, 688c <wait_tx_ready+0x28>
	__asm__ volatile(
    686c:	f04f 0320 	mov.w	r3, #32
    6870:	f3ef 8411 	mrs	r4, BASEPRI
    6874:	f383 8812 	msr	BASEPRI_MAX, r3
    6878:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    687c:	4630      	mov	r0, r6
    687e:	f7ff fec0 	bl	6602 <is_tx_ready>
    6882:	b998      	cbnz	r0, 68ac <wait_tx_ready+0x48>
	__asm__ volatile(
    6884:	f384 8811 	msr	BASEPRI, r4
    6888:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    688c:	2001      	movs	r0, #1
    688e:	f7ff ffd3 	bl	6838 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    6892:	2464      	movs	r4, #100	; 0x64
    6894:	4630      	mov	r0, r6
    6896:	f7ff feb4 	bl	6602 <is_tx_ready>
    689a:	4605      	mov	r5, r0
    689c:	2800      	cmp	r0, #0
    689e:	d1e4      	bne.n	686a <wait_tx_ready+0x6>
    68a0:	2001      	movs	r0, #1
    68a2:	f000 f967 	bl	6b74 <nrfx_busy_wait>
    68a6:	3c01      	subs	r4, #1
    68a8:	d1f4      	bne.n	6894 <wait_tx_ready+0x30>
    68aa:	e7de      	b.n	686a <wait_tx_ready+0x6>
}
    68ac:	4620      	mov	r0, r4
    68ae:	bd70      	pop	{r4, r5, r6, pc}

000068b0 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    68b0:	b510      	push	{r4, lr}
    68b2:	b082      	sub	sp, #8
    68b4:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    68b6:	aa01      	add	r2, sp, #4
    68b8:	f7ff fdbe 	bl	6438 <pinctrl_lookup_state>
	if (ret < 0) {
    68bc:	2800      	cmp	r0, #0
    68be:	db05      	blt.n	68cc <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    68c0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    68c2:	6822      	ldr	r2, [r4, #0]
    68c4:	7919      	ldrb	r1, [r3, #4]
    68c6:	6818      	ldr	r0, [r3, #0]
    68c8:	f7fb fea6 	bl	2618 <pinctrl_configure_pins>
}
    68cc:	b002      	add	sp, #8
    68ce:	bd10      	pop	{r4, pc}

000068d0 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    68d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68d4:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    68d6:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    68d8:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    68da:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    68de:	2100      	movs	r1, #0
    68e0:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    68e4:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    68e8:	68f8      	ldr	r0, [r7, #12]
    68ea:	f7ff ffe1 	bl	68b0 <pinctrl_apply_state>
	if (err < 0) {
    68ee:	1e05      	subs	r5, r0, #0
    68f0:	db35      	blt.n	695e <uarte_instance_init+0x8e>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
    68f2:	f108 0104 	add.w	r1, r8, #4
    68f6:	4620      	mov	r0, r4
    68f8:	f7ff fe20 	bl	653c <uarte_nrfx_configure>
	if (err) {
    68fc:	4605      	mov	r5, r0
    68fe:	bb70      	cbnz	r0, 695e <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    6900:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    6902:	f013 0f02 	tst.w	r3, #2
    6906:	d12d      	bne.n	6964 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6908:	2308      	movs	r3, #8
    690a:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    690e:	7a3b      	ldrb	r3, [r7, #8]
    6910:	b95b      	cbnz	r3, 692a <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6912:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    6916:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    691a:	f8d8 3018 	ldr.w	r3, [r8, #24]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    691e:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6922:	2301      	movs	r3, #1
    6924:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6928:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    692a:	687b      	ldr	r3, [r7, #4]
    692c:	f013 0f02 	tst.w	r3, #2
    6930:	d103      	bne.n	693a <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    6932:	f44f 7380 	mov.w	r3, #256	; 0x100
    6936:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    693a:	687b      	ldr	r3, [r7, #4]
    693c:	f013 0f10 	tst.w	r3, #16
    6940:	d003      	beq.n	694a <uarte_instance_init+0x7a>
    6942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    6946:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    694a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    694e:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6952:	2300      	movs	r3, #0
    6954:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6958:	2301      	movs	r3, #1
    695a:	60b3      	str	r3, [r6, #8]
    695c:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    695e:	4628      	mov	r0, r5
    6960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    6964:	4641      	mov	r1, r8
    6966:	4630      	mov	r0, r6
    6968:	f7fc f872 	bl	2a50 <endtx_stoptx_ppi_init>
		if (err < 0) {
    696c:	2800      	cmp	r0, #0
    696e:	dacb      	bge.n	6908 <uarte_instance_init+0x38>
			return err;
    6970:	4605      	mov	r5, r0
    6972:	e7f4      	b.n	695e <uarte_instance_init+0x8e>

00006974 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    6974:	b510      	push	{r4, lr}
    6976:	4604      	mov	r4, r0
    6978:	2200      	movs	r2, #0
    697a:	2101      	movs	r1, #1
    697c:	2002      	movs	r0, #2
    697e:	f7ff f96e 	bl	5c5e <z_arm_irq_priority_set>
    6982:	2002      	movs	r0, #2
    6984:	f7ff f961 	bl	5c4a <arch_irq_enable>
    6988:	2101      	movs	r1, #1
    698a:	4620      	mov	r0, r4
    698c:	f7ff ffa0 	bl	68d0 <uarte_instance_init>
    6990:	bd10      	pop	{r4, pc}

00006992 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6992:	b510      	push	{r4, lr}
    6994:	4604      	mov	r4, r0
    6996:	2200      	movs	r2, #0
    6998:	2101      	movs	r1, #1
    699a:	2028      	movs	r0, #40	; 0x28
    699c:	f7ff f95f 	bl	5c5e <z_arm_irq_priority_set>
    69a0:	2028      	movs	r0, #40	; 0x28
    69a2:	f7ff f952 	bl	5c4a <arch_irq_enable>
    69a6:	2101      	movs	r1, #1
    69a8:	4620      	mov	r0, r4
    69aa:	f7ff ff91 	bl	68d0 <uarte_instance_init>
    69ae:	bd10      	pop	{r4, pc}

000069b0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    69b0:	4770      	bx	lr

000069b2 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    69b2:	1a40      	subs	r0, r0, r1
}
    69b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    69b8:	4770      	bx	lr

000069ba <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    69ba:	f100 0350 	add.w	r3, r0, #80	; 0x50
    69be:	009b      	lsls	r3, r3, #2
    69c0:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    69c6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    69ca:	6818      	ldr	r0, [r3, #0]
}
    69cc:	3800      	subs	r0, #0
    69ce:	bf18      	it	ne
    69d0:	2001      	movne	r0, #1
    69d2:	4770      	bx	lr

000069d4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    69d4:	f100 0350 	add.w	r3, r0, #80	; 0x50
    69d8:	009b      	lsls	r3, r3, #2
    69da:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    69dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    69e0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    69e4:	2200      	movs	r2, #0
    69e6:	601a      	str	r2, [r3, #0]
    69e8:	681b      	ldr	r3, [r3, #0]
}
    69ea:	4770      	bx	lr

000069ec <absolute_time_to_cc>:
}
    69ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    69f0:	4770      	bx	lr

000069f2 <full_int_lock>:
	__asm__ volatile(
    69f2:	f04f 0320 	mov.w	r3, #32
    69f6:	f3ef 8011 	mrs	r0, BASEPRI
    69fa:	f383 8812 	msr	BASEPRI_MAX, r3
    69fe:	f3bf 8f6f 	isb	sy
}
    6a02:	4770      	bx	lr

00006a04 <full_int_unlock>:
	__asm__ volatile(
    6a04:	f380 8811 	msr	BASEPRI, r0
    6a08:	f3bf 8f6f 	isb	sy
}
    6a0c:	4770      	bx	lr

00006a0e <compare_set>:
{
    6a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a10:	b083      	sub	sp, #12
    6a12:	4604      	mov	r4, r0
    6a14:	4617      	mov	r7, r2
    6a16:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    6a18:	f7fc f8a4 	bl	2b64 <compare_int_lock>
    6a1c:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    6a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a20:	9301      	str	r3, [sp, #4]
    6a22:	9b08      	ldr	r3, [sp, #32]
    6a24:	9300      	str	r3, [sp, #0]
    6a26:	463a      	mov	r2, r7
    6a28:	462b      	mov	r3, r5
    6a2a:	4620      	mov	r0, r4
    6a2c:	f7fc f968 	bl	2d00 <compare_set_nolocks>
    6a30:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    6a32:	4631      	mov	r1, r6
    6a34:	4620      	mov	r0, r4
    6a36:	f7fc f8eb 	bl	2c10 <compare_int_unlock>
}
    6a3a:	4628      	mov	r0, r5
    6a3c:	b003      	add	sp, #12
    6a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006a40 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6a40:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6a42:	2000      	movs	r0, #0
    6a44:	f7ff fac6 	bl	5fd4 <sys_arch_reboot>

00006a48 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(void)
{
    6a48:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6a4a:	f7fe fa5b 	bl	4f04 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    6a4e:	bd08      	pop	{r3, pc}

00006a50 <hw_cc3xx_init>:

static int hw_cc3xx_init(void)
{
    6a50:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6a52:	f7fa fd53 	bl	14fc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6a56:	f7fa fe4d 	bl	16f4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
    6a5a:	f7ff fff5 	bl	6a48 <hw_cc3xx_init_internal>
	return res;
}
    6a5e:	bd08      	pop	{r3, pc}

00006a60 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6a60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6a64:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    6a68:	2b08      	cmp	r3, #8
    6a6a:	d001      	beq.n	6a70 <nrf52_errata_36+0x10>
        return false;
    6a6c:	2000      	movs	r0, #0
    6a6e:	4770      	bx	lr
                        return true;
    6a70:	2001      	movs	r0, #1
}
    6a72:	4770      	bx	lr

00006a74 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6a74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6a78:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    6a7c:	2b08      	cmp	r3, #8
    6a7e:	d001      	beq.n	6a84 <nrf52_errata_66+0x10>
        return false;
    6a80:	2000      	movs	r0, #0
    6a82:	4770      	bx	lr
                        return true;
    6a84:	2001      	movs	r0, #1
}
    6a86:	4770      	bx	lr

00006a88 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6a88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6a8c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6a90:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    6a94:	2a08      	cmp	r2, #8
    6a96:	d001      	beq.n	6a9c <nrf52_errata_98+0x14>
        return false;
    6a98:	2000      	movs	r0, #0
    6a9a:	4770      	bx	lr
                switch(var2)
    6a9c:	2b00      	cmp	r3, #0
    6a9e:	d804      	bhi.n	6aaa <nrf52_errata_98+0x22>
    6aa0:	e8df f003 	tbb	[pc, r3]
    6aa4:	01          	.byte	0x01
    6aa5:	00          	.byte	0x00
    6aa6:	2001      	movs	r0, #1
    6aa8:	4770      	bx	lr
                        return false;
    6aaa:	2000      	movs	r0, #0
}
    6aac:	4770      	bx	lr

00006aae <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6aae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6ab2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6ab6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    6aba:	2a08      	cmp	r2, #8
    6abc:	d001      	beq.n	6ac2 <nrf52_errata_103+0x14>
        return false;
    6abe:	2000      	movs	r0, #0
    6ac0:	4770      	bx	lr
                switch(var2)
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	d804      	bhi.n	6ad0 <nrf52_errata_103+0x22>
    6ac6:	e8df f003 	tbb	[pc, r3]
    6aca:	01          	.byte	0x01
    6acb:	00          	.byte	0x00
    6acc:	2001      	movs	r0, #1
    6ace:	4770      	bx	lr
                        return false;
    6ad0:	2000      	movs	r0, #0
}
    6ad2:	4770      	bx	lr

00006ad4 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6ad4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6ad8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6adc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    6ae0:	2a08      	cmp	r2, #8
    6ae2:	d001      	beq.n	6ae8 <nrf52_errata_115+0x14>
        return false;
    6ae4:	2000      	movs	r0, #0
    6ae6:	4770      	bx	lr
                switch(var2)
    6ae8:	2b00      	cmp	r3, #0
    6aea:	d804      	bhi.n	6af6 <nrf52_errata_115+0x22>
    6aec:	e8df f003 	tbb	[pc, r3]
    6af0:	01          	.byte	0x01
    6af1:	00          	.byte	0x00
    6af2:	2001      	movs	r0, #1
    6af4:	4770      	bx	lr
                        return false;
    6af6:	2000      	movs	r0, #0
}
    6af8:	4770      	bx	lr

00006afa <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6afa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6afe:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6b02:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    6b06:	2a08      	cmp	r2, #8
    6b08:	d001      	beq.n	6b0e <nrf52_errata_120+0x14>
        return false;
    6b0a:	2000      	movs	r0, #0
    6b0c:	4770      	bx	lr
                switch(var2)
    6b0e:	2b00      	cmp	r3, #0
    6b10:	d804      	bhi.n	6b1c <nrf52_errata_120+0x22>
    6b12:	e8df f003 	tbb	[pc, r3]
    6b16:	01          	.byte	0x01
    6b17:	00          	.byte	0x00
    6b18:	2001      	movs	r0, #1
    6b1a:	4770      	bx	lr
                        return false;
    6b1c:	2000      	movs	r0, #0
}
    6b1e:	4770      	bx	lr

00006b20 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6b20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6b24:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    6b28:	2b08      	cmp	r3, #8
    6b2a:	d001      	beq.n	6b30 <nrf52_errata_136+0x10>
        return false;
    6b2c:	2000      	movs	r0, #0
    6b2e:	4770      	bx	lr
                        return true;
    6b30:	2001      	movs	r0, #1
}
    6b32:	4770      	bx	lr

00006b34 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6b34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6b38:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6b3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    6b40:	2a08      	cmp	r2, #8
    6b42:	d001      	beq.n	6b48 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    6b44:	2000      	movs	r0, #0
    6b46:	4770      	bx	lr
                switch(var2)
    6b48:	2b04      	cmp	r3, #4
    6b4a:	d801      	bhi.n	6b50 <nrf52_configuration_249+0x1c>
    6b4c:	2000      	movs	r0, #0
    6b4e:	4770      	bx	lr
                        return true;
    6b50:	2001      	movs	r0, #1
    #endif
}
    6b52:	4770      	bx	lr

00006b54 <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
    6b54:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    6b56:	f7ff ffed 	bl	6b34 <nrf52_configuration_249>
    6b5a:	b138      	cbz	r0, 6b6c <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    6b5c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6b60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    6b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b68:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
    6b6c:	bd08      	pop	{r3, pc}

00006b6e <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    6b6e:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    6b70:	4780      	blx	r0
}
    6b72:	bd08      	pop	{r3, pc}

00006b74 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    6b74:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    6b76:	f000 fb65 	bl	7244 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    6b7a:	bd08      	pop	{r3, pc}

00006b7c <nrf_clock_is_running>:
    switch (domain)
    6b7c:	b119      	cbz	r1, 6b86 <nrf_clock_is_running+0xa>
    6b7e:	2901      	cmp	r1, #1
    6b80:	d00e      	beq.n	6ba0 <nrf_clock_is_running+0x24>
    6b82:	2000      	movs	r0, #0
    6b84:	4770      	bx	lr
            if (p_clk_src != NULL)
    6b86:	b122      	cbz	r2, 6b92 <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6b88:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6b8c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6b90:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6b92:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6b96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6b9a:	d10e      	bne.n	6bba <nrf_clock_is_running+0x3e>
    return false;
    6b9c:	2000      	movs	r0, #0
    6b9e:	4770      	bx	lr
            if (p_clk_src != NULL)
    6ba0:	b122      	cbz	r2, 6bac <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6ba2:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6ba6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6baa:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6bac:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6bb0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6bb4:	d103      	bne.n	6bbe <nrf_clock_is_running+0x42>
    return false;
    6bb6:	2000      	movs	r0, #0
    6bb8:	4770      	bx	lr
                return true;
    6bba:	2001      	movs	r0, #1
    6bbc:	4770      	bx	lr
                return true;
    6bbe:	2001      	movs	r0, #1
}
    6bc0:	4770      	bx	lr

00006bc2 <clock_initial_lfclksrc_get>:
}
    6bc2:	2000      	movs	r0, #0
    6bc4:	4770      	bx	lr

00006bc6 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    6bc6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6bc8:	2000      	movs	r0, #0
    6bca:	f7fa fdfb 	bl	17c4 <arch_irq_is_enabled>
    6bce:	b100      	cbz	r0, 6bd2 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    6bd0:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6bd2:	f7ff f83a 	bl	5c4a <arch_irq_enable>
}
    6bd6:	e7fb      	b.n	6bd0 <nrfx_power_clock_irq_init+0xa>

00006bd8 <clock_lfclksrc_tweak>:
{
    6bd8:	b538      	push	{r3, r4, r5, lr}
    6bda:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    6bdc:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6bde:	2b01      	cmp	r3, #1
    6be0:	d002      	beq.n	6be8 <clock_lfclksrc_tweak+0x10>
    6be2:	b933      	cbnz	r3, 6bf2 <clock_lfclksrc_tweak+0x1a>
    6be4:	2301      	movs	r3, #1
    6be6:	e000      	b.n	6bea <clock_lfclksrc_tweak+0x12>
    6be8:	2301      	movs	r3, #1
    if (!is_correct_clk)
    6bea:	461d      	mov	r5, r3
    6bec:	b11b      	cbz	r3, 6bf6 <clock_lfclksrc_tweak+0x1e>
}
    6bee:	4628      	mov	r0, r5
    6bf0:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6bf2:	2300      	movs	r3, #0
    6bf4:	e7f9      	b.n	6bea <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6bf6:	2000      	movs	r0, #0
    6bf8:	f7fc fafa 	bl	31f0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6bfc:	f7ff ffe1 	bl	6bc2 <clock_initial_lfclksrc_get>
    6c00:	6020      	str	r0, [r4, #0]
    6c02:	e7f4      	b.n	6bee <clock_lfclksrc_tweak+0x16>

00006c04 <nrfx_clock_enable>:
{
    6c04:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    6c06:	f7ff ffde 	bl	6bc6 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    6c0a:	f7ff ffda 	bl	6bc2 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c12:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
    6c16:	bd08      	pop	{r3, pc}

00006c18 <nrfx_clock_start>:
    switch (domain)
    6c18:	b110      	cbz	r0, 6c20 <nrfx_clock_start+0x8>
    6c1a:	2801      	cmp	r0, #1
    6c1c:	d040      	beq.n	6ca0 <nrfx_clock_start+0x88>
    6c1e:	4770      	bx	lr
{
    6c20:	b500      	push	{lr}
    6c22:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6c24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6c28:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6c2c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6c30:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6c32:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6c36:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6c3a:	d11b      	bne.n	6c74 <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c40:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6c44:	f013 0f01 	tst.w	r3, #1
    6c48:	d118      	bne.n	6c7c <nrfx_clock_start+0x64>
                    lfclksrc = clock_initial_lfclksrc_get();
    6c4a:	f7ff ffba 	bl	6bc2 <clock_initial_lfclksrc_get>
    6c4e:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    6c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c54:	9a01      	ldr	r2, [sp, #4]
    6c56:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c5a:	2200      	movs	r2, #0
    6c5c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6c60:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    6c64:	2202      	movs	r2, #2
    6c66:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c6a:	2201      	movs	r2, #1
    6c6c:	609a      	str	r2, [r3, #8]
}
    6c6e:	b003      	add	sp, #12
    6c70:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    6c74:	a801      	add	r0, sp, #4
    6c76:	f7ff ffaf 	bl	6bd8 <clock_lfclksrc_tweak>
    6c7a:	e7e9      	b.n	6c50 <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c80:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6c84:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    6c88:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    6c8a:	a801      	add	r0, sp, #4
    6c8c:	f7ff ffa4 	bl	6bd8 <clock_lfclksrc_tweak>
    6c90:	2800      	cmp	r0, #0
    6c92:	d0dd      	beq.n	6c50 <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
    6c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c98:	2202      	movs	r2, #2
    6c9a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    6c9e:	e7e6      	b.n	6c6e <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6ca4:	2200      	movs	r2, #0
    6ca6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6caa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6cae:	2201      	movs	r2, #1
    6cb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6cb4:	601a      	str	r2, [r3, #0]
    6cb6:	4770      	bx	lr

00006cb8 <nrfx_clock_stop>:
{
    6cb8:	b508      	push	{r3, lr}
    clock_stop(domain);
    6cba:	f7fc fa99 	bl	31f0 <clock_stop>
}
    6cbe:	bd08      	pop	{r3, pc}

00006cc0 <nrf_gpiote_event_configure>:
{
    6cc0:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6cc2:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    6cc6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6cca:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    6cce:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    6cd2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6cd6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6cda:	0212      	lsls	r2, r2, #8
    6cdc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    6ce0:	041b      	lsls	r3, r3, #16
    6ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6ce6:	431a      	orrs	r2, r3
    6ce8:	4314      	orrs	r4, r2
    6cea:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    6cee:	bc10      	pop	{r4}
    6cf0:	4770      	bx	lr

00006cf2 <nrf_gpiote_task_configure>:
{
    6cf2:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6cf4:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    6cf8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6cfc:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    6d00:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    6d04:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6d08:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6d0c:	0212      	lsls	r2, r2, #8
    6d0e:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6d12:	041b      	lsls	r3, r3, #16
    6d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6d18:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6d1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6d1e:	051b      	lsls	r3, r3, #20
    6d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6d24:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6d26:	4314      	orrs	r4, r2
    6d28:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    6d2c:	bc10      	pop	{r4}
    6d2e:	4770      	bx	lr

00006d30 <nrf_gpio_cfg_sense_set>:
{
    6d30:	b500      	push	{lr}
    6d32:	b085      	sub	sp, #20
    6d34:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6d38:	f10d 030f 	add.w	r3, sp, #15
    6d3c:	9301      	str	r3, [sp, #4]
    6d3e:	2100      	movs	r1, #0
    6d40:	9100      	str	r1, [sp, #0]
    6d42:	460b      	mov	r3, r1
    6d44:	460a      	mov	r2, r1
    6d46:	f7fc faeb 	bl	3320 <nrf_gpio_reconfigure>
}
    6d4a:	b005      	add	sp, #20
    6d4c:	f85d fb04 	ldr.w	pc, [sp], #4

00006d50 <pin_is_task_output>:
{
    6d50:	b510      	push	{r4, lr}
    6d52:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6d54:	f7fc fb82 	bl	345c <pin_is_output>
    6d58:	b128      	cbz	r0, 6d66 <pin_is_task_output+0x16>
    6d5a:	4620      	mov	r0, r4
    6d5c:	f7fc fb68 	bl	3430 <pin_in_use_by_te>
    6d60:	b118      	cbz	r0, 6d6a <pin_is_task_output+0x1a>
    6d62:	2001      	movs	r0, #1
    6d64:	e000      	b.n	6d68 <pin_is_task_output+0x18>
    6d66:	2000      	movs	r0, #0
}
    6d68:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6d6a:	2000      	movs	r0, #0
    6d6c:	e7fc      	b.n	6d68 <pin_is_task_output+0x18>

00006d6e <pin_is_input>:
{
    6d6e:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    6d70:	f7fc fb74 	bl	345c <pin_is_output>
    6d74:	f080 0001 	eor.w	r0, r0, #1
}
    6d78:	b2c0      	uxtb	r0, r0
    6d7a:	bd08      	pop	{r3, pc}

00006d7c <gpiote_polarity_to_trigger>:
}
    6d7c:	4770      	bx	lr

00006d7e <gpiote_trigger_to_polarity>:
}
    6d7e:	4770      	bx	lr

00006d80 <is_level>:
}
    6d80:	2803      	cmp	r0, #3
    6d82:	bf94      	ite	ls
    6d84:	2000      	movls	r0, #0
    6d86:	2001      	movhi	r0, #1
    6d88:	4770      	bx	lr

00006d8a <latch_pending_read_and_check>:
{
    6d8a:	b510      	push	{r4, lr}
    6d8c:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    6d8e:	4602      	mov	r2, r0
    6d90:	2102      	movs	r1, #2
    6d92:	2000      	movs	r0, #0
    6d94:	f7fc fb20 	bl	33d8 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6d98:	2300      	movs	r3, #0
    6d9a:	2b01      	cmp	r3, #1
    6d9c:	d804      	bhi.n	6da8 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    6d9e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    6da2:	b91a      	cbnz	r2, 6dac <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6da4:	3301      	adds	r3, #1
    6da6:	e7f8      	b.n	6d9a <latch_pending_read_and_check+0x10>
    return false;
    6da8:	2000      	movs	r0, #0
}
    6daa:	bd10      	pop	{r4, pc}
            return true;
    6dac:	2001      	movs	r0, #1
    6dae:	e7fc      	b.n	6daa <latch_pending_read_and_check+0x20>

00006db0 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    6db0:	b508      	push	{r3, lr}
  _DoInit();
    6db2:	f7fc ff1d 	bl	3bf0 <_DoInit>
}
    6db6:	bd08      	pop	{r3, pc}

00006db8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    6db8:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    6dba:	f7ff fff9 	bl	6db0 <SEGGER_RTT_Init>

	return 0;
}
    6dbe:	2000      	movs	r0, #0
    6dc0:	bd08      	pop	{r3, pc}

00006dc2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6dc2:	b160      	cbz	r0, 6dde <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6dc4:	68c3      	ldr	r3, [r0, #12]
    6dc6:	785a      	ldrb	r2, [r3, #1]
    6dc8:	f012 0f01 	tst.w	r2, #1
    6dcc:	d003      	beq.n	6dd6 <z_device_is_ready+0x14>
    6dce:	781b      	ldrb	r3, [r3, #0]
    6dd0:	b11b      	cbz	r3, 6dda <z_device_is_ready+0x18>
    6dd2:	2000      	movs	r0, #0
    6dd4:	4770      	bx	lr
    6dd6:	2000      	movs	r0, #0
    6dd8:	4770      	bx	lr
    6dda:	2001      	movs	r0, #1
    6ddc:	4770      	bx	lr
		return false;
    6dde:	2000      	movs	r0, #0
}
    6de0:	4770      	bx	lr

00006de2 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6de4:	4605      	mov	r5, r0
    6de6:	460e      	mov	r6, r1
	__asm__ volatile(
    6de8:	f04f 0320 	mov.w	r3, #32
    6dec:	f3ef 8711 	mrs	r7, BASEPRI
    6df0:	f383 8812 	msr	BASEPRI_MAX, r3
    6df4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6df8:	f7fd feec 	bl	4bd4 <z_impl_z_current_get>
    6dfc:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    6dfe:	4631      	mov	r1, r6
    6e00:	4628      	mov	r0, r5
    6e02:	f7ff fe1d 	bl	6a40 <k_sys_fatal_error_handler>
	__asm__ volatile(
    6e06:	f387 8811 	msr	BASEPRI, r7
    6e0a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6e0e:	4620      	mov	r0, r4
    6e10:	f7fb f808 	bl	1e24 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006e16 <z_early_memset>:
{
    6e16:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    6e18:	f7ff f89e 	bl	5f58 <memset>
}
    6e1c:	bd08      	pop	{r3, pc}

00006e1e <z_early_memcpy>:
{
    6e1e:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    6e20:	f7ff f86b 	bl	5efa <memcpy>
}
    6e24:	bd08      	pop	{r3, pc}

00006e26 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6e26:	68c2      	ldr	r2, [r0, #12]
    6e28:	6903      	ldr	r3, [r0, #16]
    6e2a:	431a      	orrs	r2, r3
    6e2c:	f012 0203 	ands.w	r2, r2, #3
    6e30:	d10d      	bne.n	6e4e <create_free_list+0x28>
	slab->free_list = NULL;
    6e32:	2100      	movs	r1, #0
    6e34:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6e36:	e005      	b.n	6e44 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    6e38:	6941      	ldr	r1, [r0, #20]
    6e3a:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    6e3c:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    6e3e:	68c1      	ldr	r1, [r0, #12]
    6e40:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    6e42:	3201      	adds	r2, #1
    6e44:	6881      	ldr	r1, [r0, #8]
    6e46:	4291      	cmp	r1, r2
    6e48:	d8f6      	bhi.n	6e38 <create_free_list+0x12>
	return 0;
    6e4a:	2000      	movs	r0, #0
    6e4c:	4770      	bx	lr
		return -EINVAL;
    6e4e:	f06f 0015 	mvn.w	r0, #21
}
    6e52:	4770      	bx	lr

00006e54 <k_mem_slab_init>:
{
    6e54:	b510      	push	{r4, lr}
    6e56:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    6e58:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    6e5a:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    6e5c:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    6e5e:	2300      	movs	r3, #0
    6e60:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    6e62:	f7ff ffe0 	bl	6e26 <create_free_list>
	if (rc < 0) {
    6e66:	2800      	cmp	r0, #0
    6e68:	db01      	blt.n	6e6e <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    6e6a:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    6e6c:	6064      	str	r4, [r4, #4]
}
    6e6e:	bd10      	pop	{r4, pc}

00006e70 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e74:	4604      	mov	r4, r0
    6e76:	460d      	mov	r5, r1
	__asm__ volatile(
    6e78:	f04f 0320 	mov.w	r3, #32
    6e7c:	f3ef 8611 	mrs	r6, BASEPRI
    6e80:	f383 8812 	msr	BASEPRI_MAX, r3
    6e84:	f3bf 8f6f 	isb	sy
    6e88:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6e8a:	6943      	ldr	r3, [r0, #20]
    6e8c:	b16b      	cbz	r3, 6eaa <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    6e8e:	682b      	ldr	r3, [r5, #0]
    6e90:	6962      	ldr	r2, [r4, #20]
    6e92:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6e94:	682b      	ldr	r3, [r5, #0]
    6e96:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    6e98:	69a3      	ldr	r3, [r4, #24]
    6e9a:	3b01      	subs	r3, #1
    6e9c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6e9e:	f387 8811 	msr	BASEPRI, r7
    6ea2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6eaa:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6eae:	f000 f936 	bl	711e <z_unpend_first_thread>
		if (pending_thread != NULL) {
    6eb2:	2800      	cmp	r0, #0
    6eb4:	d0eb      	beq.n	6e8e <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6eb6:	682a      	ldr	r2, [r5, #0]
    6eb8:	2100      	movs	r1, #0
    6eba:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6ebe:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    6ec0:	f000 f895 	bl	6fee <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6ec4:	4631      	mov	r1, r6
    6ec6:	4640      	mov	r0, r8
    6ec8:	f7fd fb6c 	bl	45a4 <z_reschedule>
			return;
    6ecc:	e7eb      	b.n	6ea6 <k_mem_slab_free+0x36>

00006ece <setup_thread_stack>:
{
    6ece:	b410      	push	{r4}
    6ed0:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6ed2:	3207      	adds	r2, #7
    6ed4:	f022 0207 	bic.w	r2, r2, #7
    6ed8:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6edc:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    6ee0:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    6ee4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    6ee8:	2200      	movs	r2, #0
    6eea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
    6eee:	4408      	add	r0, r1
    6ef0:	bc10      	pop	{r4}
    6ef2:	4770      	bx	lr

00006ef4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6ef4:	f3ef 8005 	mrs	r0, IPSR
}
    6ef8:	3800      	subs	r0, #0
    6efa:	bf18      	it	ne
    6efc:	2001      	movne	r0, #1
    6efe:	4770      	bx	lr

00006f00 <z_impl_k_thread_start>:
{
    6f00:	b508      	push	{r3, lr}
	z_sched_start(thread);
    6f02:	f7fd fc63 	bl	47cc <z_sched_start>
}
    6f06:	bd08      	pop	{r3, pc}

00006f08 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    6f08:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    6f0a:	2400      	movs	r4, #0
    6f0c:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    6f0e:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6f10:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    6f12:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    6f14:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    6f16:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    6f18:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    6f1a:	bc10      	pop	{r4}
    6f1c:	4770      	bx	lr

00006f1e <z_pm_save_idle_exit>:
{
    6f1e:	b508      	push	{r3, lr}
	pm_system_resume();
    6f20:	f7fa f9f2 	bl	1308 <pm_system_resume>
	sys_clock_idle_exit();
    6f24:	f7ff fd44 	bl	69b0 <sys_clock_idle_exit>
}
    6f28:	bd08      	pop	{r3, pc}

00006f2a <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    6f2a:	4288      	cmp	r0, r1
    6f2c:	da00      	bge.n	6f30 <new_prio_for_inheritance+0x6>
    6f2e:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    6f30:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    6f34:	db01      	blt.n	6f3a <new_prio_for_inheritance+0x10>
    6f36:	4608      	mov	r0, r1
    6f38:	4770      	bx	lr
    6f3a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    6f3e:	4770      	bx	lr

00006f40 <adjust_owner_prio>:
{
    6f40:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    6f42:	6880      	ldr	r0, [r0, #8]
    6f44:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6f48:	428b      	cmp	r3, r1
    6f4a:	d101      	bne.n	6f50 <adjust_owner_prio+0x10>
	return false;
    6f4c:	2000      	movs	r0, #0
}
    6f4e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    6f50:	f7fd fc92 	bl	4878 <z_set_prio>
    6f54:	e7fb      	b.n	6f4e <adjust_owner_prio+0xe>

00006f56 <z_impl_k_mutex_init>:
{
    6f56:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6f58:	2000      	movs	r0, #0
    6f5a:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    6f5c:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    6f5e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    6f60:	605b      	str	r3, [r3, #4]
}
    6f62:	4770      	bx	lr

00006f64 <thread_active_elsewhere>:
}
    6f64:	2000      	movs	r0, #0
    6f66:	4770      	bx	lr

00006f68 <pended_on_thread>:
}
    6f68:	6880      	ldr	r0, [r0, #8]
    6f6a:	4770      	bx	lr

00006f6c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    6f6c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    6f70:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    6f74:	4283      	cmp	r3, r0
    6f76:	d001      	beq.n	6f7c <z_sched_prio_cmp+0x10>
		return b2 - b1;
    6f78:	1ac0      	subs	r0, r0, r3
    6f7a:	4770      	bx	lr
	return 0;
    6f7c:	2000      	movs	r0, #0
}
    6f7e:	4770      	bx	lr

00006f80 <z_reschedule_irqlock>:
{
    6f80:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6f82:	4603      	mov	r3, r0
    6f84:	b928      	cbnz	r0, 6f92 <z_reschedule_irqlock+0x12>
    6f86:	f3ef 8205 	mrs	r2, IPSR
    6f8a:	b912      	cbnz	r2, 6f92 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    6f8c:	f7fa fc48 	bl	1820 <arch_swap>
	return ret;
    6f90:	e003      	b.n	6f9a <z_reschedule_irqlock+0x1a>
    6f92:	f383 8811 	msr	BASEPRI, r3
    6f96:	f3bf 8f6f 	isb	sy
}
    6f9a:	bd08      	pop	{r3, pc}

00006f9c <z_reschedule_unlocked>:
{
    6f9c:	b508      	push	{r3, lr}
	__asm__ volatile(
    6f9e:	f04f 0320 	mov.w	r3, #32
    6fa2:	f3ef 8011 	mrs	r0, BASEPRI
    6fa6:	f383 8812 	msr	BASEPRI_MAX, r3
    6faa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6fae:	f7ff ffe7 	bl	6f80 <z_reschedule_irqlock>
}
    6fb2:	bd08      	pop	{r3, pc}

00006fb4 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6fb4:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    6fb6:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    6fb8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6fba:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6fbc:	2300      	movs	r3, #0
    6fbe:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    6fc0:	604b      	str	r3, [r1, #4]
}
    6fc2:	4770      	bx	lr

00006fc4 <unpend_thread_no_timeout>:
{
    6fc4:	b510      	push	{r4, lr}
    6fc6:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6fc8:	f7ff ffce 	bl	6f68 <pended_on_thread>
    6fcc:	4621      	mov	r1, r4
    6fce:	f7ff fff1 	bl	6fb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6fd2:	7b63      	ldrb	r3, [r4, #13]
    6fd4:	f023 0302 	bic.w	r3, r3, #2
    6fd8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6fda:	2300      	movs	r3, #0
    6fdc:	60a3      	str	r3, [r4, #8]
}
    6fde:	bd10      	pop	{r4, pc}

00006fe0 <z_priq_dumb_best>:
{
    6fe0:	4603      	mov	r3, r0
	return list->head == list;
    6fe2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6fe4:	4283      	cmp	r3, r0
    6fe6:	d000      	beq.n	6fea <z_priq_dumb_best+0xa>
}
    6fe8:	4770      	bx	lr
	struct k_thread *thread = NULL;
    6fea:	2000      	movs	r0, #0
	return thread;
    6fec:	e7fc      	b.n	6fe8 <z_priq_dumb_best+0x8>

00006fee <z_ready_thread>:
{
    6fee:	b538      	push	{r3, r4, r5, lr}
    6ff0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    6ff2:	2300      	movs	r3, #0
    6ff4:	f04f 0220 	mov.w	r2, #32
    6ff8:	f3ef 8511 	mrs	r5, BASEPRI
    6ffc:	f382 8812 	msr	BASEPRI_MAX, r2
    7000:	f3bf 8f6f 	isb	sy
    7004:	e004      	b.n	7010 <z_ready_thread+0x22>
	__asm__ volatile(
    7006:	f385 8811 	msr	BASEPRI, r5
    700a:	f3bf 8f6f 	isb	sy
    700e:	2301      	movs	r3, #1
    7010:	b943      	cbnz	r3, 7024 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    7012:	4620      	mov	r0, r4
    7014:	f7ff ffa6 	bl	6f64 <thread_active_elsewhere>
    7018:	2800      	cmp	r0, #0
    701a:	d1f4      	bne.n	7006 <z_ready_thread+0x18>
			ready_thread(thread);
    701c:	4620      	mov	r0, r4
    701e:	f7fd fb99 	bl	4754 <ready_thread>
    7022:	e7f0      	b.n	7006 <z_ready_thread+0x18>
}
    7024:	bd38      	pop	{r3, r4, r5, pc}

00007026 <z_sched_wake_thread>:
{
    7026:	b570      	push	{r4, r5, r6, lr}
    7028:	4604      	mov	r4, r0
    702a:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    702c:	2300      	movs	r3, #0
	__asm__ volatile(
    702e:	f04f 0220 	mov.w	r2, #32
    7032:	f3ef 8511 	mrs	r5, BASEPRI
    7036:	f382 8812 	msr	BASEPRI_MAX, r2
    703a:	f3bf 8f6f 	isb	sy
    703e:	e007      	b.n	7050 <z_sched_wake_thread+0x2a>
			ready_thread(thread);
    7040:	4620      	mov	r0, r4
    7042:	f7fd fb87 	bl	4754 <ready_thread>
	__asm__ volatile(
    7046:	f385 8811 	msr	BASEPRI, r5
    704a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    704e:	2301      	movs	r3, #1
    7050:	b993      	cbnz	r3, 7078 <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    7052:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
    7054:	f013 0f28 	tst.w	r3, #40	; 0x28
    7058:	d1f5      	bne.n	7046 <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
    705a:	68a3      	ldr	r3, [r4, #8]
    705c:	b113      	cbz	r3, 7064 <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
    705e:	4620      	mov	r0, r4
    7060:	f7ff ffb0 	bl	6fc4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7064:	7b63      	ldrb	r3, [r4, #13]
    7066:	f023 0204 	bic.w	r2, r3, #4
    706a:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
    706c:	2e00      	cmp	r6, #0
    706e:	d0e7      	beq.n	7040 <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7070:	f023 0314 	bic.w	r3, r3, #20
    7074:	7363      	strb	r3, [r4, #13]
}
    7076:	e7e3      	b.n	7040 <z_sched_wake_thread+0x1a>
}
    7078:	bd70      	pop	{r4, r5, r6, pc}

0000707a <z_thread_timeout>:
{
    707a:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
    707c:	2101      	movs	r1, #1
    707e:	3818      	subs	r0, #24
    7080:	f7ff ffd1 	bl	7026 <z_sched_wake_thread>
}
    7084:	bd08      	pop	{r3, pc}

00007086 <unpend_all>:
{
    7086:	b538      	push	{r3, r4, r5, lr}
    7088:	4605      	mov	r5, r0
	return list->head == list;
    708a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    708c:	42a5      	cmp	r5, r4
    708e:	d00e      	beq.n	70ae <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7090:	b16c      	cbz	r4, 70ae <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    7092:	4620      	mov	r0, r4
    7094:	f7ff ff96 	bl	6fc4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    7098:	f104 0018 	add.w	r0, r4, #24
    709c:	f000 f899 	bl	71d2 <z_abort_timeout>
    70a0:	2300      	movs	r3, #0
    70a2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    70a6:	4620      	mov	r0, r4
    70a8:	f7fd fb54 	bl	4754 <ready_thread>
    70ac:	e7ed      	b.n	708a <unpend_all+0x4>
}
    70ae:	bd38      	pop	{r3, r4, r5, pc}

000070b0 <add_to_waitq_locked>:
{
    70b0:	b570      	push	{r4, r5, r6, lr}
    70b2:	4605      	mov	r5, r0
    70b4:	460e      	mov	r6, r1
	unready_thread(thread);
    70b6:	f7fd fba7 	bl	4808 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    70ba:	7b6b      	ldrb	r3, [r5, #13]
    70bc:	f043 0302 	orr.w	r3, r3, #2
    70c0:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    70c2:	b1fe      	cbz	r6, 7104 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    70c4:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    70c6:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    70c8:	42a6      	cmp	r6, r4
    70ca:	d108      	bne.n	70de <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70cc:	2400      	movs	r4, #0
    70ce:	e006      	b.n	70de <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    70d0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    70d2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    70d4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    70d6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    70d8:	6065      	str	r5, [r4, #4]
}
    70da:	e013      	b.n	7104 <add_to_waitq_locked+0x54>
    70dc:	2400      	movs	r4, #0
    70de:	b164      	cbz	r4, 70fa <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    70e0:	4621      	mov	r1, r4
    70e2:	4628      	mov	r0, r5
    70e4:	f7ff ff42 	bl	6f6c <z_sched_prio_cmp>
    70e8:	2800      	cmp	r0, #0
    70ea:	dcf1      	bgt.n	70d0 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    70ec:	2c00      	cmp	r4, #0
    70ee:	d0f6      	beq.n	70de <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    70f0:	6873      	ldr	r3, [r6, #4]
    70f2:	429c      	cmp	r4, r3
    70f4:	d0f2      	beq.n	70dc <add_to_waitq_locked+0x2c>
    70f6:	6824      	ldr	r4, [r4, #0]
    70f8:	e7f1      	b.n	70de <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    70fa:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    70fc:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    70fe:	606b      	str	r3, [r5, #4]
	tail->next = node;
    7100:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7102:	6075      	str	r5, [r6, #4]
}
    7104:	bd70      	pop	{r4, r5, r6, pc}

00007106 <pend_locked>:
{
    7106:	b570      	push	{r4, r5, r6, lr}
    7108:	4604      	mov	r4, r0
    710a:	4616      	mov	r6, r2
    710c:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    710e:	f7ff ffcf 	bl	70b0 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    7112:	4632      	mov	r2, r6
    7114:	462b      	mov	r3, r5
    7116:	4620      	mov	r0, r4
    7118:	f7fd fa0c 	bl	4534 <add_thread_timeout>
}
    711c:	bd70      	pop	{r4, r5, r6, pc}

0000711e <z_unpend_first_thread>:
{
    711e:	b570      	push	{r4, r5, r6, lr}
    7120:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    7122:	2300      	movs	r3, #0
	__asm__ volatile(
    7124:	f04f 0220 	mov.w	r2, #32
    7128:	f3ef 8511 	mrs	r5, BASEPRI
    712c:	f382 8812 	msr	BASEPRI_MAX, r2
    7130:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    7134:	461c      	mov	r4, r3
    7136:	e004      	b.n	7142 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    7138:	f385 8811 	msr	BASEPRI, r5
    713c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7140:	2301      	movs	r3, #1
    7142:	b963      	cbnz	r3, 715e <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    7144:	4630      	mov	r0, r6
    7146:	f7ff ff4b 	bl	6fe0 <z_priq_dumb_best>
		if (thread != NULL) {
    714a:	4604      	mov	r4, r0
    714c:	2800      	cmp	r0, #0
    714e:	d0f3      	beq.n	7138 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    7150:	f7ff ff38 	bl	6fc4 <unpend_thread_no_timeout>
    7154:	f104 0018 	add.w	r0, r4, #24
    7158:	f000 f83b 	bl	71d2 <z_abort_timeout>
    715c:	e7ec      	b.n	7138 <z_unpend_first_thread+0x1a>
}
    715e:	4620      	mov	r0, r4
    7160:	bd70      	pop	{r4, r5, r6, pc}

00007162 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    7162:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    7164:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    7166:	6083      	str	r3, [r0, #8]
}
    7168:	4770      	bx	lr

0000716a <remove_timeout>:
{
    716a:	b510      	push	{r4, lr}
    716c:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    716e:	f7fd fd93 	bl	4c98 <next>
    7172:	b148      	cbz	r0, 7188 <remove_timeout+0x1e>
    7174:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    7176:	6903      	ldr	r3, [r0, #16]
    7178:	6941      	ldr	r1, [r0, #20]
    717a:	6920      	ldr	r0, [r4, #16]
    717c:	181b      	adds	r3, r3, r0
    717e:	6960      	ldr	r0, [r4, #20]
    7180:	eb41 0100 	adc.w	r1, r1, r0
    7184:	6113      	str	r3, [r2, #16]
    7186:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    7188:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    718a:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    718c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    718e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7190:	2300      	movs	r3, #0
    7192:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    7194:	6063      	str	r3, [r4, #4]
}
    7196:	bd10      	pop	{r4, pc}

00007198 <next_timeout>:
{
    7198:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    719a:	f7fd fd73 	bl	4c84 <first>
    719e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    71a0:	f7fd fd86 	bl	4cb0 <elapsed>
	if ((to == NULL) ||
    71a4:	b17c      	cbz	r4, 71c6 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    71a6:	6923      	ldr	r3, [r4, #16]
    71a8:	6962      	ldr	r2, [r4, #20]
    71aa:	1a1b      	subs	r3, r3, r0
    71ac:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    71b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    71b4:	f172 0100 	sbcs.w	r1, r2, #0
    71b8:	da08      	bge.n	71cc <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
    71ba:	2a00      	cmp	r2, #0
    71bc:	db01      	blt.n	71c2 <next_timeout+0x2a>
    71be:	4618      	mov	r0, r3
}
    71c0:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
    71c2:	2300      	movs	r3, #0
    71c4:	e7fb      	b.n	71be <next_timeout+0x26>
		ret = MAX_WAIT;
    71c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    71ca:	e7f9      	b.n	71c0 <next_timeout+0x28>
    71cc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    71d0:	e7f6      	b.n	71c0 <next_timeout+0x28>

000071d2 <z_abort_timeout>:
{
    71d2:	b570      	push	{r4, r5, r6, lr}
    71d4:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    71d6:	2300      	movs	r3, #0
	__asm__ volatile(
    71d8:	f04f 0220 	mov.w	r2, #32
    71dc:	f3ef 8611 	mrs	r6, BASEPRI
    71e0:	f382 8812 	msr	BASEPRI_MAX, r2
    71e4:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    71e8:	f06f 0015 	mvn.w	r0, #21
    71ec:	e004      	b.n	71f8 <z_abort_timeout+0x26>
	__asm__ volatile(
    71ee:	f386 8811 	msr	BASEPRI, r6
    71f2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    71f6:	2301      	movs	r3, #1
    71f8:	461d      	mov	r5, r3
    71fa:	b93b      	cbnz	r3, 720c <z_abort_timeout+0x3a>
	return node->next != NULL;
    71fc:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    71fe:	2b00      	cmp	r3, #0
    7200:	d0f5      	beq.n	71ee <z_abort_timeout+0x1c>
			remove_timeout(to);
    7202:	4620      	mov	r0, r4
    7204:	f7ff ffb1 	bl	716a <remove_timeout>
			ret = 0;
    7208:	4628      	mov	r0, r5
    720a:	e7f0      	b.n	71ee <z_abort_timeout+0x1c>
}
    720c:	bd70      	pop	{r4, r5, r6, pc}

0000720e <z_get_next_timeout_expiry>:
{
    720e:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    7210:	2300      	movs	r3, #0
	__asm__ volatile(
    7212:	f04f 0220 	mov.w	r2, #32
    7216:	f3ef 8411 	mrs	r4, BASEPRI
    721a:	f382 8812 	msr	BASEPRI_MAX, r2
    721e:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    7222:	f04f 30ff 	mov.w	r0, #4294967295
    7226:	e006      	b.n	7236 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    7228:	f7ff ffb6 	bl	7198 <next_timeout>
	__asm__ volatile(
    722c:	f384 8811 	msr	BASEPRI, r4
    7230:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7234:	2301      	movs	r3, #1
    7236:	2b00      	cmp	r3, #0
    7238:	d0f6      	beq.n	7228 <z_get_next_timeout_expiry+0x1a>
}
    723a:	bd10      	pop	{r4, pc}

0000723c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    723c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    723e:	f7fd fe27 	bl	4e90 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7242:	bd08      	pop	{r3, pc}

00007244 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7244:	b900      	cbnz	r0, 7248 <z_impl_k_busy_wait+0x4>
    7246:	4770      	bx	lr
{
    7248:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    724a:	f7fa feef 	bl	202c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    724e:	bd08      	pop	{r3, pc}

00007250 <k_heap_init>:
{
    7250:	b510      	push	{r4, lr}
    7252:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    7256:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    7258:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    725a:	f7fe f8c5 	bl	53e8 <sys_heap_init>
}
    725e:	bd10      	pop	{r4, pc}

00007260 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7260:	4770      	bx	lr
	...
